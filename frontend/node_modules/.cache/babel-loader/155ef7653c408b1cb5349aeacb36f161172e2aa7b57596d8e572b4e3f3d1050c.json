{"ast":null,"code":"/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * TriangularBase is used to calculate base functions for funnel/pyramid series.\n */\nvar TriangularBase = /** @class */function (_super) {\n  __extends(TriangularBase, _super);\n  function TriangularBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Initializes the properties of funnel/pyramid series\n   *\n   * @private\n   */\n  TriangularBase.prototype.initProperties = function (chart, series) {\n    var actualChartArea = chart.initialClipRect;\n    series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n    series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n    this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n    if (series.explodeOffset === '30%') {\n      series.explodeOffset = '25px';\n    }\n    chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n    var points = series.points;\n    this.initializeSizeRatio(points, series);\n  };\n  /**\n   * Initializes the size of the pyramid/funnel segments\n   *\n   * @private\n   */\n  TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n    if (reverse === void 0) {\n      reverse = false;\n    }\n    var sumOfPoints = series.sumOfPoints;\n    //Limiting the ratio within the range of 0 to 1\n    var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1);\n    //% equivalence of a value 1\n    var coEff = 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio)));\n    var spacing = gapRatio / (points.length - 1);\n    var y = 0;\n    //starting from bottom\n    for (var i = points.length - 1; i >= 0; i--) {\n      var index = reverse ? points.length - 1 - i : i;\n      if (points[index].visible) {\n        var height = coEff * points[index].y;\n        points[index].yRatio = y;\n        points[index].heightRatio = height;\n        y += height + spacing;\n      }\n    }\n  };\n  /**\n   * Marks the label location from the set of points that forms a pyramid/funnel segment\n   *\n   * @private\n   */\n  TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n    var last = points.length - 1;\n    var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n    var x = (points[0].x + points[bottom].x) / 2;\n    var right = (points[1].x + points[bottom - 1].x) / 2;\n    point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n    point.symbolLocation = {\n      x: point.region.x + point.region.width / 2,\n      y: point.region.y + point.region.height / 2\n    };\n    point.labelOffset = {\n      x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n      y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n    };\n  };\n  /**\n   * Finds the path to connect the list of points\n   *\n   * @private\n   */\n  TriangularBase.prototype.findPath = function (locations) {\n    var path = 'M';\n    for (var i = 0; i < locations.length; i++) {\n      path += locations[i].x + ' ' + locations[i].y;\n      if (i !== locations.length - 1) {\n        path += ' L';\n      }\n    }\n    return path;\n  };\n  /**\n   * To calculate data-label bounds\n   *\n   * @private\n   */\n  TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n    var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n    var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n    var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n    series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n    series.accumulationBound = accumulationBound;\n    if (visible && position === 'Outside') {\n      series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n    }\n  };\n  return TriangularBase;\n}(AccumulationBase);\nexport { TriangularBase };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Rect","Size","stringToNumber","AccumulationBase","TriangularBase","_super","apply","arguments","initProperties","chart","series","actualChartArea","initialClipRect","triangleSize","width","height","neckSize","neckWidth","neckHeight","defaultLabelBound","dataLabel","visible","position","explodeOffset","explodeDistance","points","initializeSizeRatio","reverse","sumOfPoints","gapRatio","Math","min","max","coEff","spacing","length","y","i","index","yRatio","heightRatio","setLabelLocation","point","last","bottom","type","x","right","region","symbolLocation","labelOffset","findPath","locations","path","accumulationBound","labelBound","Infinity"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/accumulation-chart/renderer/triangular-base.js"],"sourcesContent":["/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/**\n * Defines the common behavior of funnel and pyramid series\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Rect, Size } from '@syncfusion/ej2-svg-base';\nimport { stringToNumber } from '../../common/utils/helper';\nimport { AccumulationBase } from './accumulation-base';\n/**\n * TriangularBase is used to calculate base functions for funnel/pyramid series.\n */\nvar TriangularBase = /** @class */ (function (_super) {\n    __extends(TriangularBase, _super);\n    function TriangularBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Initializes the properties of funnel/pyramid series\n     *\n     * @private\n     */\n    TriangularBase.prototype.initProperties = function (chart, series) {\n        var actualChartArea = chart.initialClipRect;\n        series.triangleSize = new Size(stringToNumber(series.width, actualChartArea.width), stringToNumber(series.height, actualChartArea.height));\n        series.neckSize = new Size(stringToNumber(series.neckWidth, actualChartArea.width), stringToNumber(series.neckHeight, actualChartArea.height));\n        this.defaultLabelBound(series, series.dataLabel.visible, series.dataLabel.position, chart);\n        if (series.explodeOffset === '30%') {\n            series.explodeOffset = '25px';\n        }\n        chart.explodeDistance = stringToNumber(series.explodeOffset, actualChartArea.width);\n        var points = series.points;\n        this.initializeSizeRatio(points, series);\n    };\n    /**\n     * Initializes the size of the pyramid/funnel segments\n     *\n     * @private\n     */\n    TriangularBase.prototype.initializeSizeRatio = function (points, series, reverse) {\n        if (reverse === void 0) { reverse = false; }\n        var sumOfPoints = series.sumOfPoints;\n        //Limiting the ratio within the range of 0 to 1\n        var gapRatio = Math.min(Math.max(series.gapRatio, 0), 1);\n        //% equivalence of a value 1\n        var coEff = 1 / (sumOfPoints * (1 + gapRatio / (1 - gapRatio)));\n        var spacing = gapRatio / (points.length - 1);\n        var y = 0;\n        //starting from bottom\n        for (var i = points.length - 1; i >= 0; i--) {\n            var index = reverse ? points.length - 1 - i : i;\n            if (points[index].visible) {\n                var height = coEff * points[index].y;\n                points[index].yRatio = y;\n                points[index].heightRatio = height;\n                y += height + spacing;\n            }\n        }\n    };\n    /**\n     * Marks the label location from the set of points that forms a pyramid/funnel segment\n     *\n     * @private\n     */\n    TriangularBase.prototype.setLabelLocation = function (series, point, points) {\n        var last = points.length - 1;\n        var bottom = series.type === 'Funnel' ? points.length - 2 : points.length - 1;\n        var x = (points[0].x + points[bottom].x) / 2;\n        var right = (points[1].x + points[bottom - 1].x) / 2;\n        point.region = new Rect(x, points[0].y, right - x, points[bottom].y - points[0].y);\n        point.symbolLocation = {\n            x: point.region.x + point.region.width / 2,\n            y: point.region.y + point.region.height / 2\n        };\n        point.labelOffset = {\n            x: point.symbolLocation.x - (points[0].x + points[last].x) / 2,\n            y: point.symbolLocation.y - (points[0].y + points[last].y) / 2\n        };\n    };\n    /**\n     * Finds the path to connect the list of points\n     *\n     * @private\n     */\n    TriangularBase.prototype.findPath = function (locations) {\n        var path = 'M';\n        for (var i = 0; i < locations.length; i++) {\n            path += locations[i].x + ' ' + locations[i].y;\n            if (i !== locations.length - 1) {\n                path += ' L';\n            }\n        }\n        return path;\n    };\n    /**\n     * To calculate data-label bounds\n     *\n     * @private\n     */\n    TriangularBase.prototype.defaultLabelBound = function (series, visible, position, chart) {\n        var x = (chart.initialClipRect.width - series.triangleSize.width) / 2;\n        var y = (chart.initialClipRect.height - series.triangleSize.height) / 2;\n        var accumulationBound = new Rect(x, y, series.triangleSize.width, series.triangleSize.height);\n        series.labelBound = new Rect(accumulationBound.x, accumulationBound.y, accumulationBound.width + accumulationBound.x, accumulationBound.height + accumulationBound.y);\n        series.accumulationBound = accumulationBound;\n        if (visible && position === 'Outside') {\n            series.labelBound = new Rect(Infinity, Infinity, -Infinity, -Infinity);\n        }\n    };\n    return TriangularBase;\n}(AccumulationBase));\nexport { TriangularBase };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}