{"ast":null,"code":"/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * StripLine src\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { valueToCoefficient, textElement, RectOption, appendChildElement, appendClipElement, withIn, getElement } from '../../common/utils/helper';\nimport { measureText, TextOption, PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `StripLine` module is used to render the stripLine in chart.\n */\nvar StripLine = /** @class */function () {\n  function StripLine() {}\n  /**\n   * Finding x, y, width and height of the strip line\n   *\n   * @param {Axis} axis axis\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {Rect} seriesClipRect seriesClipRect\n   * @param {number} startValue startValue\n   * @param {Axis} segmentAxis segmentAxis\n   * @param {Chart} chart chart instance\n   */\n  StripLine.prototype.measureStripLine = function (axis, stripline, seriesClipRect, startValue, segmentAxis, chart) {\n    var actualStart;\n    var actualEnd;\n    var orientation = axis.orientation;\n    var isDateTimeAxis = axis.valueType === 'DateTime';\n    if (stripline.isRepeat && stripline.size !== null) {\n      actualStart = startValue;\n      actualEnd = null;\n    } else {\n      if (axis.valueType === 'DateTimeCategory') {\n        var start = stripline.start;\n        var end = stripline.end;\n        actualStart = start != null && typeof start !== 'number' ? axis.labels.indexOf(this.dateToMilliSeconds(start, chart).toString()) : start;\n        actualEnd = end != null && typeof end !== 'number' ? axis.labels.indexOf(this.dateToMilliSeconds(end, chart).toString()) : end;\n      } else {\n        actualStart = stripline.start === null ? null : isDateTimeAxis && this.isCoreDate(stripline.start) ? this.dateToMilliSeconds(stripline.start, chart) : +stripline.start;\n        actualEnd = stripline.end === null ? null : isDateTimeAxis && this.isCoreDate(stripline.start) ? this.dateToMilliSeconds(stripline.end, chart) : +stripline.end;\n      }\n    }\n    var rect = this.getFromTovalue(actualStart, actualEnd, stripline.size, stripline.startFromAxis, axis, stripline);\n    var height = orientation === 'Vertical' ? (rect.to - rect.from) * axis.rect.height : seriesClipRect.height;\n    var width = orientation === 'Horizontal' ? (rect.to - rect.from) * axis.rect.width : seriesClipRect.width;\n    var x = orientation === 'Vertical' ? seriesClipRect.x : rect.from * axis.rect.width + axis.rect.x;\n    var y = orientation === 'Horizontal' ? seriesClipRect.y : axis.rect.y + axis.rect.height - (stripline.sizeType === 'Pixel' ? rect.from : rect.to) * axis.rect.height;\n    if (stripline.isSegmented && stripline.segmentStart != null && stripline.segmentEnd != null && stripline.sizeType !== 'Pixel') {\n      var start = isDateTimeAxis && this.isCoreDate(stripline.segmentStart) ? this.dateToMilliSeconds(stripline.segmentStart, chart) : +stripline.segmentStart;\n      var end = isDateTimeAxis && this.isCoreDate(stripline.segmentEnd) ? this.dateToMilliSeconds(stripline.segmentEnd, chart) : +stripline.segmentEnd;\n      var segRect = this.getFromTovalue(start, end, null, null, segmentAxis, stripline);\n      if (segmentAxis.orientation === 'Vertical') {\n        y = segmentAxis.rect.y + segmentAxis.rect.height - segRect.to * segmentAxis.rect.height;\n        height = (segRect.to - segRect.from) * segmentAxis.rect.height;\n      } else {\n        x = segRect.from * segmentAxis.rect.width + segmentAxis.rect.x;\n        width = (segRect.to - segRect.from) * segmentAxis.rect.width;\n      }\n    }\n    if (height !== 0 && width !== 0 || stripline.sizeType === 'Pixel' && (stripline.start !== null || stripline.startFromAxis)) {\n      return new Rect(x, y, width, height);\n    }\n    return new Rect(0, 0, 0, 0);\n  };\n  /**\n   * To get from to value from start, end, size, start from axis\n   *\n   * @param {number} start start\n   * @param {number} end end\n   * @param {number} size size\n   * @param {boolean} startFromAxis startFromAxis\n   * @param {Axis} axis axis\n   * @param {StripLineSettingsModel} stripline stripline\n   */\n  StripLine.prototype.getFromTovalue = function (start, end, size, startFromAxis, axis, stripline) {\n    var from = !stripline.isRepeat && startFromAxis ? axis.visibleRange.min : start;\n    var to = this.getToValue(Math.max(start, isNullOrUndefined(end) ? start : end), from, size, axis, end, stripline);\n    from = this.findValue(from, axis);\n    to = this.findValue(to, axis);\n    return {\n      from: valueToCoefficient(axis.isAxisInverse ? to : from, axis),\n      to: valueToCoefficient(axis.isAxisInverse ? from : to, axis)\n    };\n  };\n  /**\n   * Finding end value of the strip line\n   *\n   * @param {number} to to\n   * @param {number} from from\n   * @param {number} size size\n   * @param {Axis} axis axis\n   * @param {number} end end\n   * @param {StripLineSettingsModel} stripline stripline\n   */\n  StripLine.prototype.getToValue = function (to, from, size, axis, end, stripline) {\n    var sizeType = stripline.sizeType;\n    var isEnd = end === null;\n    if (axis.valueType === 'DateTime') {\n      var fromValue = new Date(from);\n      if (sizeType === 'Auto') {\n        sizeType = axis.actualIntervalType;\n        size *= axis.visibleRange.interval;\n      }\n      switch (sizeType) {\n        case 'Years':\n          return isEnd ? new Date(fromValue.setFullYear(fromValue.getFullYear() + size)) : to;\n        case 'Months':\n          return isEnd ? new Date(fromValue.setMonth(fromValue.getMonth() + size)) : to;\n        case 'Days':\n          return isEnd ? new Date(fromValue.setDate(fromValue.getDate() + size)) : to;\n        case 'Hours':\n          return isEnd ? new Date(fromValue.setHours(fromValue.getHours() + size)) : to;\n        case 'Minutes':\n          return isEnd ? new Date(fromValue.setMinutes(fromValue.getMinutes() + size)) : to;\n        case 'Seconds':\n          return isEnd ? new Date(fromValue.setSeconds(fromValue.getSeconds() + size)) : to;\n        default:\n          return from;\n      }\n    } else {\n      return stripline.sizeType === 'Pixel' ? from : isEnd ? from + size : to;\n    }\n  };\n  /**\n   * To check the strip line values within range\n   *\n   * @param {number} value value\n   * @param {Axis} axis axis\n   */\n  StripLine.prototype.findValue = function (value, axis) {\n    if (value < axis.visibleRange.min) {\n      value = axis.visibleRange.min;\n    } else if (value > axis.visibleRange.max) {\n      value = axis.visibleRange.max;\n    }\n    return value;\n  };\n  /**\n   * Date parse\n   *\n   * @param {Date} value date\n   * @param {Chart} chart chart instance\n   * @returns {Date} parsed date\n   */\n  StripLine.prototype.dateParse = function (value, chart) {\n    var dateParser = chart.intl.getDateParser({\n      skeleton: 'full',\n      type: 'dateTime'\n    });\n    var dateFormatter = chart.intl.getDateFormat({\n      skeleton: 'full',\n      type: 'dateTime'\n    });\n    return new Date(Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({\n      val: value\n    }).val)))));\n  };\n  /**\n   * To render strip lines based start and end.\n   *\n   * @param {Chart} chart chart\n   * @param {ZIndex} position position\n   * @param {Axis[]} axes axes\n   * @private\n   */\n  StripLine.prototype.renderStripLine = function (chart, position, axes) {\n    var id = chart.element.id + '_stripline_' + position + '_';\n    var seriesClipRect = chart.chartAxisLayoutPanel.seriesClipRect;\n    var end = 0;\n    var limit = 0;\n    var startValue = 0;\n    var segmentAxis = null;\n    var range;\n    var options = new RectOption(id + 'ClipRect', 'transparent', {\n      width: 1,\n      color: 'Gray'\n    }, 1, {\n      x: chart.initialClipRect.x,\n      y: chart.initialClipRect.y,\n      width: chart.initialClipRect.width,\n      height: chart.initialClipRect.height\n    });\n    var striplineGroup = chart.renderer.createGroup({\n      id: id + 'collections',\n      'clip-path': 'url(#' + id + 'ClipRect' + ')'\n    });\n    if (!chart.enableCanvas) {\n      striplineGroup.appendChild(appendClipElement(chart.redraw, options, chart.renderer));\n    }\n    for (var _i = 0, axes_1 = axes; _i < axes_1.length; _i++) {\n      var axis = axes_1[_i];\n      var count = 0;\n      for (var _a = 0, _b = axis.stripLines; _a < _b.length; _a++) {\n        var stripline = _b[_a];\n        if (stripline.visible && stripline.zIndex === position) {\n          if (stripline.isSegmented && stripline.segmentStart != null && stripline.segmentEnd != null && stripline.sizeType !== 'Pixel') {\n            segmentAxis = this.getSegmentAxis(axes, axis, stripline);\n          }\n          if (stripline.isRepeat && stripline.repeatEvery != null && stripline.size !== null && stripline.sizeType !== 'Pixel') {\n            limit = stripline.repeatUntil != null ? axis.valueType === 'DateTime' ? this.dateToMilliSeconds(stripline.repeatUntil, chart) : +stripline.repeatUntil : axis.actualRange.max;\n            startValue = axis.valueType === 'DateTime' && this.isCoreDate(stripline.start) ? this.dateToMilliSeconds(stripline.start, chart) : stripline.start;\n            if (stripline.startFromAxis && axis.valueType === 'DateTime' && stripline.sizeType === 'Auto' || stripline.start < axis.visibleRange.min) {\n              startValue = axis.visibleLabels[0].value === axis.visibleRange.min ? axis.visibleRange.min : axis.visibleLabels[0].value - (axis.valueType === 'DateTime' ? axis.dateTimeInterval : axis.visibleRange.interval);\n            }\n            startValue = stripline.startFromAxis && axis.valueType !== 'DateTime' ? axis.visibleRange.min : startValue;\n            while (startValue < limit) {\n              end = startValue + (axis.valueType === 'DateTime' ? axis.dateTimeInterval * +stripline.size : stripline.size);\n              range = withIn(end, axis.visibleRange);\n              if (startValue >= axis.visibleRange.min && startValue < axis.visibleRange.max || range) {\n                this.renderStripLineElement(axis, stripline, seriesClipRect, id, striplineGroup, chart, startValue, segmentAxis, count);\n              }\n              count++;\n              startValue = this.getStartValue(axis, stripline, startValue, chart);\n            }\n          } else {\n            this.renderStripLineElement(axis, stripline, seriesClipRect, id, striplineGroup, chart, null, segmentAxis, count);\n            count++;\n          }\n        }\n      }\n    }\n    appendChildElement(chart.enableCanvas, chart.svgObject, striplineGroup, chart.redraw);\n  };\n  /**\n   * To convert the C# date to js date\n   *\n   * @param {string | number | Object} value date value\n   * @returns {boolean} returns true if datetime value type is string(for asp platform)\n   */\n  StripLine.prototype.isCoreDate = function (value) {\n    return typeof value === 'string' ? true : false;\n  };\n  /**\n   * To get the total milli seconds\n   *\n   * @param {Date | number | Object} value date value\n   * @param {Chart} chart chart instance\n   * @returns {number} returns milliseconds\n   */\n  StripLine.prototype.dateToMilliSeconds = function (value, chart) {\n    return this.dateParse(value, chart).getTime();\n  };\n  /**\n   * To draw the single line strip line\n   *\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {Rect} rect rect\n   * @param {string} id id\n   * @param {Element} parent parent\n   * @param {Chart} chart chart\n   * @param {Axis} axis axis\n   */\n  StripLine.prototype.renderPath = function (stripline, rect, id, parent, chart, axis) {\n    var element = getElement(id);\n    var direction = element ? element.getAttribute('d') : '';\n    var d = axis.orientation === 'Vertical' ? 'M ' + rect.x + ' ' + rect.y + ' ' + 'L ' + (rect.x + rect.width) + ' ' + rect.y : 'M ' + rect.x + ' ' + rect.y + ' ' + 'L ' + rect.x + ' ' + (rect.y + rect.height);\n    appendChildElement(chart.enableCanvas, parent, chart.renderer.drawPath(new PathOption(id, 'none', stripline.size, stripline.color, stripline.opacity, stripline.dashArray, d)), chart.redraw, true, 'x', 'y', null, direction, true);\n  };\n  /**\n   * To draw the rectangle\n   *\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {Rect} rect rect\n   * @param {string} id id\n   * @param {Element} parent parent\n   * @param {Chart} chart chart\n   */\n  StripLine.prototype.renderRectangle = function (stripline, rect, id, parent, chart) {\n    var element = getElement(id);\n    var previousRect = element ? new Rect(+element.getAttribute('x'), +element.getAttribute('y'), +element.getAttribute('width'), +element.getAttribute('height')) : null;\n    appendChildElement(chart.enableCanvas, parent, chart.renderer.drawRectangle(new RectOption(id, stripline.color, stripline.border, stripline.opacity, rect, 0, 0, '', stripline.dashArray)), chart.redraw, true, 'x', 'y', null, null, true, true, previousRect);\n  };\n  /**\n   * To create the text on strip line\n   *\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {Rect} rect rect\n   * @param {string} id id\n   * @param {Element} parent parent\n   * @param {Chart} chart chart\n   * @param {Axis} axis axis\n   */\n  StripLine.prototype.renderText = function (stripline, rect, id, parent, chart, axis) {\n    var textSize = measureText(stripline.text, stripline.textStyle);\n    var isRotationNull = stripline.rotation === null;\n    var textMid = isRotationNull ? 3 * (textSize.height / 8) : 0;\n    var ty = rect.y + rect.height / 2 + textMid;\n    var rotation = isRotationNull ? axis.orientation === 'Vertical' ? 0 : -90 : stripline.rotation;\n    var tx = rect.x + rect.width / 2;\n    var anchor;\n    var padding = 5;\n    if (axis.orientation === 'Horizontal') {\n      tx = this.getTextStart(tx + textMid * this.factor(stripline.horizontalAlignment), rect.width, stripline.horizontalAlignment);\n      ty = this.getTextStart(ty - textMid, rect.height, stripline.verticalAlignment) + (stripline.verticalAlignment === 'Start' && !isRotationNull ? textSize.height / 4 : 0);\n      anchor = isRotationNull ? this.invertAlignment(stripline.verticalAlignment) : stripline.horizontalAlignment;\n    } else {\n      tx = this.getTextStart(tx, rect.width, stripline.horizontalAlignment);\n      ty = this.getTextStart(ty + textMid * this.factor(stripline.verticalAlignment) - padding, rect.height, stripline.verticalAlignment);\n      anchor = stripline.horizontalAlignment;\n    }\n    textElement(chart.renderer, new TextOption(id, tx, ty, anchor, stripline.text, 'rotate(' + rotation + ' ' + tx + ',' + ty + ')', 'middle'), stripline.textStyle, stripline.textStyle.color, parent, null, null, null, null, null, null, null, null, chart.enableCanvas);\n  };\n  StripLine.prototype.invertAlignment = function (anchor) {\n    switch (anchor) {\n      case 'Start':\n        anchor = 'End';\n        break;\n      case 'End':\n        anchor = 'Start';\n        break;\n    }\n    return anchor;\n  };\n  /**\n   * To find the next value of the recurrence strip line\n   *\n   * @param {Axis} axis axis\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {number} startValue startValue\n   * @param {Chart} chart chart instance\n   * @returns {number} next start value of the recurrence strip line\n   */\n  StripLine.prototype.getStartValue = function (axis, stripline, startValue, chart) {\n    if (axis.valueType === 'DateTime') {\n      return this.getToValue(null, startValue, +stripline.repeatEvery, axis, null, stripline);\n    } else {\n      return startValue + +stripline.repeatEvery;\n    }\n  };\n  /**\n   * Finding segment axis for segmented strip line\n   *\n   * @param {Axis[]} axes axes collection\n   * @param {Axis} axis axis\n   * @param {StripLineSettingsModel} stripline stripline\n   */\n  StripLine.prototype.getSegmentAxis = function (axes, axis, stripline) {\n    var segment;\n    if (stripline.segmentAxisName == null) {\n      return axis.orientation === 'Horizontal' ? axes[1] : axes[0];\n    } else {\n      for (var i = 0; i < axes.length; i++) {\n        if (stripline.segmentAxisName === axes[i].name) {\n          segment = axes[i];\n        }\n      }\n      return segment;\n    }\n  };\n  /**\n   * To render strip line on chart\n   *\n   * @param {Axis} axis axis\n   * @param {StripLineSettingsModel} stripline stripline\n   * @param {Rect} seriesClipRect seriesClipRect\n   * @param {string} id id\n   * @param {Element} striplineGroup striplineGroup\n   * @param {Chart} chart chart\n   * @param {number} startValue startValue\n   * @param {Axis} segmentAxis segmentAxis\n   * @param {number} count count\n   */\n  StripLine.prototype.renderStripLineElement = function (axis, stripline, seriesClipRect, id, striplineGroup, chart, startValue, segmentAxis, count) {\n    var rect = this.measureStripLine(axis, stripline, seriesClipRect, startValue, segmentAxis, chart);\n    if (stripline.sizeType === 'Pixel') {\n      this.renderPath(stripline, rect, id + 'path_' + axis.name + '_' + count, striplineGroup, chart, axis);\n    } else {\n      if (rect.height !== 0 && rect.width !== 0) {\n        this.renderRectangle(stripline, rect, id + 'rect_' + axis.name + '_' + count, striplineGroup, chart);\n      }\n    }\n    if (stripline.text !== '') {\n      this.renderText(stripline, rect, id + 'text_' + axis.name + '_' + count, striplineGroup, chart, axis);\n    }\n  };\n  /**\n   * To find the factor of the text\n   *\n   * @param {Anchor} anchor text anchor\n   */\n  StripLine.prototype.factor = function (anchor) {\n    var factor = 0;\n    switch (anchor) {\n      case 'Start':\n        factor = 1;\n        break;\n      case 'End':\n        factor = -1;\n        break;\n    }\n    return factor;\n  };\n  /**\n   * To find the start value of the text\n   *\n   * @param {number} xy xy values\n   * @param {number} size text size\n   * @param {Anchor} textAlignment text alignment\n   */\n  StripLine.prototype.getTextStart = function (xy, size, textAlignment) {\n    var padding = 5;\n    switch (textAlignment) {\n      case 'Start':\n        xy = xy - size / 2 + padding;\n        break;\n      case 'End':\n        xy = xy + size / 2 - padding;\n        break;\n    }\n    return xy;\n  };\n  /**\n   * To get the module name for `StripLine`.\n   *\n   * @private\n   */\n  StripLine.prototype.getModuleName = function () {\n    return 'StripLine';\n  };\n  /**\n   * To destroy the `StripLine` module.\n   *\n   * @private\n   */\n  StripLine.prototype.destroy = function () {\n    // destroy peform here\n  };\n  return StripLine;\n}();\nexport { StripLine };","map":{"version":3,"names":["isNullOrUndefined","valueToCoefficient","textElement","RectOption","appendChildElement","appendClipElement","withIn","getElement","measureText","TextOption","PathOption","Rect","DataUtil","StripLine","prototype","measureStripLine","axis","stripline","seriesClipRect","startValue","segmentAxis","chart","actualStart","actualEnd","orientation","isDateTimeAxis","valueType","isRepeat","size","start","end","labels","indexOf","dateToMilliSeconds","toString","isCoreDate","rect","getFromTovalue","startFromAxis","height","to","from","width","x","y","sizeType","isSegmented","segmentStart","segmentEnd","segRect","visibleRange","min","getToValue","Math","max","findValue","isAxisInverse","isEnd","fromValue","Date","actualIntervalType","interval","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","value","dateParse","dateParser","intl","getDateParser","skeleton","type","dateFormatter","getDateFormat","parse","parseJson","val","renderStripLine","position","axes","id","element","chartAxisLayoutPanel","limit","range","options","color","initialClipRect","striplineGroup","renderer","createGroup","enableCanvas","appendChild","redraw","_i","axes_1","length","count","_a","_b","stripLines","visible","zIndex","getSegmentAxis","repeatEvery","repeatUntil","actualRange","visibleLabels","dateTimeInterval","renderStripLineElement","getStartValue","svgObject","getTime","renderPath","parent","direction","getAttribute","d","drawPath","opacity","dashArray","renderRectangle","previousRect","drawRectangle","border","renderText","textSize","text","textStyle","isRotationNull","rotation","textMid","ty","tx","anchor","padding","getTextStart","factor","horizontalAlignment","verticalAlignment","invertAlignment","segment","segmentAxisName","i","name","xy","textAlignment","getModuleName","destroy"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/axis/strip-line.js"],"sourcesContent":["/* eslint-disable jsdoc/require-returns */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * StripLine src\n */\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { valueToCoefficient, textElement, RectOption, appendChildElement, appendClipElement, withIn, getElement } from '../../common/utils/helper';\nimport { measureText, TextOption, PathOption, Rect } from '@syncfusion/ej2-svg-base';\nimport { DataUtil } from '@syncfusion/ej2-data';\n/**\n * `StripLine` module is used to render the stripLine in chart.\n */\nvar StripLine = /** @class */ (function () {\n    function StripLine() {\n    }\n    /**\n     * Finding x, y, width and height of the strip line\n     *\n     * @param {Axis} axis axis\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {Rect} seriesClipRect seriesClipRect\n     * @param {number} startValue startValue\n     * @param {Axis} segmentAxis segmentAxis\n     * @param {Chart} chart chart instance\n     */\n    StripLine.prototype.measureStripLine = function (axis, stripline, seriesClipRect, startValue, segmentAxis, chart) {\n        var actualStart;\n        var actualEnd;\n        var orientation = axis.orientation;\n        var isDateTimeAxis = axis.valueType === 'DateTime';\n        if (stripline.isRepeat && stripline.size !== null) {\n            actualStart = startValue;\n            actualEnd = null;\n        }\n        else {\n            if (axis.valueType === 'DateTimeCategory') {\n                var start = stripline.start;\n                var end = stripline.end;\n                actualStart = (start != null && typeof start !== 'number') ?\n                    axis.labels.indexOf(this.dateToMilliSeconds(start, chart).toString()) : start;\n                actualEnd = (end != null && typeof end !== 'number') ?\n                    axis.labels.indexOf(this.dateToMilliSeconds(end, chart).toString()) : end;\n            }\n            else {\n                actualStart = stripline.start === null ? null : isDateTimeAxis && this.isCoreDate(stripline.start) ?\n                    this.dateToMilliSeconds(stripline.start, chart) : +stripline.start;\n                actualEnd = stripline.end === null ? null : isDateTimeAxis && this.isCoreDate(stripline.start) ?\n                    this.dateToMilliSeconds(stripline.end, chart) : +stripline.end;\n            }\n        }\n        var rect = this.getFromTovalue(actualStart, actualEnd, stripline.size, stripline.startFromAxis, axis, stripline);\n        var height = (orientation === 'Vertical') ? (rect.to - rect.from) * axis.rect.height : seriesClipRect.height;\n        var width = (orientation === 'Horizontal') ? (rect.to - rect.from) * axis.rect.width : seriesClipRect.width;\n        var x = (orientation === 'Vertical') ? seriesClipRect.x : ((rect.from * axis.rect.width) + axis.rect.x);\n        var y = (orientation === 'Horizontal') ? seriesClipRect.y : (axis.rect.y + axis.rect.height -\n            ((stripline.sizeType === 'Pixel' ? rect.from : rect.to) * axis.rect.height));\n        if (stripline.isSegmented && stripline.segmentStart != null && stripline.segmentEnd != null && stripline.sizeType !== 'Pixel') {\n            var start = isDateTimeAxis && this.isCoreDate(stripline.segmentStart) ?\n                this.dateToMilliSeconds(stripline.segmentStart, chart) : +stripline.segmentStart;\n            var end = isDateTimeAxis && this.isCoreDate(stripline.segmentEnd) ?\n                this.dateToMilliSeconds(stripline.segmentEnd, chart) : +stripline.segmentEnd;\n            var segRect = this.getFromTovalue(start, end, null, null, segmentAxis, stripline);\n            if (segmentAxis.orientation === 'Vertical') {\n                y = (segmentAxis.rect.y + segmentAxis.rect.height -\n                    (segRect.to * segmentAxis.rect.height));\n                height = (segRect.to - segRect.from) * segmentAxis.rect.height;\n            }\n            else {\n                x = ((segRect.from * segmentAxis.rect.width) + segmentAxis.rect.x);\n                width = (segRect.to - segRect.from) * segmentAxis.rect.width;\n            }\n        }\n        if ((height !== 0 && width !== 0) || (stripline.sizeType === 'Pixel' && (stripline.start !== null || stripline.startFromAxis))) {\n            return new Rect(x, y, width, height);\n        }\n        return new Rect(0, 0, 0, 0);\n    };\n    /**\n     * To get from to value from start, end, size, start from axis\n     *\n     * @param {number} start start\n     * @param {number} end end\n     * @param {number} size size\n     * @param {boolean} startFromAxis startFromAxis\n     * @param {Axis} axis axis\n     * @param {StripLineSettingsModel} stripline stripline\n     */\n    StripLine.prototype.getFromTovalue = function (start, end, size, startFromAxis, axis, stripline) {\n        var from = (!stripline.isRepeat && startFromAxis) ? axis.visibleRange.min : start;\n        var to = this.getToValue(Math.max(start, isNullOrUndefined(end) ? start : end), from, size, axis, end, stripline);\n        from = this.findValue(from, axis);\n        to = this.findValue(to, axis);\n        return { from: valueToCoefficient(axis.isAxisInverse ? to : from, axis), to: valueToCoefficient(axis.isAxisInverse ? from : to, axis) };\n    };\n    /**\n     * Finding end value of the strip line\n     *\n     * @param {number} to to\n     * @param {number} from from\n     * @param {number} size size\n     * @param {Axis} axis axis\n     * @param {number} end end\n     * @param {StripLineSettingsModel} stripline stripline\n     */\n    StripLine.prototype.getToValue = function (to, from, size, axis, end, stripline) {\n        var sizeType = stripline.sizeType;\n        var isEnd = (end === null);\n        if (axis.valueType === 'DateTime') {\n            var fromValue = new Date(from);\n            if (sizeType === 'Auto') {\n                sizeType = axis.actualIntervalType;\n                size *= axis.visibleRange.interval;\n            }\n            switch (sizeType) {\n                case 'Years':\n                    return (isEnd ? new Date(fromValue.setFullYear(fromValue.getFullYear() + size)) : to);\n                case 'Months':\n                    return (isEnd ? new Date(fromValue.setMonth(fromValue.getMonth() + size)) : to);\n                case 'Days':\n                    return (isEnd ? new Date(fromValue.setDate(fromValue.getDate() + size)) : to);\n                case 'Hours':\n                    return (isEnd ? new Date(fromValue.setHours(fromValue.getHours() + size)) : to);\n                case 'Minutes':\n                    return (isEnd ? new Date(fromValue.setMinutes(fromValue.getMinutes() + size)) : to);\n                case 'Seconds':\n                    return (isEnd ? new Date(fromValue.setSeconds(fromValue.getSeconds() + size)) : to);\n                default:\n                    return from;\n            }\n        }\n        else {\n            return stripline.sizeType === 'Pixel' ? from : (isEnd ? (from + size) : to);\n        }\n    };\n    /**\n     * To check the strip line values within range\n     *\n     * @param {number} value value\n     * @param {Axis} axis axis\n     */\n    StripLine.prototype.findValue = function (value, axis) {\n        if (value < axis.visibleRange.min) {\n            value = axis.visibleRange.min;\n        }\n        else if (value > axis.visibleRange.max) {\n            value = axis.visibleRange.max;\n        }\n        return value;\n    };\n    /**\n     * Date parse\n     *\n     * @param {Date} value date\n     * @param {Chart} chart chart instance\n     * @returns {Date} parsed date\n     */\n    StripLine.prototype.dateParse = function (value, chart) {\n        var dateParser = chart.intl.getDateParser({ skeleton: 'full', type: 'dateTime' });\n        var dateFormatter = chart.intl.getDateFormat({ skeleton: 'full', type: 'dateTime' });\n        return new Date((Date.parse(dateParser(dateFormatter(new Date(DataUtil.parse.parseJson({ val: value }).val))))));\n    };\n    /**\n     * To render strip lines based start and end.\n     *\n     * @param {Chart} chart chart\n     * @param {ZIndex} position position\n     * @param {Axis[]} axes axes\n     * @private\n     */\n    StripLine.prototype.renderStripLine = function (chart, position, axes) {\n        var id = chart.element.id + '_stripline_' + position + '_';\n        var seriesClipRect = chart.chartAxisLayoutPanel.seriesClipRect;\n        var end = 0;\n        var limit = 0;\n        var startValue = 0;\n        var segmentAxis = null;\n        var range;\n        var options = new RectOption(id + 'ClipRect', 'transparent', { width: 1, color: 'Gray' }, 1, {\n            x: chart.initialClipRect.x, y: chart.initialClipRect.y,\n            width: chart.initialClipRect.width,\n            height: chart.initialClipRect.height\n        });\n        var striplineGroup = chart.renderer.createGroup({\n            id: id + 'collections',\n            'clip-path': 'url(#' + id + 'ClipRect' + ')'\n        });\n        if (!chart.enableCanvas) {\n            striplineGroup.appendChild(appendClipElement(chart.redraw, options, chart.renderer));\n        }\n        for (var _i = 0, axes_1 = axes; _i < axes_1.length; _i++) {\n            var axis = axes_1[_i];\n            var count = 0;\n            for (var _a = 0, _b = axis.stripLines; _a < _b.length; _a++) {\n                var stripline = _b[_a];\n                if (stripline.visible && stripline.zIndex === position) {\n                    if (stripline.isSegmented && stripline.segmentStart != null && stripline.segmentEnd != null &&\n                        stripline.sizeType !== 'Pixel') {\n                        segmentAxis = this.getSegmentAxis(axes, axis, stripline);\n                    }\n                    if (stripline.isRepeat && stripline.repeatEvery != null && stripline.size !== null && stripline.sizeType !== 'Pixel') {\n                        limit = (stripline.repeatUntil != null) ? ((axis.valueType === 'DateTime') ?\n                            this.dateToMilliSeconds(stripline.repeatUntil, chart) : +stripline.repeatUntil) : axis.actualRange.max;\n                        startValue = axis.valueType === 'DateTime' && this.isCoreDate(stripline.start) ?\n                            this.dateToMilliSeconds(stripline.start, chart) : stripline.start;\n                        if ((stripline.startFromAxis && axis.valueType === 'DateTime' && stripline.sizeType === 'Auto') ||\n                            (stripline.start < axis.visibleRange.min)) {\n                            startValue = axis.visibleLabels[0].value === axis.visibleRange.min ? axis.visibleRange.min :\n                                axis.visibleLabels[0].value - (axis.valueType === 'DateTime' ? axis.dateTimeInterval :\n                                    axis.visibleRange.interval);\n                        }\n                        startValue = stripline.startFromAxis && axis.valueType !== 'DateTime' ? axis.visibleRange.min : startValue;\n                        while (startValue < limit) {\n                            end = (startValue + (axis.valueType === 'DateTime' ? axis.dateTimeInterval * +stripline.size : stripline.size));\n                            range = withIn(end, axis.visibleRange);\n                            if ((startValue >= axis.visibleRange.min && startValue < axis.visibleRange.max) || range) {\n                                this.renderStripLineElement(axis, stripline, seriesClipRect, id, striplineGroup, chart, startValue, segmentAxis, count);\n                            }\n                            count++;\n                            startValue = this.getStartValue(axis, stripline, startValue, chart);\n                        }\n                    }\n                    else {\n                        this.renderStripLineElement(axis, stripline, seriesClipRect, id, striplineGroup, chart, null, segmentAxis, count);\n                        count++;\n                    }\n                }\n            }\n        }\n        appendChildElement(chart.enableCanvas, chart.svgObject, striplineGroup, chart.redraw);\n    };\n    /**\n     * To convert the C# date to js date\n     *\n     * @param {string | number | Object} value date value\n     * @returns {boolean} returns true if datetime value type is string(for asp platform)\n     */\n    StripLine.prototype.isCoreDate = function (value) {\n        return typeof value === 'string' ? true : false;\n    };\n    /**\n     * To get the total milli seconds\n     *\n     * @param {Date | number | Object} value date value\n     * @param {Chart} chart chart instance\n     * @returns {number} returns milliseconds\n     */\n    StripLine.prototype.dateToMilliSeconds = function (value, chart) {\n        return this.dateParse(value, chart).getTime();\n    };\n    /**\n     * To draw the single line strip line\n     *\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {Rect} rect rect\n     * @param {string} id id\n     * @param {Element} parent parent\n     * @param {Chart} chart chart\n     * @param {Axis} axis axis\n     */\n    StripLine.prototype.renderPath = function (stripline, rect, id, parent, chart, axis) {\n        var element = getElement(id);\n        var direction = element ? element.getAttribute('d') : '';\n        var d = (axis.orientation === 'Vertical') ? ('M ' + rect.x + ' ' + rect.y + ' ' + 'L ' + (rect.x + rect.width)\n            + ' ' + rect.y) :\n            ('M ' + rect.x + ' ' + rect.y + ' ' + 'L ' + rect.x + ' ' + (rect.y + rect.height));\n        appendChildElement(chart.enableCanvas, parent, chart.renderer.drawPath(new PathOption(id, 'none', stripline.size, stripline.color, stripline.opacity, stripline.dashArray, d)), chart.redraw, true, 'x', 'y', null, direction, true);\n    };\n    /**\n     * To draw the rectangle\n     *\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {Rect} rect rect\n     * @param {string} id id\n     * @param {Element} parent parent\n     * @param {Chart} chart chart\n     */\n    StripLine.prototype.renderRectangle = function (stripline, rect, id, parent, chart) {\n        var element = getElement(id);\n        var previousRect = element ? new Rect(+element.getAttribute('x'), +element.getAttribute('y'), +element.getAttribute('width'), +element.getAttribute('height')) : null;\n        appendChildElement(chart.enableCanvas, parent, chart.renderer.drawRectangle(new RectOption(id, stripline.color, stripline.border, stripline.opacity, rect, 0, 0, '', stripline.dashArray)), chart.redraw, true, 'x', 'y', null, null, true, true, previousRect);\n    };\n    /**\n     * To create the text on strip line\n     *\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {Rect} rect rect\n     * @param {string} id id\n     * @param {Element} parent parent\n     * @param {Chart} chart chart\n     * @param {Axis} axis axis\n     */\n    StripLine.prototype.renderText = function (stripline, rect, id, parent, chart, axis) {\n        var textSize = measureText(stripline.text, stripline.textStyle);\n        var isRotationNull = (stripline.rotation === null);\n        var textMid = isRotationNull ? 3 * (textSize.height / 8) : 0;\n        var ty = rect.y + (rect.height / 2) + textMid;\n        var rotation = isRotationNull ? ((axis.orientation === 'Vertical') ? 0 : -90) : stripline.rotation;\n        var tx = rect.x + (rect.width / 2);\n        var anchor;\n        var padding = 5;\n        if (axis.orientation === 'Horizontal') {\n            tx = this.getTextStart(tx + (textMid * this.factor(stripline.horizontalAlignment)), rect.width, stripline.horizontalAlignment);\n            ty = this.getTextStart(ty - textMid, rect.height, stripline.verticalAlignment) +\n                (stripline.verticalAlignment === 'Start' && !isRotationNull ? (textSize.height / 4) : 0);\n            anchor = isRotationNull ? this.invertAlignment(stripline.verticalAlignment) : stripline.horizontalAlignment;\n        }\n        else {\n            tx = this.getTextStart(tx, rect.width, stripline.horizontalAlignment);\n            ty = this.getTextStart(ty + (textMid * this.factor(stripline.verticalAlignment)) - padding, rect.height, stripline.verticalAlignment);\n            anchor = stripline.horizontalAlignment;\n        }\n        textElement(chart.renderer, new TextOption(id, tx, ty, anchor, stripline.text, 'rotate(' + rotation + ' ' + tx + ',' + ty + ')', 'middle'), stripline.textStyle, stripline.textStyle.color, parent, null, null, null, null, null, null, null, null, chart.enableCanvas);\n    };\n    StripLine.prototype.invertAlignment = function (anchor) {\n        switch (anchor) {\n            case 'Start':\n                anchor = 'End';\n                break;\n            case 'End':\n                anchor = 'Start';\n                break;\n        }\n        return anchor;\n    };\n    /**\n     * To find the next value of the recurrence strip line\n     *\n     * @param {Axis} axis axis\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {number} startValue startValue\n     * @param {Chart} chart chart instance\n     * @returns {number} next start value of the recurrence strip line\n     */\n    StripLine.prototype.getStartValue = function (axis, stripline, startValue, chart) {\n        if (axis.valueType === 'DateTime') {\n            return (this.getToValue(null, startValue, +stripline.repeatEvery, axis, null, stripline));\n        }\n        else {\n            return startValue + (+stripline.repeatEvery);\n        }\n    };\n    /**\n     * Finding segment axis for segmented strip line\n     *\n     * @param {Axis[]} axes axes collection\n     * @param {Axis} axis axis\n     * @param {StripLineSettingsModel} stripline stripline\n     */\n    StripLine.prototype.getSegmentAxis = function (axes, axis, stripline) {\n        var segment;\n        if (stripline.segmentAxisName == null) {\n            return (axis.orientation === 'Horizontal') ? axes[1] : axes[0];\n        }\n        else {\n            for (var i = 0; i < axes.length; i++) {\n                if (stripline.segmentAxisName === axes[i].name) {\n                    segment = axes[i];\n                }\n            }\n            return segment;\n        }\n    };\n    /**\n     * To render strip line on chart\n     *\n     * @param {Axis} axis axis\n     * @param {StripLineSettingsModel} stripline stripline\n     * @param {Rect} seriesClipRect seriesClipRect\n     * @param {string} id id\n     * @param {Element} striplineGroup striplineGroup\n     * @param {Chart} chart chart\n     * @param {number} startValue startValue\n     * @param {Axis} segmentAxis segmentAxis\n     * @param {number} count count\n     */\n    StripLine.prototype.renderStripLineElement = function (axis, stripline, seriesClipRect, id, striplineGroup, chart, startValue, segmentAxis, count) {\n        var rect = this.measureStripLine(axis, stripline, seriesClipRect, startValue, segmentAxis, chart);\n        if (stripline.sizeType === 'Pixel') {\n            this.renderPath(stripline, rect, id + 'path_' + axis.name + '_' + count, striplineGroup, chart, axis);\n        }\n        else {\n            if (rect.height !== 0 && rect.width !== 0) {\n                this.renderRectangle(stripline, rect, id + 'rect_' + axis.name + '_' + count, striplineGroup, chart);\n            }\n        }\n        if (stripline.text !== '') {\n            this.renderText(stripline, rect, id + 'text_' + axis.name + '_' + count, striplineGroup, chart, axis);\n        }\n    };\n    /**\n     * To find the factor of the text\n     *\n     * @param {Anchor} anchor text anchor\n     */\n    StripLine.prototype.factor = function (anchor) {\n        var factor = 0;\n        switch (anchor) {\n            case 'Start':\n                factor = 1;\n                break;\n            case 'End':\n                factor = -1;\n                break;\n        }\n        return factor;\n    };\n    /**\n     * To find the start value of the text\n     *\n     * @param {number} xy xy values\n     * @param {number} size text size\n     * @param {Anchor} textAlignment text alignment\n     */\n    StripLine.prototype.getTextStart = function (xy, size, textAlignment) {\n        var padding = 5;\n        switch (textAlignment) {\n            case 'Start':\n                xy = xy - (size / 2) + padding;\n                break;\n            case 'End':\n                xy = xy + (size / 2) - padding;\n                break;\n        }\n        return xy;\n    };\n    /**\n     * To get the module name for `StripLine`.\n     *\n     * @private\n     */\n    StripLine.prototype.getModuleName = function () {\n        return 'StripLine';\n    };\n    /**\n     * To destroy the `StripLine` module.\n     *\n     * @private\n     */\n    StripLine.prototype.destroy = function () {\n        // destroy peform here\n    };\n    return StripLine;\n}());\nexport { StripLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}