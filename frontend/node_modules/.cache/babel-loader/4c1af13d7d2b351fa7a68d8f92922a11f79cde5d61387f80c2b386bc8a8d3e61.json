{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `SmaIndicator` module is used to render SMA indicator.\n */\nvar SmaIndicator = /** @class */function (_super) {\n  __extends(SmaIndicator, _super);\n  function SmaIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions based on SMA approach\n   *\n   * @private\n   */\n  SmaIndicator.prototype.initDataSource = function (indicator, chart) {\n    var smaPoints = [];\n    var points = indicator.points;\n    if (points && points.length) {\n      //prepare data\n      var validData = points;\n      var field = firstToLowerCase(indicator.field);\n      var xField = 'x';\n      var signalSeries = indicator.targetSeries[0];\n      if (validData && validData.length && validData.length >= indicator.period) {\n        //find initial average\n        var average = 0;\n        var sum = 0;\n        for (var i = 0; i < indicator.period; i++) {\n          sum += validData[i][field];\n        }\n        average = sum / indicator.period;\n        smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n        var index = indicator.period;\n        while (index < validData.length) {\n          sum -= validData[index - indicator.period][field];\n          sum += validData[index][field];\n          average = sum / indicator.period;\n          smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n          index++;\n        }\n      }\n      this.setSeriesRange(smaPoints, indicator);\n    }\n  };\n  /**\n   * To destroy the SMA indicator\n   *\n   * @returns {void}\n   * @private\n   */\n  SmaIndicator.prototype.destroy = function () {\n    /**\n     * Destroys the SMA indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n  SmaIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SmaIndicator';\n  };\n  return SmaIndicator;\n}(TechnicalAnalysis);\nexport { SmaIndicator };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","firstToLowerCase","TechnicalAnalysis","SmaIndicator","_super","apply","arguments","initDataSource","indicator","chart","smaPoints","points","length","validData","field","xField","signalSeries","targetSeries","period","average","sum","i","push","getDataPoint","index","setSeriesRange","destroy","getModuleName"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/sma-indicator.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { firstToLowerCase } from '../../common/utils/helper';\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `SmaIndicator` module is used to render SMA indicator.\n */\nvar SmaIndicator = /** @class */ (function (_super) {\n    __extends(SmaIndicator, _super);\n    function SmaIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions based on SMA approach\n     *\n     * @private\n     */\n    SmaIndicator.prototype.initDataSource = function (indicator, chart) {\n        var smaPoints = [];\n        var points = indicator.points;\n        if (points && points.length) {\n            //prepare data\n            var validData = points;\n            var field = firstToLowerCase(indicator.field);\n            var xField = 'x';\n            var signalSeries = indicator.targetSeries[0];\n            if (validData && validData.length && validData.length >= indicator.period) {\n                //find initial average\n                var average = 0;\n                var sum = 0;\n                for (var i = 0; i < indicator.period; i++) {\n                    sum += validData[i][field];\n                }\n                average = sum / indicator.period;\n                smaPoints.push(this.getDataPoint(validData[indicator.period - 1][xField], average, validData[indicator.period - 1], signalSeries, smaPoints.length));\n                var index = indicator.period;\n                while (index < validData.length) {\n                    sum -= validData[index - indicator.period][field];\n                    sum += validData[index][field];\n                    average = sum / indicator.period;\n                    smaPoints.push(this.getDataPoint(validData[index][xField], average, validData[index], signalSeries, smaPoints.length));\n                    index++;\n                }\n            }\n            this.setSeriesRange(smaPoints, indicator);\n        }\n    };\n    /**\n     * To destroy the SMA indicator\n     *\n     * @returns {void}\n     * @private\n     */\n    SmaIndicator.prototype.destroy = function () {\n        /**\n         * Destroys the SMA indicator\n         */\n    };\n    /**\n     * Get module name.\n     */\n    SmaIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SmaIndicator';\n    };\n    return SmaIndicator;\n}(TechnicalAnalysis));\nexport { SmaIndicator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}