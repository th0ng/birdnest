{"ast":null,"code":"var _jsxFileName = \"/Users/thonghoangdanh/FullStack/birdnest/src/components/Table.jsx\";\nimport React from 'react';\nimport birdnestService from '../services/birdnest';\n\n//constructor for data to show in the table\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction dataConstructor(serialNumber, positionX, positionY) {\n  this.serialNumber = serialNumber;\n  this.positionX = positionX;\n  this.positionY = positionY;\n  this.distance = Math.hypot(positionX, positionY);\n}\n;\n\n//function to push the data into array, with timestamp\nconst push = (array, value) => {\n  array.push({\n    value: value,\n    time: Date.now()\n  });\n};\n\n//table function to be exported\nconst Table = _ref => {\n  let {\n    data\n  } = _ref;\n  const tableData = [];\n  for (const x of data) {\n    const found = tableData.find(e => e.serialNumber === x.serialNumber);\n    if (found) {\n      console.log(found);\n      found.time = Date.now();\n      //implement the function to replace later\n    } else {\n      const newData = new dataConstructor(x.children[0].value, x.children[8].value, x.children[7].value);\n      console.log(newData);\n      push(tableData, newData);\n    }\n  }\n\n  //delete data after 10 minutes\n  setInterval(() => {\n    let time = Date.now();\n    for (const item of tableData) {\n      if (item.time > time + 600000) {\n        tableData.splice(tableData.indexOf(item), 1);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","birdnestService","dataConstructor","serialNumber","positionX","positionY","distance","Math","hypot","push","array","value","time","Date","now","Table","data","tableData","x","found","find","e","console","log","newData","children","setInterval","item","splice","indexOf"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/src/components/Table.jsx"],"sourcesContent":["import React from 'react';\nimport birdnestService from '../services/birdnest';\n\n//constructor for data to show in the table\nfunction dataConstructor(serialNumber, positionX, positionY ) {\n  this.serialNumber = serialNumber;\n  this.positionX = positionX;\n  this.positionY = positionY;\n  this.distance = Math.hypot(positionX, positionY);\n};\n\n//function to push the data into array, with timestamp\nconst push = (array, value) => {\n  array.push({\n     value: value,\n     time: Date.now()\n  });\n};\n\n//table function to be exported\nconst Table = ({ data }) => {\n  const tableData = [];\n\n  for (const x of data) {\n    const found = tableData.find(e => e.serialNumber === x.serialNumber);\n    if (found) {\n      console.log(found);\n      found.time = Date.now();\n      //implement the function to replace later\n    } else {\n      const newData = new dataConstructor(\n        x.children[0].value,\n        x.children[8].value,\n        x.children[7].value,\n      );\n      console.log(newData);\n      push(tableData, newData);\n    }\n  }\n\n  //delete data after 10 minutes\n  setInterval(() => {\n    let time = Date.now();\n    for (const item of tableData) {\n      if (item.time > time + 600000) {\n        tableData.splice(tableData.indexOf(item), 1);\n      }\n    }\n  })\n\n  return (\n    <div>\n      <table>\n        <tr>\n          <th>Test</th>\n        </tr>\n      </table>\n    </div>\n  )\n};\n\nexport default Table;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,sBAAsB;;AAElD;AAAA;AACA,SAASC,eAAe,CAACC,YAAY,EAAEC,SAAS,EAAEC,SAAS,EAAG;EAC5D,IAAI,CAACF,YAAY,GAAGA,YAAY;EAChC,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,EAAEC,SAAS,CAAC;AAClD;AAAC;;AAED;AACA,MAAMI,IAAI,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC7BD,KAAK,CAACD,IAAI,CAAC;IACRE,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAEC,IAAI,CAACC,GAAG;EACjB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,QAAc;EAAA,IAAb;IAAEC;EAAK,CAAC;EACrB,MAAMC,SAAS,GAAG,EAAE;EAEpB,KAAK,MAAMC,CAAC,IAAIF,IAAI,EAAE;IACpB,MAAMG,KAAK,GAAGF,SAAS,CAACG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAClB,YAAY,KAAKe,CAAC,CAACf,YAAY,CAAC;IACpE,IAAIgB,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;MAClBA,KAAK,CAACP,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE;MACvB;IACF,CAAC,MAAM;MACL,MAAMU,OAAO,GAAG,IAAItB,eAAe,CACjCgB,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACd,KAAK,EACnBO,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACd,KAAK,EACnBO,CAAC,CAACO,QAAQ,CAAC,CAAC,CAAC,CAACd,KAAK,CACpB;MACDW,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;MACpBf,IAAI,CAACQ,SAAS,EAAEO,OAAO,CAAC;IAC1B;EACF;;EAEA;EACAE,WAAW,CAAC,MAAM;IAChB,IAAId,IAAI,GAAGC,IAAI,CAACC,GAAG,EAAE;IACrB,KAAK,MAAMa,IAAI,IAAIV,SAAS,EAAE;MAC5B,IAAIU,IAAI,CAACf,IAAI,GAAGA,IAAI,GAAG,MAAM,EAAE;QAC7BK,SAAS,CAACW,MAAM,CAACX,SAAS,CAACY,OAAO,CAACF,IAAI,CAAC,EAAE,CAAC,CAAC;MAC9C;IACF;EACF,CAAC,CAAC;EAEF,oBACE;IAAA,uBACE;MAAA,uBACE;QAAA,uBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAa;QAAA;QAAA;QAAA;MAAA;IACV;MAAA;MAAA;MAAA;IAAA;EACC;IAAA;IAAA;IAAA;EAAA,QACJ;AAEV,CAAC;AAAC,KAvCIZ,KAAK;AAyCX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}