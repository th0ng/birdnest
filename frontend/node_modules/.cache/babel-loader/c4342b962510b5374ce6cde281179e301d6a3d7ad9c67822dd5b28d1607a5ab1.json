{"ast":null,"code":"var _jsxFileName = \"/Users/thonghoangdanh/FullStack/birdnest/src/components/Table.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport birdnestService from '../services/birdnest';\n\n//constructor for data to show in the table\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataConstructor = (serialNumber, positionX, positionY) => {\n  this.serialNumber = serialNumber;\n  this.positionX = positionX;\n  this.positionY = positionY;\n  this.distance = Math.hypot(positionX, positionY);\n};\n\n//function to push the data into array, with timestamp\nconst push = (array, value) => {\n  array.push({\n    value: value,\n    time: Date.now()\n  });\n};\n\n//table function to be exported\nconst Table = _ref => {\n  _s();\n  let {\n    data\n  } = _ref;\n  const [tableData, setTableData] = useState([]);\n  for (const x of data) {\n    const found = tableData.find(e => e.serialNumber === x.serialNumber);\n    if (found) {\n      console.log(\"duplicate item\");\n      //implement the function to replace later\n    } else {\n      console.log(x);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Table\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"aYr566aodt2JHuRghpBEssCYwlc=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","birdnestService","dataConstructor","serialNumber","positionX","positionY","distance","Math","hypot","push","array","value","time","Date","now","Table","data","tableData","setTableData","x","found","find","e","console","log"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/src/components/Table.jsx"],"sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport birdnestService from '../services/birdnest';\n\n//constructor for data to show in the table\nconst dataConstructor = (serialNumber, positionX, positionY ) => {\n  this.serialNumber = serialNumber;\n  this.positionX = positionX;\n  this.positionY = positionY;\n  this.distance = Math.hypot(positionX, positionY);\n};\n\n//function to push the data into array, with timestamp\nconst push = (array, value) => {\n  array.push({\n     value: value,\n     time: Date.now()\n  });\n};\n\n//table function to be exported\nconst Table = ({ data }) => {\n  const [tableData, setTableData] = useState([]);\n\n  for (const x of data) {\n    const found = tableData.find(e => e.serialNumber === x.serialNumber);\n    if (found) {\n      console.log(\"duplicate item\");\n      //implement the function to replace later\n    } else {\n      console.log(x);\n    }\n  }\n\n  return (\n    <div>Table</div>\n  )\n};\n\nexport default Table;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,eAAe,MAAM,sBAAsB;;AAElD;AAAA;AACA,MAAMC,eAAe,GAAG,CAACC,YAAY,EAAEC,SAAS,EAAEC,SAAS,KAAM;EAC/D,IAAI,CAACF,YAAY,GAAGA,YAAY;EAChC,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACJ,SAAS,EAAEC,SAAS,CAAC;AAClD,CAAC;;AAED;AACA,MAAMI,IAAI,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC7BD,KAAK,CAACD,IAAI,CAAC;IACRE,KAAK,EAAEA,KAAK;IACZC,IAAI,EAAEC,IAAI,CAACC,GAAG;EACjB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMC,KAAK,GAAG,QAAc;EAAA;EAAA,IAAb;IAAEC;EAAK,CAAC;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAE9C,KAAK,MAAMmB,CAAC,IAAIH,IAAI,EAAE;IACpB,MAAMI,KAAK,GAAGH,SAAS,CAACI,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,YAAY,KAAKgB,CAAC,CAAChB,YAAY,CAAC;IACpE,IAAIiB,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B;IACF,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAACL,CAAC,CAAC;IAChB;EACF;EAEA,oBACE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAgB;AAEpB,CAAC;AAAC,GAhBIJ,KAAK;AAAA,KAALA,KAAK;AAkBX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}