{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AtrIndicator` module is used to render ATR indicator.\n */\nvar AtrIndicator = /** @class */function (_super) {\n  __extends(AtrIndicator, _super);\n  function AtrIndicator() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Defines the predictions using Average True Range approach\n   *\n   * @private\n   */\n  AtrIndicator.prototype.initDataSource = function (indicator, chart) {\n    var validData = indicator.points;\n    if (validData.length > 0 && validData.length > indicator.period) {\n      this.calculateATRPoints(indicator, validData);\n    }\n  };\n  /**\n   *  To calculate Average True Range indicator points\n   *\n   * @private\n   */\n  AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n    var average = 0;\n    var highLow = 0;\n    var highClose = 0;\n    var lowClose = 0;\n    var trueRange = 0;\n    var points = [];\n    var temp = [];\n    var period = indicator.period;\n    var sum = 0;\n    var y = 'y';\n    var signalSeries = indicator.targetSeries[0];\n    for (var i = 0; i < validData.length; i++) {\n      /**\n       * Current High less the current Low\n       * Current High less the previous Close (absolute value)\n       * Current Low less the previous Close (absolute value)\n       */\n      highLow = Number(validData[i].high) - Number(validData[i].low);\n      if (i > 0) {\n        //\n        highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n        lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n      }\n      /**\n       * To find the maximum of highLow, highClose, lowClose\n       */\n      trueRange = Math.max(highLow, highClose, lowClose);\n      sum = sum + trueRange;\n      /**\n       * Push the x and y values for the Average true range indicator\n       */\n      if (i >= period) {\n        average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n        points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n      } else {\n        average = sum / period;\n        if (i === period - 1) {\n          points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n        }\n      }\n      temp[i] = {\n        x: validData[i].x,\n        y: average\n      };\n    }\n    this.setSeriesRange(points, indicator);\n  };\n  /**\n   * To destroy the Average true range indicator.\n   *\n   * @returns {void}\n   * @private\n   */\n  AtrIndicator.prototype.destroy = function () {\n    /**\n     * Destroy the Average true range indicator\n     */\n  };\n  /**\n   * Get module name.\n   */\n  AtrIndicator.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the Indicator\n     */\n    return 'AtrIndicator';\n  };\n  return AtrIndicator;\n}(TechnicalAnalysis);\nexport { AtrIndicator };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","TechnicalAnalysis","AtrIndicator","_super","apply","arguments","initDataSource","indicator","chart","validData","points","length","period","calculateATRPoints","average","highLow","highClose","lowClose","trueRange","temp","sum","y","signalSeries","targetSeries","i","Number","high","low","Math","abs","close","max","push","getDataPoint","x","setSeriesRange","destroy","getModuleName"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/technical-indicators/atr-indicator.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { TechnicalAnalysis } from './indicator-base';\n/**\n * `AtrIndicator` module is used to render ATR indicator.\n */\nvar AtrIndicator = /** @class */ (function (_super) {\n    __extends(AtrIndicator, _super);\n    function AtrIndicator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Defines the predictions using Average True Range approach\n     *\n     * @private\n     */\n    AtrIndicator.prototype.initDataSource = function (indicator, chart) {\n        var validData = indicator.points;\n        if (validData.length > 0 && validData.length > indicator.period) {\n            this.calculateATRPoints(indicator, validData);\n        }\n    };\n    /**\n     *  To calculate Average True Range indicator points\n     *\n     * @private\n     */\n    AtrIndicator.prototype.calculateATRPoints = function (indicator, validData) {\n        var average = 0;\n        var highLow = 0;\n        var highClose = 0;\n        var lowClose = 0;\n        var trueRange = 0;\n        var points = [];\n        var temp = [];\n        var period = indicator.period;\n        var sum = 0;\n        var y = 'y';\n        var signalSeries = indicator.targetSeries[0];\n        for (var i = 0; i < validData.length; i++) {\n            /**\n             * Current High less the current Low\n             * Current High less the previous Close (absolute value)\n             * Current Low less the previous Close (absolute value)\n             */\n            highLow = Number(validData[i].high) - Number(validData[i].low);\n            if (i > 0) {\n                //\n                highClose = Math.abs(Number(validData[i].high) - Number(validData[i - 1].close));\n                lowClose = Math.abs(Number(validData[i].low) - Number(validData[i - 1].close));\n            }\n            /**\n             * To find the maximum of highLow, highClose, lowClose\n             */\n            trueRange = Math.max(highLow, highClose, lowClose);\n            sum = sum + trueRange;\n            /**\n             * Push the x and y values for the Average true range indicator\n             */\n            if (i >= period) {\n                average = (Number(temp[i - 1][y]) * (period - 1) + trueRange) / period;\n                points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n            }\n            else {\n                average = sum / period;\n                if (i === period - 1) {\n                    points.push(this.getDataPoint(validData[i].x, average, validData[i], signalSeries, points.length));\n                }\n            }\n            temp[i] = { x: validData[i].x, y: average };\n        }\n        this.setSeriesRange(points, indicator);\n    };\n    /**\n     * To destroy the Average true range indicator.\n     *\n     * @returns {void}\n     * @private\n     */\n    AtrIndicator.prototype.destroy = function () {\n        /**\n         * Destroy the Average true range indicator\n         */\n    };\n    /**\n     * Get module name.\n     */\n    AtrIndicator.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the Indicator\n         */\n        return 'AtrIndicator';\n    };\n    return AtrIndicator;\n}(TechnicalAnalysis));\nexport { AtrIndicator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}