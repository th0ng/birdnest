{"ast":null,"code":"import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\nvar SmithchartLegend = /** @class */function () {\n  function SmithchartLegend() {\n    this.legendSeries = [];\n  }\n  SmithchartLegend.prototype.renderLegend = function (smithchart) {\n    this.calculateLegendBounds(smithchart);\n    this._drawLegend(smithchart);\n    return this.legendActualBounds;\n  };\n  SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n    this.legendSeries = [];\n    var padding = 10;\n    var legend = smithchart.legendSettings;\n    var legendSizeHeight = legend.height;\n    var legendSizeWidth = legend.width;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var position = legend.position.toLowerCase();\n    var font = legend.title.textStyle;\n    var width = 0;\n    var height = 0;\n    var legendItemWidth = 0;\n    var legendItemHeight = 0;\n    var legendHeight = 0;\n    var svgObjectWidth = smithchart.availableSize.width - (smithchart.elementSpacing * 4 - legend.border.width * 2 + smithchart.border.width * 2);\n    var rowCount = legend.rowCount;\n    var columnCount = legend.columnCount;\n    var titleSize = measureText(smithchart.legendSettings['title']['text'], font);\n    var maxRowWidth = 0;\n    var totalRowHeight = 0;\n    var curRowWidth = 0;\n    var curRowHeight = 0;\n    var allowItems;\n    var itemsCountRow = 0;\n    var length = smithchart.series.length;\n    var legendBounds;\n    if (smithchart.legendSettings.visible && length !== 0) {\n      if (position === 'bottom' || position === 'top' || position === 'custom') {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount != null) {\n          rowCount = length / columnCount;\n        } else if (rowCount == null && columnCount == null) {\n          rowCount = 1;\n        }\n        if (rowCount) {\n          allowItems = Math.ceil(length / rowCount);\n        }\n      } else {\n        if (rowCount && columnCount && rowCount <= columnCount) {\n          columnCount = length / rowCount;\n        } else if (rowCount != null && columnCount == null) {\n          columnCount = length / rowCount;\n        } else if (rowCount == null && columnCount == null) {\n          columnCount = 1;\n        }\n        if (columnCount) {\n          allowItems = columnCount;\n        }\n      }\n      for (var i = 0; i < length; i++) {\n        this.legendSeries.push({\n          text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n          seriesIndex: i,\n          shape: smithchart.legendSettings.shape,\n          fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n          bounds: null\n        });\n        var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n        legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n        legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n        this.legendSeries[i]['bounds'] = {\n          width: legendItemWidth,\n          height: legendItemHeight\n        };\n        itemsCountRow = itemsCountRow + 1;\n        curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n        curRowHeight = Math.max(legendItemHeight, curRowHeight);\n        if (position === 'top' || position === 'bottom' || position === 'custom') {\n          if (curRowWidth > svgObjectWidth) {\n            curRowWidth -= legendsize.width + itemPadding;\n            maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n            curRowWidth = legendsize.width + itemPadding;\n            totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          }\n        }\n        if (itemsCountRow === allowItems || i === length - 1) {\n          maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n          totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n          legendHeight = totalRowHeight;\n          itemsCountRow = 0;\n          curRowHeight = 0;\n          curRowWidth = 0;\n        }\n      }\n      width = titleSize.width > maxRowWidth - itemPadding ? titleSize.width + padding * 2 + itemPadding : maxRowWidth + padding * 2 - smithchart.border.width * 2;\n      height = legendHeight + smithchart.elementSpacing;\n      legendBounds = {\n        x: 0,\n        y: 0,\n        width: width,\n        height: height\n      };\n    }\n    this.legendActualBounds = legendBounds;\n    if (legendSizeWidth != null) {\n      this.legendActualBounds.width = legendSizeWidth;\n    }\n    if (legendSizeHeight != null) {\n      this.legendActualBounds.height = legendSizeHeight;\n    }\n  };\n  SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n    var legend = smithchart.legendSettings;\n    var symbolWidth = legend.itemStyle.width;\n    var symbolHeight = legend.itemStyle.height;\n    var textSize = measureText(series.text, legend.textStyle);\n    var width = symbolWidth + textSize.width + legend.shapePadding;\n    var height = Math.max(symbolHeight, textSize.height);\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /* eslint-disable  */\n  SmithchartLegend.prototype._drawLegend = function (smithchart) {\n    var legend = smithchart.legendSettings;\n    var legendPosition = legend.position.toLowerCase();\n    var alignment = legend.alignment;\n    var legendBounds = this.legendActualBounds;\n    var maxWidth = 0;\n    var startX;\n    var startY;\n    var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n    var smithchartTitleHeight = measureText(smithchart.title.text, titleFont).height;\n    var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle).height;\n    var elementSpacing = smithchart.elementSpacing;\n    var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n    var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n    var svgObjectWidth = smithchart.availableSize.width;\n    var svgObjectHeight = smithchart.availableSize.height;\n    var legendBorder = legend.border.width;\n    var legendWidth = 0;\n    var titleSize = measureText(legend['title']['text'], legend.title.textStyle);\n    var legendTitleHeight = titleSize.height;\n    var borderSize = smithchart.border.width;\n    var svgWidth = svgObjectWidth - borderSize * 2;\n    var svgHeight = svgObjectHeight - borderSize * 2;\n    legendBounds.height += legendTitleHeight;\n    if (legendPosition !== 'custom') {\n      switch (legendPosition) {\n        case 'bottom':\n          legendBounds.y = svgHeight - (legendBounds.height + legendBorder + elementSpacing);\n          break;\n        case 'top':\n          legendBounds.y = borderSize + offset;\n          break;\n        case 'right':\n          legendBounds.x = svgWidth - legendBounds.width - elementSpacing * 2;\n          break;\n        case 'left':\n          legendBounds.x = borderSize + elementSpacing * 2;\n          break;\n      }\n      if (legendPosition === 'left' || legendPosition === 'right') {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.y = svgHeight / 2 - (legendBounds.height + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n          case 'Near':\n            legendBounds.y = borderSize + elementSpacing * 2 + offset;\n            break;\n          case 'Far':\n            legendBounds.y = svgHeight - (legendBounds.height + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      } else {\n        switch (alignment) {\n          case 'Center':\n            legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n            break;\n          case 'Near':\n            legendBounds.x = borderSize + elementSpacing * 2;\n            break;\n          case 'Far':\n            legendBounds.x = svgWidth - (legendBounds.width + legendBorder) - elementSpacing * 2;\n            break;\n        }\n      }\n    } else {\n      legendBounds.y = legend.location.y < svgHeight ? legend.location.y : 0;\n      legendBounds.x = legend.location.x < svgWidth ? legend.location.x : 0;\n    }\n    if (legendPosition === 'bottom' || legendPosition === 'top') {\n      for (var i = 0; i < this.legendSeries.length; i++) {\n        legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n        if (legendWidth > svgWidth) {\n          legendBounds.x = svgWidth / 2 - (legendBounds.width + legendBorder * 2) / 2 + elementSpacing / 2;\n          break;\n        }\n      }\n    }\n    var gLegendEle = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_legend_group'\n    });\n    smithchart.svgObject.appendChild(gLegendEle);\n    this.legendItemGroup = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + 'legendItem_Group'\n    });\n    var currentX = startX = elementSpacing;\n    var currentY = startY = elementSpacing;\n    if (legend.title.text !== '' && legend.title.visible) {\n      gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n      currentY = startY = elementSpacing + legendTitleHeight;\n    }\n    for (var k = 0; k < this.legendSeries.length; k++) {\n      if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) && (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n        if (currentX + this.legendSeries[k]['bounds'].width > legendBounds.width + startX) {\n          currentX = elementSpacing;\n          currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        }\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY, legendBounds);\n        gLegendEle.appendChild(this.legendGroup);\n        currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n      } else {\n        if (currentY + this.legendSeries[k]['bounds'].height + itemPadding + legendTitleHeight + borderSize > legendBounds.height + startY) {\n          currentY = startY;\n          currentX += maxWidth + itemPadding;\n        }\n        this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, currentY, legendBounds);\n        gLegendEle.appendChild(this.legendGroup);\n        currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n        maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n      }\n    }\n    gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n    this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n  };\n  SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n    var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n    gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n  };\n  SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n    var elementSpacing = smithchart.elementSpacing;\n    var titleSize = measureText(legend.title.text, legend.title.textStyle);\n    var titleWidth = titleSize.width;\n    var titleHeight = titleSize.height;\n    var textAlignment = legend.title.textAlignment;\n    var startX = 0;\n    var legendBoundsWidth = legendBounds.width;\n    var startY = elementSpacing + titleHeight / 2;\n    switch (textAlignment) {\n      case 'Far':\n        startX = legendBoundsWidth - titleWidth - startX;\n        break;\n      case 'Center':\n        startX = legendBoundsWidth / 2 - titleWidth / 2;\n        break;\n    }\n    if (startX < 0) {\n      startX = 0;\n      legendBoundsWidth = titleWidth;\n    }\n    if (legendBoundsWidth < titleWidth + startX) {\n      legendBoundsWidth = titleWidth + startX;\n    }\n    var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n    var element = renderTextElement(options, legend.title.textStyle, smithchart.themeStyle.legendLabel, gLegendEle);\n    element.setAttribute('aria-label', legend.title.description || legend.title.text);\n    return element;\n  };\n  SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y, legendBounds) {\n    var _this = this;\n    var location;\n    var radius;\n    var symbol = legend.itemStyle;\n    var itemPadding = legend.itemPadding;\n    var textHeight;\n    radius = Math.sqrt(symbol['width'] * symbol['width'] + symbol['height'] * symbol['height']) / 2;\n    textHeight = measureText(legendSeries['text'], legend.textStyle).height;\n    location = {\n      x: x + symbol['width'] / 2,\n      y: y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2\n    };\n    var legendGroup = smithchart.renderer.createGroup({\n      id: smithchart.element.id + '_svg' + '_Legend' + k.toString()\n    });\n    legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n    var legendEventArgs = {\n      text: legendSeries['text'],\n      fill: legendSeries['fill'],\n      shape: legendSeries['shape'],\n      name: legendRender,\n      cancel: false\n    };\n    var legendRenderSuccess = function (args) {\n      if (!args.cancel) {\n        var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n        legendGroup.appendChild(shape);\n        var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n        legend.textStyle.fontFamily = smithchart.themeStyle.fontFamily || legend.textStyle.fontFamily;\n        legend.textStyle.size = smithchart.themeStyle.fontSize || legend.textStyle.size;\n        var element = renderTextElement(options, legend.textStyle, smithchart.themeStyle.legendLabel, legendGroup);\n        legendGroup.setAttribute('aria-label', legend.description || 'Show ' + options.text);\n        legendGroup.appendChild(element);\n        _this.legendItemGroup.appendChild(legendGroup);\n      }\n    };\n    legendRenderSuccess.bind(this);\n    smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n    return this.legendItemGroup;\n  };\n  SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n    var element;\n    var circleOptions;\n    var pathOptions;\n    var path;\n    var symbol = legend.itemStyle;\n    var width = symbol['width'];\n    var height = symbol['height'];\n    var x = locX + -width / 2;\n    var y = locY + -height / 2;\n    var border = {\n      color: symbol.border.color,\n      width: symbol.border.width\n    };\n    var opacity = 1;\n    var fill = smithchart.series[index].visibility === 'visible' ? legendEventArgs.fill : 'grey';\n    var shape = legendEventArgs.shape.toLowerCase();\n    var radius = Math.sqrt(height * height + width * width) / 2;\n    switch (shape) {\n      case 'circle':\n        circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n        element = smithchart.renderer.drawCircle(circleOptions);\n        break;\n      case 'rectangle':\n        path = 'M' + ' ' + x + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + -height / 2) + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n      case 'diamond':\n        path = 'M' + ' ' + x + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (width / 2 + locX) + ' ' + locY + ' ' + 'L' + ' ' + locX + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + locY + ' z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n      case 'pentagon':\n        var eq = 72;\n        for (var j = 0; j <= 5; j++) {\n          var xValue = radius * Math.cos(Math.PI / 180 * (j * eq));\n          var yValue = radius * Math.sin(Math.PI / 180 * (j * eq));\n          if (j === 0) {\n            path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n          } else {\n            path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n          }\n        }\n        path = path.concat('Z');\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n      case 'triangle':\n        path = 'M' + ' ' + x + ' ' + (height / 2 + locY) + ' ' + 'L' + ' ' + locX + ' ' + (locY + -height / 2) + ' ' + 'L' + ' ' + (locX + width / 2) + ' ' + (locY + height / 2) + ' ' + 'L' + ' ' + x + ' ' + (locY + height / 2) + ' Z';\n        pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n        element = smithchart.renderer.drawPath(pathOptions);\n        break;\n    }\n    return element;\n  };\n  /**\n   * Get module name.\n   */\n  SmithchartLegend.prototype.getModuleName = function () {\n    return 'SmithchartLegend';\n  };\n  /**\n   * To destroy the legend.\n   * @return {void}\n   * @private\n   */\n  SmithchartLegend.prototype.destroy = function (smithchart) {\n    /**\n     * Destroy method performed here\n     */\n  };\n  return SmithchartLegend;\n}();\nexport { SmithchartLegend };","map":{"version":3,"names":["measureText","TextOption","renderTextElement","CircleOption","PathOption","RectOption","SmithchartRect","legendRender","SmithchartLegend","legendSeries","prototype","renderLegend","smithchart","calculateLegendBounds","_drawLegend","legendActualBounds","padding","legend","legendSettings","legendSizeHeight","height","legendSizeWidth","width","itemPadding","position","toLowerCase","font","title","textStyle","legendItemWidth","legendItemHeight","legendHeight","svgObjectWidth","availableSize","elementSpacing","border","rowCount","columnCount","titleSize","maxRowWidth","totalRowHeight","curRowWidth","curRowHeight","allowItems","itemsCountRow","length","series","legendBounds","visible","Math","ceil","i","push","text","seriesIndex","shape","fill","seriesColors","bounds","legendsize","_getLegendSize","max","x","y","symbolWidth","itemStyle","symbolHeight","textSize","shapePadding","legendPosition","alignment","maxWidth","startX","startY","titleFont","smithchartTitleHeight","smithchartSubtitleHeight","subtitle","offset","margin","top","svgObjectHeight","legendBorder","legendWidth","legendTitleHeight","borderSize","svgWidth","svgHeight","location","gLegendEle","renderer","createGroup","element","id","svgObject","appendChild","legendItemGroup","currentX","currentY","drawLegendTitle","k","legendGroup","drawLegendItem","setAttribute","toString","drawLegendBorder","borderRect","drawRectangle","titleWidth","titleHeight","textAlignment","legendBoundsWidth","options","themeStyle","legendLabel","description","_this","radius","symbol","textHeight","sqrt","toggleVisibility","legendEventArgs","name","cancel","legendRenderSuccess","args","drawLegendShape","fontFamily","size","fontSize","bind","trigger","locX","locY","index","circleOptions","pathOptions","path","color","opacity","visibility","drawCircle","drawPath","eq","j","xValue","cos","PI","yValue","sin","concat","getModuleName","destroy"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/smithchart/legend/legendrender.js"],"sourcesContent":["import { measureText, TextOption, renderTextElement, CircleOption, PathOption, RectOption } from '../../smithchart/utils/helper';\nimport { SmithchartRect } from '../../smithchart/utils/utils';\nimport { legendRender } from '../model/constant';\nvar SmithchartLegend = /** @class */ (function () {\n    function SmithchartLegend() {\n        this.legendSeries = [];\n    }\n    SmithchartLegend.prototype.renderLegend = function (smithchart) {\n        this.calculateLegendBounds(smithchart);\n        this._drawLegend(smithchart);\n        return this.legendActualBounds;\n    };\n    SmithchartLegend.prototype.calculateLegendBounds = function (smithchart) {\n        this.legendSeries = [];\n        var padding = 10;\n        var legend = smithchart.legendSettings;\n        var legendSizeHeight = legend.height;\n        var legendSizeWidth = legend.width;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var position = legend.position.toLowerCase();\n        var font = legend.title.textStyle;\n        var width = 0;\n        var height = 0;\n        var legendItemWidth = 0;\n        var legendItemHeight = 0;\n        var legendHeight = 0;\n        var svgObjectWidth = smithchart.availableSize.width - ((smithchart.elementSpacing * 4) - (legend.border.width * 2)\n            + (smithchart.border.width * 2));\n        var rowCount = legend.rowCount;\n        var columnCount = legend.columnCount;\n        var titleSize = measureText(smithchart.legendSettings['title']['text'], font);\n        var maxRowWidth = 0;\n        var totalRowHeight = 0;\n        var curRowWidth = 0;\n        var curRowHeight = 0;\n        var allowItems;\n        var itemsCountRow = 0;\n        var length = smithchart.series.length;\n        var legendBounds;\n        if (smithchart.legendSettings.visible && length !== 0) {\n            if (position === 'bottom' || position === 'top' || position === 'custom') {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount != null) {\n                    rowCount = length / columnCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    rowCount = 1;\n                }\n                if (rowCount) {\n                    allowItems = Math.ceil(length / rowCount);\n                }\n            }\n            else {\n                if ((rowCount && columnCount) && (rowCount <= columnCount)) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount != null && columnCount == null) {\n                    columnCount = length / rowCount;\n                }\n                else if (rowCount == null && columnCount == null) {\n                    columnCount = 1;\n                }\n                if (columnCount) {\n                    allowItems = columnCount;\n                }\n            }\n            for (var i = 0; i < length; i++) {\n                this.legendSeries.push({\n                    text: smithchart.series[i]['name'] ? smithchart.series[i]['name'] : 'series' + i,\n                    seriesIndex: i,\n                    shape: smithchart.legendSettings.shape,\n                    fill: smithchart.series[i].fill || smithchart.seriesColors[i % smithchart.seriesColors.length],\n                    bounds: null\n                });\n                var legendsize = this._getLegendSize(smithchart, this.legendSeries[i]);\n                legendItemWidth = Math.max(legendsize['width'], legendItemWidth);\n                legendItemHeight = Math.max(legendsize['height'], legendItemHeight);\n                this.legendSeries[i]['bounds'] = { width: legendItemWidth, height: legendItemHeight };\n                itemsCountRow = itemsCountRow + 1;\n                curRowWidth = curRowWidth + legendItemWidth + itemPadding;\n                curRowHeight = Math.max(legendItemHeight, curRowHeight);\n                if (position === 'top' || position === 'bottom' || position === 'custom') {\n                    if (curRowWidth > svgObjectWidth) {\n                        curRowWidth -= legendsize.width + itemPadding;\n                        maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                        curRowWidth = legendsize.width + itemPadding;\n                        totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    }\n                }\n                if (itemsCountRow === allowItems || i === length - 1) {\n                    maxRowWidth = Math.max(maxRowWidth, curRowWidth);\n                    totalRowHeight = totalRowHeight + curRowHeight + itemPadding;\n                    legendHeight = totalRowHeight;\n                    itemsCountRow = 0;\n                    curRowHeight = 0;\n                    curRowWidth = 0;\n                }\n            }\n            width = (titleSize.width) > maxRowWidth - itemPadding ? (titleSize.width + padding * 2 + itemPadding) :\n                maxRowWidth + padding * 2 - (smithchart.border.width * 2);\n            height = legendHeight + smithchart.elementSpacing;\n            legendBounds = { x: 0, y: 0, width: width, height: height };\n        }\n        this.legendActualBounds = legendBounds;\n        if (legendSizeWidth != null) {\n            this.legendActualBounds.width = legendSizeWidth;\n        }\n        if (legendSizeHeight != null) {\n            this.legendActualBounds.height = legendSizeHeight;\n        }\n    };\n    SmithchartLegend.prototype._getLegendSize = function (smithchart, series) {\n        var legend = smithchart.legendSettings;\n        var symbolWidth = legend.itemStyle.width;\n        var symbolHeight = legend.itemStyle.height;\n        var textSize = measureText(series.text, legend.textStyle);\n        var width = symbolWidth + textSize.width + legend.shapePadding;\n        var height = Math.max(symbolHeight, textSize.height);\n        return { width: width, height: height };\n    };\n    /* eslint-disable  */\n    SmithchartLegend.prototype._drawLegend = function (smithchart) {\n        var legend = smithchart.legendSettings;\n        var legendPosition = legend.position.toLowerCase();\n        var alignment = legend.alignment;\n        var legendBounds = this.legendActualBounds;\n        var maxWidth = 0;\n        var startX;\n        var startY;\n        var titleFont = smithchart.title.font ? smithchart.title.font : smithchart.title.textStyle;\n        var smithchartTitleHeight = measureText(smithchart.title.text, titleFont).height;\n        var smithchartSubtitleHeight = measureText(smithchart.title.subtitle.text, smithchart.title.subtitle.textStyle).height;\n        var elementSpacing = smithchart.elementSpacing;\n        var offset = smithchartTitleHeight + smithchartSubtitleHeight + elementSpacing + smithchart.margin.top;\n        var itemPadding = legend.itemPadding > 0 ? legend.itemPadding : 0;\n        var svgObjectWidth = smithchart.availableSize.width;\n        var svgObjectHeight = smithchart.availableSize.height;\n        var legendBorder = legend.border.width;\n        var legendWidth = 0;\n        var titleSize = measureText(legend['title']['text'], legend.title.textStyle);\n        var legendTitleHeight = titleSize.height;\n        var borderSize = smithchart.border.width;\n        var svgWidth = svgObjectWidth - ((borderSize * 2));\n        var svgHeight = svgObjectHeight - ((borderSize * 2));\n        legendBounds.height += legendTitleHeight;\n        if (legendPosition !== 'custom') {\n            switch (legendPosition) {\n                case 'bottom':\n                    legendBounds.y = svgHeight - (legendBounds.height + (legendBorder) + elementSpacing);\n                    break;\n                case 'top':\n                    legendBounds.y = borderSize + offset;\n                    break;\n                case 'right':\n                    legendBounds.x = svgWidth - legendBounds.width - (elementSpacing * 2);\n                    break;\n                case 'left':\n                    legendBounds.x = borderSize + (elementSpacing * 2);\n                    break;\n            }\n            if (legendPosition === 'left' || legendPosition === 'right') {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.y = (svgHeight / 2) - ((legendBounds.height + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.y = borderSize + (elementSpacing * 2) + offset;\n                        break;\n                    case 'Far':\n                        legendBounds.y = svgHeight - (legendBounds.height + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n            else {\n                switch (alignment) {\n                    case 'Center':\n                        legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                        break;\n                    case 'Near':\n                        legendBounds.x = borderSize + (elementSpacing * 2);\n                        break;\n                    case 'Far':\n                        legendBounds.x = svgWidth - (legendBounds.width + (legendBorder)) - (elementSpacing * 2);\n                        break;\n                }\n            }\n        }\n        else {\n            legendBounds.y = (legend.location.y < svgHeight) ? legend.location.y : 0;\n            legendBounds.x = (legend.location.x < svgWidth) ? legend.location.x : 0;\n        }\n        if (legendPosition === 'bottom' || legendPosition === 'top') {\n            for (var i = 0; i < this.legendSeries.length; i++) {\n                legendWidth += this.legendSeries[i].bounds.width + itemPadding;\n                if (legendWidth > svgWidth) {\n                    legendBounds.x = (svgWidth / 2) - ((legendBounds.width + legendBorder * 2) / 2) + (elementSpacing / 2);\n                    break;\n                }\n            }\n        }\n        var gLegendEle = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_legend_group' });\n        smithchart.svgObject.appendChild(gLegendEle);\n        this.legendItemGroup = smithchart.renderer.createGroup({ 'id': smithchart.element.id + 'legendItem_Group' });\n        var currentX = startX = elementSpacing;\n        var currentY = startY = elementSpacing;\n        if (legend.title.text !== '' && legend.title.visible) {\n            gLegendEle.appendChild(this.drawLegendTitle(smithchart, legend, legendBounds, gLegendEle));\n            currentY = startY = elementSpacing + legendTitleHeight;\n        }\n        for (var k = 0; k < this.legendSeries.length; k++) {\n            if ((legend.rowCount < legend.columnCount || legend.rowCount === legend.columnCount) &&\n                (legendPosition === 'top' || legendPosition === 'bottom' || legendPosition === 'custom')) {\n                if ((currentX + this.legendSeries[k]['bounds'].width) > legendBounds.width + startX) {\n                    currentX = elementSpacing;\n                    currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, currentX, (currentY), legendBounds);\n                gLegendEle.appendChild(this.legendGroup);\n                currentX += this.legendSeries[k]['bounds'].width + itemPadding;\n            }\n            else {\n                if (((currentY + this.legendSeries[k]['bounds'].height + itemPadding) +\n                    legendTitleHeight + borderSize > legendBounds.height + startY)) {\n                    currentY = startY;\n                    currentX += maxWidth + (itemPadding);\n                }\n                this.legendGroup = this.drawLegendItem(smithchart, legend, this.legendSeries[k], k, (currentX), (currentY), legendBounds);\n                gLegendEle.appendChild(this.legendGroup);\n                currentY += this.legendSeries[k]['bounds'].height + itemPadding;\n                maxWidth = Math.max(maxWidth, this.legendSeries[k]['bounds'].width);\n            }\n        }\n        gLegendEle.setAttribute('transform', 'translate(' + legendBounds.x.toString() + ',' + legendBounds.y.toString() + ')');\n        this.drawLegendBorder(gLegendEle, smithchart, legend, legendBounds);\n    };\n    SmithchartLegend.prototype.drawLegendBorder = function (gLegendEle, smithchart, legend, legendBounds) {\n        var borderRect = new RectOption(smithchart.element.id + '_svg' + '_legendRect', 'none', legend.border, 1, new SmithchartRect(0, 0, legendBounds.width, legendBounds.height));\n        gLegendEle.appendChild(smithchart.renderer.drawRectangle(borderRect));\n    };\n    SmithchartLegend.prototype.drawLegendTitle = function (smithchart, legend, legendBounds, gLegendEle) {\n        var elementSpacing = smithchart.elementSpacing;\n        var titleSize = measureText(legend.title.text, legend.title.textStyle);\n        var titleWidth = titleSize.width;\n        var titleHeight = titleSize.height;\n        var textAlignment = legend.title.textAlignment;\n        var startX = 0;\n        var legendBoundsWidth = legendBounds.width;\n        var startY = elementSpacing + (titleHeight / 2);\n        switch (textAlignment) {\n            case 'Far':\n                startX = legendBoundsWidth - titleWidth - startX;\n                break;\n            case 'Center':\n                startX = legendBoundsWidth / 2 - (titleWidth) / 2;\n                break;\n        }\n        if (startX < 0) {\n            startX = 0;\n            legendBoundsWidth = titleWidth;\n        }\n        if (legendBoundsWidth < titleWidth + startX) {\n            legendBoundsWidth = titleWidth + startX;\n        }\n        var options = new TextOption(smithchart.element.id + '_LegendTitleText', startX, startY, 'start', legend.title.text);\n        var element = renderTextElement(options, legend.title.textStyle, smithchart.themeStyle.legendLabel, gLegendEle);\n        element.setAttribute('aria-label', legend.title.description || legend.title.text);\n        return element;\n    };\n    SmithchartLegend.prototype.drawLegendItem = function (smithchart, legend, legendSeries, k, x, y, legendBounds) {\n        var _this = this;\n        var location;\n        var radius;\n        var symbol = legend.itemStyle;\n        var itemPadding = legend.itemPadding;\n        var textHeight;\n        radius = Math.sqrt(symbol['width'] * symbol['width'] + symbol['height'] * symbol['height']) / 2;\n        textHeight = measureText(legendSeries['text'], legend.textStyle).height;\n        location = {\n            x: x + symbol['width'] / 2,\n            y: (y + (textHeight > symbol['height'] ? textHeight : symbol['height']) / 2)\n        };\n        var legendGroup = smithchart.renderer.createGroup({ id: smithchart.element.id + '_svg' + '_Legend' + k.toString() });\n        legendGroup['style']['cursor'] = legend.toggleVisibility ? 'pointer' : 'default';\n        var legendEventArgs = {\n            text: legendSeries['text'],\n            fill: legendSeries['fill'],\n            shape: legendSeries['shape'],\n            name: legendRender,\n            cancel: false\n        };\n        var legendRenderSuccess = function (args) {\n            if (!args.cancel) {\n                var shape = _this.drawLegendShape(smithchart, legendSeries, location.x, location.y, k, legend, args);\n                legendGroup.appendChild(shape);\n                var options = new TextOption(smithchart.element.id + '_LegendItemText' + k.toString(), location.x + symbol['width'] / 2 + legend.shapePadding, location.y + textHeight / 4, 'start', args.text);\n                legend.textStyle.fontFamily = smithchart.themeStyle.fontFamily || legend.textStyle.fontFamily;\n                legend.textStyle.size = smithchart.themeStyle.fontSize || legend.textStyle.size;\n                var element = renderTextElement(options, legend.textStyle, smithchart.themeStyle.legendLabel, legendGroup);\n                legendGroup.setAttribute('aria-label', legend.description || ('Show ' + options.text));\n                legendGroup.appendChild(element);\n                _this.legendItemGroup.appendChild(legendGroup);\n            }\n        };\n        legendRenderSuccess.bind(this);\n        smithchart.trigger(legendRender, legendEventArgs, legendRenderSuccess);\n        return this.legendItemGroup;\n    };\n    SmithchartLegend.prototype.drawLegendShape = function (smithchart, legendSeries, locX, locY, index, legend, legendEventArgs) {\n        var element;\n        var circleOptions;\n        var pathOptions;\n        var path;\n        var symbol = legend.itemStyle;\n        var width = symbol['width'];\n        var height = symbol['height'];\n        var x = locX + (-width / 2);\n        var y = locY + (-height / 2);\n        var border = { color: symbol.border.color, width: symbol.border.width };\n        var opacity = 1;\n        var fill = (smithchart.series[index].visibility === 'visible') ? legendEventArgs.fill : 'grey';\n        var shape = legendEventArgs.shape.toLowerCase();\n        var radius = Math.sqrt(height * height + width * width) / 2;\n        switch (shape) {\n            case 'circle':\n                circleOptions = new CircleOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border, opacity, locX, locY, radius, null);\n                element = smithchart.renderer.drawCircle(circleOptions);\n                break;\n            case 'rectangle':\n                path = 'M' + ' ' + x + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (-height / 2)) + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'diamond':\n                path = 'M' + ' ' + x + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + ((width / 2) + locX) + ' ' + locY + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + locY + ' z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'pentagon':\n                var eq = 72;\n                for (var j = 0; j <= 5; j++) {\n                    var xValue = radius * Math.cos((Math.PI / 180) * (j * eq));\n                    var yValue = radius * Math.sin((Math.PI / 180) * (j * eq));\n                    if (j === 0) {\n                        path = 'M' + ' ' + (xValue + locX) + ' ' + (locY + yValue) + ' ';\n                    }\n                    else {\n                        path = path.concat('L' + ' ' + (locX + xValue) + ' ' + (locY + yValue) + ' ');\n                    }\n                }\n                path = path.concat('Z');\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n            case 'triangle':\n                path = 'M' + ' ' + x + ' ' + ((height / 2) + locY) + ' ' +\n                    'L' + ' ' + locX + ' ' + (locY + (-height / 2)) + ' ' +\n                    'L' + ' ' + (locX + (width / 2)) + ' ' + (locY + (height / 2)) + ' ' +\n                    'L' + ' ' + x + ' ' + (locY + (height / 2)) + ' Z';\n                pathOptions = new PathOption(smithchart.element.id + '_svg' + '_LegendItemShape' + index.toString(), fill, border.width, border.color, 1, '', path);\n                element = smithchart.renderer.drawPath(pathOptions);\n                break;\n        }\n        return element;\n    };\n    /**\n     * Get module name.\n     */\n    SmithchartLegend.prototype.getModuleName = function () {\n        return 'SmithchartLegend';\n    };\n    /**\n     * To destroy the legend.\n     * @return {void}\n     * @private\n     */\n    SmithchartLegend.prototype.destroy = function (smithchart) {\n        /**\n         * Destroy method performed here\n         */\n    };\n    return SmithchartLegend;\n}());\nexport { SmithchartLegend };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}