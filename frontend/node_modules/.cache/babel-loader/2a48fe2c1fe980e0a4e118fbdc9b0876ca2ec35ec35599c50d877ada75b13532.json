{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineSeries` module is used to render the spline series.\n */\nvar SplineSeries = /** @class */function (_super) {\n  __extends(SplineSeries, _super);\n  function SplineSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render the spline series.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var firstPoint = null;\n    var direction = '';\n    var startPoint = 'M';\n    var points = [];\n    var tempPoints = series.category === 'TrendLine' ? series.points : this.enableComplexProperty(series);\n    points = this.filterEmptyPoints(series, tempPoints);\n    var previous;\n    var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n    for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n      var point = points_1[_i];\n      previous = this.getPreviousIndex(points, point.index - 1, series);\n      point.symbolLocations = [];\n      point.regions = [];\n      if (point.visible) {\n        if (withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n          if (firstPoint !== null) {\n            direction = this.getSplineDirection(series.drawPoints[previous], firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n            startPoint = 'L';\n          }\n          this.storePointLocation(point, series, isInverted, getCoordinate);\n        }\n        firstPoint = point;\n      } else {\n        startPoint = 'M';\n        firstPoint = null;\n        point.symbolLocations = [];\n      }\n    }\n    if (points.length > 0 && series.drawPoints.length > 0 && series.chart.chartAreaType === 'PolarRadar' && series.isClosed) {\n      var connectPoints = this.getFirstLastVisiblePoint(points);\n      direction = this.getSplineDirection(series.drawPoints[series.drawPoints.length - 1], connectPoints.last, {\n        xValue: connectPoints.first.xValue,\n        yValue: connectPoints.first.yValue\n      }, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n      startPoint = 'L';\n    }\n    var name = series.category === 'TrendLine' ? series.chart.element.id + '_Series_' + series.sourceIndex + '_TrendLine_' + series.index : series.chart.element.id + '_Series_' + series.index;\n    var options = new PathOption(name, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);\n    this.appendLinePath(options, series, '');\n    this.renderMarker(series);\n  };\n  /**\n   * To find the direct of spline using points.\n   *\n   * @param {ControlPoints} data data\n   * @param {Points} firstPoint firstPoint\n   * @param {Points} point point\n   * @param {Axis} xAxis xAxis\n   * @param {Axis} yAxis yAxis\n   * @param {boolean} isInverted isInverted\n   * @param {Series} series series\n   * @param {string} startPoint startPoint\n   * @param {Function} getCoordinate getCoordinate\n   * @param {string} direction direction\n   */\n  SplineSeries.prototype.getSplineDirection = function (data, firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction) {\n    var controlPoint1 = data.controlPoint1;\n    var controlPoint2 = data.controlPoint2;\n    var pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n    var pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n    var bpt1 = getCoordinate(controlPoint1.x, controlPoint1.y, xAxis, yAxis, isInverted, series);\n    var bpt2 = getCoordinate(controlPoint2.x, controlPoint2.y, xAxis, yAxis, isInverted, series);\n    return direction.concat(startPoint + ' ' + pt1.x + ' ' + pt1.y + ' ' + 'C' + ' ' + bpt1.x + ' ' + bpt1.y + ' ' + bpt2.x + ' ' + bpt2.y + ' ' + pt2.x + ' ' + pt2.y + ' ');\n  };\n  /**\n   * Get module name.\n   */\n  SplineSeries.prototype.getModuleName = function () {\n    /**\n     * Returns the module name of the series\n     */\n    return 'SplineSeries';\n  };\n  /**\n   * To destroy the spline.\n   *\n   * @returns {void}\n   * @private\n   */\n  SplineSeries.prototype.destroy = function () {\n    /**\n     * Destroy method calling here\n     */\n  };\n  return SplineSeries;\n}(SplineBase);\nexport { SplineSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","getPoint","withInRange","TransformToVisible","PathOption","SplineBase","SplineSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","firstPoint","direction","startPoint","points","tempPoints","category","enableComplexProperty","filterEmptyPoints","previous","getCoordinate","chart","chartAreaType","_i","points_1","length","point","getPreviousIndex","index","symbolLocations","regions","visible","getNextIndex","getSplineDirection","drawPoints","storePointLocation","isClosed","connectPoints","getFirstLastVisiblePoint","last","xValue","first","yValue","name","element","id","sourceIndex","options","width","interior","opacity","dashArray","appendLinePath","renderMarker","data","controlPoint1","controlPoint2","pt1","pt2","bpt1","x","y","bpt2","concat","getModuleName","destroy"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/series/spline-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { getPoint, withInRange, TransformToVisible } from '../../common/utils/helper';\nimport { PathOption } from '@syncfusion/ej2-svg-base';\nimport { SplineBase } from './spline-base';\n/**\n * `SplineSeries` module is used to render the spline series.\n */\nvar SplineSeries = /** @class */ (function (_super) {\n    __extends(SplineSeries, _super);\n    function SplineSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render the spline series.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        var firstPoint = null;\n        var direction = '';\n        var startPoint = 'M';\n        var points = [];\n        var tempPoints = series.category === 'TrendLine' ? series.points : this.enableComplexProperty(series);\n        points = this.filterEmptyPoints(series, tempPoints);\n        var previous;\n        var getCoordinate = series.chart.chartAreaType === 'PolarRadar' ? TransformToVisible : getPoint;\n        for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n            var point = points_1[_i];\n            previous = this.getPreviousIndex(points, point.index - 1, series);\n            point.symbolLocations = [];\n            point.regions = [];\n            if (point.visible) {\n                if (withInRange(points[previous], point, points[this.getNextIndex(points, point.index - 1, series)], series)) {\n                    if (firstPoint !== null) {\n                        direction = this.getSplineDirection(series.drawPoints[previous], firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n                        startPoint = 'L';\n                    }\n                    this.storePointLocation(point, series, isInverted, getCoordinate);\n                }\n                firstPoint = point;\n            }\n            else {\n                startPoint = 'M';\n                firstPoint = null;\n                point.symbolLocations = [];\n            }\n        }\n        if ((points.length > 0 && series.drawPoints.length > 0) && series.chart.chartAreaType === 'PolarRadar' && series.isClosed) {\n            var connectPoints = this.getFirstLastVisiblePoint(points);\n            direction = this.getSplineDirection(series.drawPoints[series.drawPoints.length - 1], connectPoints.last, { xValue: connectPoints.first.xValue, yValue: connectPoints.first.yValue }, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction);\n            startPoint = 'L';\n        }\n        var name = series.category === 'TrendLine' ? series.chart.element.id + '_Series_' + series.sourceIndex + '_TrendLine_' + series.index :\n            series.chart.element.id + '_Series_' + series.index;\n        var options = new PathOption(name, 'transparent', series.width, series.interior, series.opacity, series.dashArray, direction);\n        this.appendLinePath(options, series, '');\n        this.renderMarker(series);\n    };\n    /**\n     * To find the direct of spline using points.\n     *\n     * @param {ControlPoints} data data\n     * @param {Points} firstPoint firstPoint\n     * @param {Points} point point\n     * @param {Axis} xAxis xAxis\n     * @param {Axis} yAxis yAxis\n     * @param {boolean} isInverted isInverted\n     * @param {Series} series series\n     * @param {string} startPoint startPoint\n     * @param {Function} getCoordinate getCoordinate\n     * @param {string} direction direction\n     */\n    SplineSeries.prototype.getSplineDirection = function (data, firstPoint, point, xAxis, yAxis, isInverted, series, startPoint, getCoordinate, direction) {\n        var controlPoint1 = data.controlPoint1;\n        var controlPoint2 = data.controlPoint2;\n        var pt1 = getCoordinate(firstPoint.xValue, firstPoint.yValue, xAxis, yAxis, isInverted, series);\n        var pt2 = getCoordinate(point.xValue, point.yValue, xAxis, yAxis, isInverted, series);\n        var bpt1 = getCoordinate(controlPoint1.x, controlPoint1.y, xAxis, yAxis, isInverted, series);\n        var bpt2 = getCoordinate(controlPoint2.x, controlPoint2.y, xAxis, yAxis, isInverted, series);\n        return direction.concat((startPoint + ' ' + (pt1.x) + ' ' + (pt1.y) + ' ' + 'C' + ' ' + (bpt1.x) + ' '\n            + (bpt1.y) + ' ' + (bpt2.x) + ' ' + (bpt2.y) + ' ' + (pt2.x) + ' ' + (pt2.y) + ' '));\n    };\n    /**\n     * Get module name.\n     */\n    SplineSeries.prototype.getModuleName = function () {\n        /**\n         * Returns the module name of the series\n         */\n        return 'SplineSeries';\n    };\n    /**\n     * To destroy the spline.\n     *\n     * @returns {void}\n     * @private\n     */\n    SplineSeries.prototype.destroy = function () {\n        /**\n         * Destroy method calling here\n         */\n    };\n    return SplineSeries;\n}(SplineBase));\nexport { SplineSeries };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ;AACA;AACA;AACA;AACA;AACA,SAASI,QAAQ,EAAEC,WAAW,EAAEC,kBAAkB,QAAQ,2BAA2B;AACrF,SAASC,UAAU,QAAQ,0BAA0B;AACrD,SAASC,UAAU,QAAQ,eAAe;AAC1C;AACA;AACA;AACA,IAAIC,YAAY,GAAG,aAAe,UAAUC,MAAM,EAAE;EAChDpB,SAAS,CAACmB,YAAY,EAAEC,MAAM,CAAC;EAC/B,SAASD,YAAY,GAAG;IACpB,OAAOC,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;EACnE;EACA;AACJ;AACA;AACA;AACA;AACA;EACIH,YAAY,CAACP,SAAS,CAACW,MAAM,GAAG,UAAUC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAE;IACxE,IAAIC,UAAU,GAAG,IAAI;IACrB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIC,UAAU,GAAG,GAAG;IACpB,IAAIC,MAAM,GAAG,EAAE;IACf,IAAIC,UAAU,GAAGR,MAAM,CAACS,QAAQ,KAAK,WAAW,GAAGT,MAAM,CAACO,MAAM,GAAG,IAAI,CAACG,qBAAqB,CAACV,MAAM,CAAC;IACrGO,MAAM,GAAG,IAAI,CAACI,iBAAiB,CAACX,MAAM,EAAEQ,UAAU,CAAC;IACnD,IAAII,QAAQ;IACZ,IAAIC,aAAa,GAAGb,MAAM,CAACc,KAAK,CAACC,aAAa,KAAK,YAAY,GAAGvB,kBAAkB,GAAGF,QAAQ;IAC/F,KAAK,IAAI0B,EAAE,GAAG,CAAC,EAAEC,QAAQ,GAAGV,MAAM,EAAES,EAAE,GAAGC,QAAQ,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC5D,IAAIG,KAAK,GAAGF,QAAQ,CAACD,EAAE,CAAC;MACxBJ,QAAQ,GAAG,IAAI,CAACQ,gBAAgB,CAACb,MAAM,EAAEY,KAAK,CAACE,KAAK,GAAG,CAAC,EAAErB,MAAM,CAAC;MACjEmB,KAAK,CAACG,eAAe,GAAG,EAAE;MAC1BH,KAAK,CAACI,OAAO,GAAG,EAAE;MAClB,IAAIJ,KAAK,CAACK,OAAO,EAAE;QACf,IAAIjC,WAAW,CAACgB,MAAM,CAACK,QAAQ,CAAC,EAAEO,KAAK,EAAEZ,MAAM,CAAC,IAAI,CAACkB,YAAY,CAAClB,MAAM,EAAEY,KAAK,CAACE,KAAK,GAAG,CAAC,EAAErB,MAAM,CAAC,CAAC,EAAEA,MAAM,CAAC,EAAE;UAC1G,IAAII,UAAU,KAAK,IAAI,EAAE;YACrBC,SAAS,GAAG,IAAI,CAACqB,kBAAkB,CAAC1B,MAAM,CAAC2B,UAAU,CAACf,QAAQ,CAAC,EAAER,UAAU,EAAEe,KAAK,EAAElB,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,EAAEM,UAAU,EAAEO,aAAa,EAAER,SAAS,CAAC;YAC3JC,UAAU,GAAG,GAAG;UACpB;UACA,IAAI,CAACsB,kBAAkB,CAACT,KAAK,EAAEnB,MAAM,EAAEG,UAAU,EAAEU,aAAa,CAAC;QACrE;QACAT,UAAU,GAAGe,KAAK;MACtB,CAAC,MACI;QACDb,UAAU,GAAG,GAAG;QAChBF,UAAU,GAAG,IAAI;QACjBe,KAAK,CAACG,eAAe,GAAG,EAAE;MAC9B;IACJ;IACA,IAAKf,MAAM,CAACW,MAAM,GAAG,CAAC,IAAIlB,MAAM,CAAC2B,UAAU,CAACT,MAAM,GAAG,CAAC,IAAKlB,MAAM,CAACc,KAAK,CAACC,aAAa,KAAK,YAAY,IAAIf,MAAM,CAAC6B,QAAQ,EAAE;MACvH,IAAIC,aAAa,GAAG,IAAI,CAACC,wBAAwB,CAACxB,MAAM,CAAC;MACzDF,SAAS,GAAG,IAAI,CAACqB,kBAAkB,CAAC1B,MAAM,CAAC2B,UAAU,CAAC3B,MAAM,CAAC2B,UAAU,CAACT,MAAM,GAAG,CAAC,CAAC,EAAEY,aAAa,CAACE,IAAI,EAAE;QAAEC,MAAM,EAAEH,aAAa,CAACI,KAAK,CAACD,MAAM;QAAEE,MAAM,EAAEL,aAAa,CAACI,KAAK,CAACC;MAAO,CAAC,EAAElC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,EAAEM,UAAU,EAAEO,aAAa,EAAER,SAAS,CAAC;MAC5PC,UAAU,GAAG,GAAG;IACpB;IACA,IAAI8B,IAAI,GAAGpC,MAAM,CAACS,QAAQ,KAAK,WAAW,GAAGT,MAAM,CAACc,KAAK,CAACuB,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGtC,MAAM,CAACuC,WAAW,GAAG,aAAa,GAAGvC,MAAM,CAACqB,KAAK,GACjIrB,MAAM,CAACc,KAAK,CAACuB,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGtC,MAAM,CAACqB,KAAK;IACvD,IAAImB,OAAO,GAAG,IAAI/C,UAAU,CAAC2C,IAAI,EAAE,aAAa,EAAEpC,MAAM,CAACyC,KAAK,EAAEzC,MAAM,CAAC0C,QAAQ,EAAE1C,MAAM,CAAC2C,OAAO,EAAE3C,MAAM,CAAC4C,SAAS,EAAEvC,SAAS,CAAC;IAC7H,IAAI,CAACwC,cAAc,CAACL,OAAO,EAAExC,MAAM,EAAE,EAAE,CAAC;IACxC,IAAI,CAAC8C,YAAY,CAAC9C,MAAM,CAAC;EAC7B,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIL,YAAY,CAACP,SAAS,CAACsC,kBAAkB,GAAG,UAAUqB,IAAI,EAAE3C,UAAU,EAAEe,KAAK,EAAElB,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,EAAEM,UAAU,EAAEO,aAAa,EAAER,SAAS,EAAE;IACnJ,IAAI2C,aAAa,GAAGD,IAAI,CAACC,aAAa;IACtC,IAAIC,aAAa,GAAGF,IAAI,CAACE,aAAa;IACtC,IAAIC,GAAG,GAAGrC,aAAa,CAACT,UAAU,CAAC6B,MAAM,EAAE7B,UAAU,CAAC+B,MAAM,EAAElC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,CAAC;IAC/F,IAAImD,GAAG,GAAGtC,aAAa,CAACM,KAAK,CAACc,MAAM,EAAEd,KAAK,CAACgB,MAAM,EAAElC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,CAAC;IACrF,IAAIoD,IAAI,GAAGvC,aAAa,CAACmC,aAAa,CAACK,CAAC,EAAEL,aAAa,CAACM,CAAC,EAAErD,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,CAAC;IAC5F,IAAIuD,IAAI,GAAG1C,aAAa,CAACoC,aAAa,CAACI,CAAC,EAAEJ,aAAa,CAACK,CAAC,EAAErD,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAEH,MAAM,CAAC;IAC5F,OAAOK,SAAS,CAACmD,MAAM,CAAElD,UAAU,GAAG,GAAG,GAAI4C,GAAG,CAACG,CAAE,GAAG,GAAG,GAAIH,GAAG,CAACI,CAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAIF,IAAI,CAACC,CAAE,GAAG,GAAG,GAC/FD,IAAI,CAACE,CAAE,GAAG,GAAG,GAAIC,IAAI,CAACF,CAAE,GAAG,GAAG,GAAIE,IAAI,CAACD,CAAE,GAAG,GAAG,GAAIH,GAAG,CAACE,CAAE,GAAG,GAAG,GAAIF,GAAG,CAACG,CAAE,GAAG,GAAG,CAAE;EAC5F,CAAC;EACD;AACJ;AACA;EACI3D,YAAY,CAACP,SAAS,CAACqE,aAAa,GAAG,YAAY;IAC/C;AACR;AACA;IACQ,OAAO,cAAc;EACzB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI9D,YAAY,CAACP,SAAS,CAACsE,OAAO,GAAG,YAAY;IACzC;AACR;AACA;EAFQ,CAGH;EACD,OAAO/D,YAAY;AACvB,CAAC,CAACD,UAAU,CAAE;AACd,SAASC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}