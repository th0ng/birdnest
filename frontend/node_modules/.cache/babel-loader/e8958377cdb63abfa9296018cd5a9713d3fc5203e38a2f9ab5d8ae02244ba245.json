{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\nimport { print as smithchartPrint, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { smithchartBeforePrint } from '../utils/enum';\nimport { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';\n/**\n * Annotation Module handles the Annotation for Maps\n */\nvar ExportUtils = /** @class */function () {\n  /**\n   * Constructor for Maps\n   *\n   * @param {Smithchart} control smithchart instance\n   */\n  function ExportUtils(control) {\n    this.control = control;\n  }\n  /**\n   * To print the Maps\n   *\n   * @param {string} elements html element\n   * @returns {void}\n   */\n  ExportUtils.prototype.print = function (elements) {\n    this.smithchartPrint = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n    this.smithchartPrint.moveTo(0, 0);\n    this.smithchartPrint.resizeTo(screen.availWidth, screen.availHeight);\n    var argsData = {\n      cancel: false,\n      htmlContent: this.getHTMLContent(elements),\n      name: smithchartBeforePrint\n    };\n    this.control.trigger(smithchartBeforePrint, argsData);\n    if (!argsData.cancel) {\n      smithchartPrint(argsData.htmlContent, this.smithchartPrint);\n    }\n  };\n  /**\n   * To get the html string of the Maps\n   *\n   * @param {string} svgElements svg element\n   * @private\n   * @returns {Element} content of the html element\n   */\n  ExportUtils.prototype.getHTMLContent = function (svgElements) {\n    var div = createElement('div');\n    if (svgElements) {\n      if (svgElements instanceof Array) {\n        svgElements.forEach(function (value) {\n          div.appendChild(getElement(value).cloneNode(true));\n        });\n      } else if (svgElements instanceof Element) {\n        div.appendChild(svgElements.cloneNode(true));\n      } else {\n        div.appendChild(getElement(svgElements).cloneNode(true));\n      }\n    } else {\n      div.appendChild(this.control.element.cloneNode(true));\n    }\n    return div;\n  };\n  /**\n   * To export the file as image/svg format\n   *\n   * @param {SmithchartExportType} exportType export type\n   * @param {string} fileName export file name\n   * @param {PdfPageOrientation} orientation orientation of the page\n   * @returns {void}\n   */\n  ExportUtils.prototype.export = function (exportType, fileName, orientation) {\n    var _this = this;\n    var canvas = createElement('canvas', {\n      id: 'ej2-canvas',\n      attrs: {\n        'width': this.control.availableSize.width.toString(),\n        'height': this.control.availableSize.height.toString()\n      }\n    });\n    var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\n    orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;\n    var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' + this.control.svgObject.outerHTML + '</svg>';\n    var url = window.URL.createObjectURL(new Blob(exportType === 'SVG' ? [svgData] : [new XMLSerializer().serializeToString(this.control.svgObject)], {\n      type: 'image/svg+xml'\n    }));\n    if (exportType === 'SVG') {\n      this.triggerDownload(fileName, exportType, url, isDownload);\n    } else {\n      var image_1 = new Image();\n      var ctx_1 = canvas.getContext('2d');\n      image_1.onload = function () {\n        ctx_1.drawImage(image_1, 0, 0);\n        window.URL.revokeObjectURL(url);\n        if (exportType === 'PDF') {\n          var document_1 = new PdfDocument();\n          var imageString = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\n          document_1.pageSettings.orientation = orientation;\n          imageString = imageString.slice(imageString.indexOf(',') + 1);\n          document_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, _this.control.availableSize.width - 60, _this.control.availableSize.height);\n          if (isDownload) {\n            document_1.save(fileName + '.pdf');\n            document_1.destroy();\n          }\n        } else {\n          _this.triggerDownload(fileName, exportType, canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\n        }\n      };\n      image_1.src = url;\n    }\n  };\n  /**\n   * To trigger the download element\n   *\n   * @param {string} fileName export file name\n   * @param {SmithchartExportType} exportType export type\n   * @param {string} url file url\n   * @param {boolean} isDownload download\n   */\n  ExportUtils.prototype.triggerDownload = function (fileName, exportType, url, isDownload) {\n    createElement('a', {\n      attrs: {\n        'download': fileName + '.' + exportType.toLocaleLowerCase(),\n        'href': url\n      }\n    }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\n      view: window,\n      bubbles: false,\n      cancelable: true\n    }));\n  };\n  return ExportUtils;\n}();\nexport { ExportUtils };","map":{"version":3,"names":["print","smithchartPrint","createElement","isNullOrUndefined","Browser","getElement","smithchartBeforePrint","PdfPageOrientation","PdfDocument","PdfBitmap","ExportUtils","control","prototype","elements","window","open","outerHeight","outerWidth","moveTo","resizeTo","screen","availWidth","availHeight","argsData","cancel","htmlContent","getHTMLContent","name","trigger","svgElements","div","Array","forEach","value","appendChild","cloneNode","Element","element","export","exportType","fileName","orientation","_this","canvas","id","attrs","availableSize","width","toString","height","isDownload","userAgent","indexOf","Landscape","svgData","svgObject","outerHTML","url","URL","createObjectURL","Blob","XMLSerializer","serializeToString","type","triggerDownload","image_1","Image","ctx_1","getContext","onload","drawImage","revokeObjectURL","document_1","imageString","toDataURL","replace","pageSettings","slice","pages","add","graphics","save","destroy","src","toLocaleLowerCase","dispatchEvent","MouseEvent","view","bubbles","cancelable"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/smithchart/utils/export.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\nimport { print as smithchartPrint, createElement, isNullOrUndefined, Browser } from '@syncfusion/ej2-base';\nimport { getElement } from '../utils/helper';\nimport { smithchartBeforePrint } from '../utils/enum';\nimport { PdfPageOrientation, PdfDocument, PdfBitmap } from '@syncfusion/ej2-pdf-export';\n/**\n * Annotation Module handles the Annotation for Maps\n */\nvar ExportUtils = /** @class */ (function () {\n    /**\n     * Constructor for Maps\n     *\n     * @param {Smithchart} control smithchart instance\n     */\n    function ExportUtils(control) {\n        this.control = control;\n    }\n    /**\n     * To print the Maps\n     *\n     * @param {string} elements html element\n     * @returns {void}\n     */\n    ExportUtils.prototype.print = function (elements) {\n        this.smithchartPrint = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');\n        this.smithchartPrint.moveTo(0, 0);\n        this.smithchartPrint.resizeTo(screen.availWidth, screen.availHeight);\n        var argsData = {\n            cancel: false,\n            htmlContent: this.getHTMLContent(elements),\n            name: smithchartBeforePrint\n        };\n        this.control.trigger(smithchartBeforePrint, argsData);\n        if (!argsData.cancel) {\n            smithchartPrint(argsData.htmlContent, this.smithchartPrint);\n        }\n    };\n    /**\n     * To get the html string of the Maps\n     *\n     * @param {string} svgElements svg element\n     * @private\n     * @returns {Element} content of the html element\n     */\n    ExportUtils.prototype.getHTMLContent = function (svgElements) {\n        var div = createElement('div');\n        if (svgElements) {\n            if (svgElements instanceof Array) {\n                svgElements.forEach(function (value) {\n                    div.appendChild(getElement(value).cloneNode(true));\n                });\n            }\n            else if (svgElements instanceof Element) {\n                div.appendChild(svgElements.cloneNode(true));\n            }\n            else {\n                div.appendChild(getElement(svgElements).cloneNode(true));\n            }\n        }\n        else {\n            div.appendChild(this.control.element.cloneNode(true));\n        }\n        return div;\n    };\n    /**\n     * To export the file as image/svg format\n     *\n     * @param {SmithchartExportType} exportType export type\n     * @param {string} fileName export file name\n     * @param {PdfPageOrientation} orientation orientation of the page\n     * @returns {void}\n     */\n    ExportUtils.prototype.export = function (exportType, fileName, orientation) {\n        var _this = this;\n        var canvas = createElement('canvas', {\n            id: 'ej2-canvas',\n            attrs: {\n                'width': this.control.availableSize.width.toString(),\n                'height': this.control.availableSize.height.toString()\n            }\n        });\n        var isDownload = !(Browser.userAgent.toString().indexOf('HeadlessChrome') > -1);\n        orientation = isNullOrUndefined(orientation) ? PdfPageOrientation.Landscape : orientation;\n        var svgData = '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' +\n            this.control.svgObject.outerHTML +\n            '</svg>';\n        var url = window.URL.createObjectURL(new Blob(exportType === 'SVG' ? [svgData] :\n            [(new XMLSerializer()).serializeToString(this.control.svgObject)], { type: 'image/svg+xml' }));\n        if (exportType === 'SVG') {\n            this.triggerDownload(fileName, exportType, url, isDownload);\n        }\n        else {\n            var image_1 = new Image();\n            var ctx_1 = canvas.getContext('2d');\n            image_1.onload = (function () {\n                ctx_1.drawImage(image_1, 0, 0);\n                window.URL.revokeObjectURL(url);\n                if (exportType === 'PDF') {\n                    var document_1 = new PdfDocument();\n                    var imageString = canvas.toDataURL('image/jpeg').replace('image/jpeg', 'image/octet-stream');\n                    document_1.pageSettings.orientation = orientation;\n                    imageString = imageString.slice(imageString.indexOf(',') + 1);\n                    document_1.pages.add().graphics.drawImage(new PdfBitmap(imageString), 0, 0, (_this.control.availableSize.width - 60), _this.control.availableSize.height);\n                    if (isDownload) {\n                        document_1.save(fileName + '.pdf');\n                        document_1.destroy();\n                    }\n                }\n                else {\n                    _this.triggerDownload(fileName, exportType, canvas.toDataURL('image/png').replace('image/png', 'image/octet-stream'), isDownload);\n                }\n            });\n            image_1.src = url;\n        }\n    };\n    /**\n     * To trigger the download element\n     *\n     * @param {string} fileName export file name\n     * @param {SmithchartExportType} exportType export type\n     * @param {string} url file url\n     * @param {boolean} isDownload download\n     */\n    ExportUtils.prototype.triggerDownload = function (fileName, exportType, url, isDownload) {\n        createElement('a', {\n            attrs: {\n                'download': fileName + '.' + exportType.toLocaleLowerCase(),\n                'href': url\n            }\n        }).dispatchEvent(new MouseEvent(isDownload ? 'click' : 'move', {\n            view: window,\n            bubbles: false,\n            cancelable: true\n        }));\n    };\n    return ExportUtils;\n}());\nexport { ExportUtils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}