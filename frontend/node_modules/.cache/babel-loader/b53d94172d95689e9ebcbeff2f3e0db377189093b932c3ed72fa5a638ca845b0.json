{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { withInRange, sum } from '../../common/utils/helper';\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ColumnBase } from './column-base';\nimport { getMedian } from '../../common/utils/helper';\n/**\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\n */\nvar BoxAndWhiskerSeries = /** @class */function (_super) {\n  __extends(BoxAndWhiskerSeries, _super);\n  function BoxAndWhiskerSeries() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Render BoxAndWhisker series.\n   *\n   * @returns {void}\n   * @private\n   */\n  BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n    var sideBySideInfo = this.getSideBySideInfo(series);\n    var argsData;\n    for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n      var point = _a[_i];\n      point.symbolLocations = [];\n      point.regions = [];\n      var centerRegion = void 0;\n      if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n        this.findBoxPlotValues(point.y, point, series.boxPlotMode);\n        //region to cover the top and bottom ticks\n        this.updateTipRegion(series, point, sideBySideInfo);\n        //get middle rect\n        centerRegion = this.getRectangle(point.xValue + sideBySideInfo.start, point.upperQuartile, point.xValue + sideBySideInfo.end, point.lowerQuartile, series);\n        point.regions.push(centerRegion);\n        argsData = this.triggerEvent(series, point, series.interior, {\n          color: !isNullOrUndefined(series.border.color) && series.border.color !== 'transparent' ? series.border.color : getSaturationColor(series.interior, -0.6),\n          width: series.border.width ? series.border.width : 1\n        });\n        if (!argsData.cancel) {\n          this.renderBoxAndWhisker(series, point, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\n        }\n      }\n    }\n    if (series.marker.visible) {\n      series.chart.markerRender.render(series);\n    }\n  };\n  /**\n   * update the tip region fo box plot\n   *\n   * @param {Series} series series\n   * @param {Points} point point\n   * @param {DoubleRange} sideBySideInfo sideBySideInfo\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\n    var tipRegion = this.getRectangle(point.xValue + sideBySideInfo.median, point.maximum, point.xValue + sideBySideInfo.median, point.minimum, series);\n    this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\n  };\n  /**\n   * Update tip size to tip regions\n   *\n   * @param {Series} series Series\n   * @param {Points} point Points\n   * @param {Rect} region rect region\n   * @param {boolean} isInverted isInverted\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\n    var borderWidth = series.border.width || 1;\n    if (!isInverted) {\n      region.x -= borderWidth / 2;\n      region.width = region.width || borderWidth;\n    } else {\n      region.y -= borderWidth / 2;\n      region.height = region.height || borderWidth;\n    }\n    point.regions.push(region);\n  };\n  /**\n   * Calculation for path direction performed here\n   *\n   * @param {Points} point point\n   * @param {Series} series series\n   * @param {ChartLocation} median median\n   * @param {ChartLocation} average average\n   * @returns {string} direction\n   */\n  BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\n    var topRect = point.regions[0];\n    var midRect = point.regions[1];\n    var direction = '';\n    var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 : topRect.x + topRect.width / 2;\n    var midWidth = midRect.x + midRect.width;\n    var midHeight = midRect.y + midRect.height;\n    var topWidth = topRect.x + topRect.width;\n    var topHeight = topRect.y + topRect.height;\n    if (!series.chart.requireInvertedAxis) {\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topRect.y,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      this.updateTipSize(series, point, {\n        x: midRect.x,\n        y: topHeight,\n        width: midWidth - midRect.x,\n        height: 0\n      }, true);\n      direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\n      direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\n      direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\n      direction += series.showMean ? ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) + ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\n    } else {\n      this.updateTipSize(series, point, {\n        x: topRect.x,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, false);\n      this.updateTipSize(series, point, {\n        x: topWidth,\n        y: midRect.y,\n        width: 0,\n        height: midHeight - midRect.y\n      }, true);\n      direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\n      direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\n      direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y + ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n      direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\n      direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\n      direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\n      direction += series.showMean ? 'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) + 'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\n    }\n    return direction;\n  };\n  /**\n   * Rendering for box and whisker append here.\n   *\n   * @param {Series} series series\n   * @param {Points} point point\n   * @param {IPointRenderEventArgs} argsData argsData\n   * @param {string} direction path direction\n   * @param {number} median median\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, argsData, direction, median) {\n    var location;\n    var size;\n    var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\n    var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\n    element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString() + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\n    var parentElement = series.chart.renderer.createGroup({\n      'id': symbolId\n    });\n    parentElement.appendChild(element);\n    for (var i = 0; i < point.outliers.length; i++) {\n      location = getPoint(point.xValue + median, point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n      size = new Size(series.marker.width, series.marker.height);\n      point.symbolLocations.push(location);\n      this.updateTipSize(series, point, {\n        x: location.x - size.width / 2,\n        y: location.y - size.height / 2,\n        width: size.width,\n        height: size.height\n      }, true);\n    }\n    series.seriesElement.appendChild(parentElement);\n  };\n  /**\n   * To find the box plot values\n   *\n   * @param {number[]} yValues yValues\n   * @param {Points} point point\n   * @param {BoxPlotMode} mode mode\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\n    var yCount = yValues.length;\n    var quartile = {\n      average: sum(yValues) / yCount,\n      lowerQuartile: 0,\n      upperQuartile: 0,\n      maximum: 0,\n      minimum: 0,\n      median: 0,\n      outliers: []\n    };\n    if (mode === 'Exclusive') {\n      quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\n    } else if (mode === 'Inclusive') {\n      quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\n      quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\n      quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\n    } else {\n      quartile.median = getMedian(yValues);\n      this.getQuartileValues(yValues, yCount, quartile);\n    }\n    this.getMinMaxOutlier(yValues, yCount, quartile);\n    point.minimum = quartile.minimum;\n    point.maximum = quartile.maximum;\n    point.lowerQuartile = quartile.lowerQuartile;\n    point.upperQuartile = quartile.upperQuartile;\n    point.median = quartile.median;\n    point.outliers = quartile.outliers;\n    point.average = quartile.average;\n  };\n  /**\n   * to find the exclusive quartile values\n   *\n   * @param {number[]} yValues yValues\n   * @param {number} count count\n   * @param {number} percentile percentile\n   * @returns {number} exclusive quartile value\n   */\n  BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n    var value = 0;\n    var rank = percentile * (count + 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n    if (integerRank === 0) {\n      value = yValues[0];\n    } else if (integerRank > count - 1) {\n      value = yValues[count - 1];\n    } else {\n      value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\n    }\n    return value;\n  };\n  /**\n   * to find the inclusive quartile values\n   *\n   * @param {number[]} yValues yValues\n   * @param {number} count count\n   * @param {number} percentile percentile\n   * @returns {number} inclusive quartile value\n   */\n  BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\n    if (count === 0) {\n      return 0;\n    } else if (count === 1) {\n      return yValues[0];\n    }\n    var value = 0;\n    var rank = percentile * (count - 1);\n    var integerRank = Math.floor(Math.abs(rank));\n    var fractionRank = rank - integerRank;\n    value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\n    return value;\n  };\n  /**\n   * To find the quartile values\n   *\n   * @param {number[]} yValues yValues\n   * @param {number} count count\n   * @param {IBoxPlotQuartile} quartile quartile\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\n    if (count === 1) {\n      quartile.lowerQuartile = yValues[0];\n      quartile.upperQuartile = yValues[0];\n      return null;\n    }\n    var isEvenList = count % 2 === 0;\n    var halfLength = count / 2;\n    var lowerQuartileArray = yValues.slice(0, halfLength);\n    var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\n    quartile.lowerQuartile = getMedian(lowerQuartileArray);\n    quartile.upperQuartile = getMedian(upperQuartileArray);\n  };\n  /**\n   * To find the min, max and outlier values\n   *\n   * @param {number[]} yValues yValues\n   * @param {number} count count\n   * @param {IBoxPlotQuartile} quartile quartile\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\n    var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\n    var rangeIQR = 1.5 * interquartile;\n    for (var i = 0; i < count; i++) {\n      if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.minimum = yValues[i];\n        break;\n      }\n    }\n    for (var i = count - 1; i >= 0; i--) {\n      if (yValues[i] > quartile.upperQuartile + rangeIQR) {\n        quartile.outliers.push(yValues[i]);\n      } else {\n        quartile.maximum = yValues[i];\n        break;\n      }\n    }\n  };\n  /**\n   * Animates the series.\n   *\n   * @param  {Series} series - Defines the series to animate.\n   * @returns {void}\n   */\n  BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\n    this.animate(series);\n  };\n  /**\n   * Get module name.\n   *\n   * @returns {string} module name\n   */\n  BoxAndWhiskerSeries.prototype.getModuleName = function () {\n    return 'BoxAndWhiskerSeries';\n    /**\n     * return the module name\n     */\n  };\n  /**\n   * To destroy the candle series.\n   *\n   * @returns {void}\n   * @private\n   */\n  BoxAndWhiskerSeries.prototype.destroy = function () {\n    /**\n     * Destroys the candle series.\n     */\n  };\n  return BoxAndWhiskerSeries;\n}(ColumnBase);\nexport { BoxAndWhiskerSeries };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","withInRange","sum","getSaturationColor","getPoint","Size","PathOption","isNullOrUndefined","ColumnBase","getMedian","BoxAndWhiskerSeries","_super","apply","arguments","render","series","xAxis","yAxis","isInverted","sideBySideInfo","getSideBySideInfo","argsData","_i","_a","points","length","point","symbolLocations","regions","centerRegion","visible","index","findBoxPlotValues","y","boxPlotMode","updateTipRegion","getRectangle","xValue","start","upperQuartile","end","lowerQuartile","push","triggerEvent","interior","color","border","width","cancel","renderBoxAndWhisker","getPathString","median","average","marker","chart","markerRender","tipRegion","maximum","minimum","updateTipSize","requireInvertedAxis","region","borderWidth","x","height","topRect","midRect","direction","center","midWidth","midHeight","topWidth","topHeight","showMean","location","size","symbolId","element","id","renderer","drawPath","fill","opacity","dashArray","setAttribute","toString","parentElement","createGroup","appendChild","i","outliers","seriesElement","yValues","mode","yCount","quartile","getExclusiveQuartileValue","getInclusiveQuartileValue","getQuartileValues","getMinMaxOutlier","count","percentile","value","rank","integerRank","Math","floor","abs","fractionRank","isEvenList","halfLength","lowerQuartileArray","slice","upperQuartileArray","interquartile","rangeIQR","doAnimation","animate","getModuleName","destroy"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/series/box-and-whisker-series.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable jsdoc/require-param */\nimport { withInRange, sum } from '../../common/utils/helper';\nimport { getSaturationColor, getPoint } from '../../common/utils/helper';\nimport { Size, PathOption } from '@syncfusion/ej2-svg-base';\nimport { isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ColumnBase } from './column-base';\nimport { getMedian } from '../../common/utils/helper';\n/**\n * `BoxAndWhiskerSeries` module is used to render the box and whisker series.\n */\nvar BoxAndWhiskerSeries = /** @class */ (function (_super) {\n    __extends(BoxAndWhiskerSeries, _super);\n    function BoxAndWhiskerSeries() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Render BoxAndWhisker series.\n     *\n     * @returns {void}\n     * @private\n     */\n    BoxAndWhiskerSeries.prototype.render = function (series, xAxis, yAxis, isInverted) {\n        var sideBySideInfo = this.getSideBySideInfo(series);\n        var argsData;\n        for (var _i = 0, _a = series.points; _i < _a.length; _i++) {\n            var point = _a[_i];\n            point.symbolLocations = [];\n            point.regions = [];\n            var centerRegion = void 0;\n            if (point.visible && withInRange(series.points[point.index - 1], point, series.points[point.index + 1], series)) {\n                this.findBoxPlotValues(point.y, point, series.boxPlotMode);\n                //region to cover the top and bottom ticks\n                this.updateTipRegion(series, point, sideBySideInfo);\n                //get middle rect\n                centerRegion = this.getRectangle((point.xValue + sideBySideInfo.start), point.upperQuartile, (point.xValue + sideBySideInfo.end), point.lowerQuartile, series);\n                point.regions.push(centerRegion);\n                argsData = this.triggerEvent(series, point, series.interior, {\n                    color: (!isNullOrUndefined(series.border.color) && series.border.color !== 'transparent') ? series.border.color :\n                        getSaturationColor(series.interior, -0.6),\n                    width: series.border.width ? series.border.width : 1\n                });\n                if (!argsData.cancel) {\n                    this.renderBoxAndWhisker(series, point, argsData, this.getPathString(point, series, getPoint(point.xValue, point.median, xAxis, yAxis, isInverted), getPoint(point.xValue + sideBySideInfo.median, point.average, xAxis, yAxis, isInverted)), sideBySideInfo.median);\n                }\n            }\n        }\n        if (series.marker.visible) {\n            series.chart.markerRender.render(series);\n        }\n    };\n    /**\n     * update the tip region fo box plot\n     *\n     * @param {Series} series series\n     * @param {Points} point point\n     * @param {DoubleRange} sideBySideInfo sideBySideInfo\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.updateTipRegion = function (series, point, sideBySideInfo) {\n        var tipRegion = this.getRectangle((point.xValue + sideBySideInfo.median), point.maximum, (point.xValue + sideBySideInfo.median), point.minimum, series);\n        this.updateTipSize(series, point, tipRegion, series.chart.requireInvertedAxis);\n    };\n    /**\n     * Update tip size to tip regions\n     *\n     * @param {Series} series Series\n     * @param {Points} point Points\n     * @param {Rect} region rect region\n     * @param {boolean} isInverted isInverted\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.updateTipSize = function (series, point, region, isInverted) {\n        var borderWidth = series.border.width || 1;\n        if (!isInverted) {\n            region.x -= borderWidth / 2;\n            region.width = region.width || borderWidth;\n        }\n        else {\n            region.y -= borderWidth / 2;\n            region.height = region.height || borderWidth;\n        }\n        point.regions.push(region);\n    };\n    /**\n     * Calculation for path direction performed here\n     *\n     * @param {Points} point point\n     * @param {Series} series series\n     * @param {ChartLocation} median median\n     * @param {ChartLocation} average average\n     * @returns {string} direction\n     */\n    BoxAndWhiskerSeries.prototype.getPathString = function (point, series, median, average) {\n        var topRect = point.regions[0];\n        var midRect = point.regions[1];\n        var direction = '';\n        var center = series.chart.requireInvertedAxis ? topRect.y + topRect.height / 2 :\n            topRect.x + topRect.width / 2;\n        var midWidth = midRect.x + midRect.width;\n        var midHeight = midRect.y + midRect.height;\n        var topWidth = topRect.x + topRect.width;\n        var topHeight = topRect.y + topRect.height;\n        if (!series.chart.requireInvertedAxis) {\n            this.updateTipSize(series, point, { x: midRect.x, y: topRect.y, width: midWidth - midRect.x, height: 0 }, true);\n            this.updateTipSize(series, point, { x: midRect.x, y: topHeight, width: midWidth - midRect.x, height: 0 }, true);\n            direction += 'M ' + midRect.x + ' ' + topRect.y + ' ' + ' L ' + midWidth + ' ' + topRect.y;\n            direction += ' M ' + center + ' ' + topRect.y + ' ' + ' L ' + center + ' ' + midRect.y;\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n            direction += ' M ' + center + ' ' + midHeight + ' L ' + center + ' ' + topHeight;\n            direction += ' M ' + midRect.x + ' ' + topHeight + ' L ' + midWidth + ' ' + topHeight;\n            direction += ' M ' + midRect.x + ' ' + median.y + ' L ' + midWidth + ' ' + median.y;\n            direction += series.showMean ?\n                ' M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) +\n                    ' M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) : '';\n        }\n        else {\n            this.updateTipSize(series, point, { x: topRect.x, y: midRect.y, width: 0, height: midHeight - midRect.y }, false);\n            this.updateTipSize(series, point, { x: topWidth, y: midRect.y, width: 0, height: midHeight - midRect.y }, true);\n            direction += 'M ' + topRect.x + ' ' + midRect.y + ' L ' + topRect.x + ' ' + midHeight;\n            direction += 'M ' + topRect.x + ' ' + center + ' ' + ' L ' + midRect.x + ' ' + center;\n            direction += ' M ' + midRect.x + ' ' + midRect.y + ' ' + ' L ' + midWidth + ' ' + midRect.y +\n                ' L ' + midWidth + ' ' + midHeight + ' L ' + midRect.x + ' ' + midHeight + ' Z';\n            direction += ' M ' + midWidth + ' ' + center + ' L ' + topWidth + ' ' + center;\n            direction += ' M ' + topWidth + ' ' + midRect.y + ' L ' + topWidth + ' ' + midHeight;\n            direction += ' M ' + median.x + ' ' + midRect.y + ' ' + ' L ' + median.x + ' ' + midHeight;\n            direction += series.showMean ?\n                'M ' + (average.x + 5) + ' ' + (average.y - 5) + ' L ' + (average.x - 5) + ' ' + (average.y + 5) +\n                    'M ' + (average.x - 5) + ' ' + (average.y - 5) + ' L ' + (average.x + 5) + ' ' + (average.y + 5) : '';\n        }\n        return direction;\n    };\n    /**\n     * Rendering for box and whisker append here.\n     *\n     * @param {Series} series series\n     * @param {Points} point point\n     * @param {IPointRenderEventArgs} argsData argsData\n     * @param {string} direction path direction\n     * @param {number} median median\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.renderBoxAndWhisker = function (series, point, argsData, direction, median) {\n        var location;\n        var size;\n        var symbolId = series.chart.element.id + '_Series_' + series.index + '_Point_' + point.index;\n        var element = series.chart.renderer.drawPath(new PathOption(symbolId + '_BoxPath', argsData.fill, argsData.border.width, argsData.border.color, series.opacity, series.dashArray, direction));\n        element.setAttribute('aria-label', point.x.toString() + ':' + point.maximum.toString()\n            + ':' + point.minimum.toString() + ':' + point.lowerQuartile.toString() + ':' + point.upperQuartile.toString());\n        var parentElement = series.chart.renderer.createGroup({\n            'id': symbolId\n        });\n        parentElement.appendChild(element);\n        for (var i = 0; i < point.outliers.length; i++) {\n            location = getPoint((point.xValue + median), point.outliers[i], series.xAxis, series.yAxis, series.chart.requireInvertedAxis);\n            size = new Size(series.marker.width, series.marker.height);\n            point.symbolLocations.push(location);\n            this.updateTipSize(series, point, {\n                x: location.x - (size.width / 2), y: location.y - (size.height / 2),\n                width: size.width, height: size.height\n            }, true);\n        }\n        series.seriesElement.appendChild(parentElement);\n    };\n    /**\n     * To find the box plot values\n     *\n     * @param {number[]} yValues yValues\n     * @param {Points} point point\n     * @param {BoxPlotMode} mode mode\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.findBoxPlotValues = function (yValues, point, mode) {\n        var yCount = yValues.length;\n        var quartile = {\n            average: sum(yValues) / yCount,\n            lowerQuartile: 0, upperQuartile: 0,\n            maximum: 0, minimum: 0,\n            median: 0, outliers: []\n        };\n        if (mode === 'Exclusive') {\n            quartile.lowerQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.25);\n            quartile.upperQuartile = this.getExclusiveQuartileValue(yValues, yCount, 0.75);\n            quartile.median = this.getExclusiveQuartileValue(yValues, yCount, 0.5);\n        }\n        else if (mode === 'Inclusive') {\n            quartile.lowerQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.25);\n            quartile.upperQuartile = this.getInclusiveQuartileValue(yValues, yCount, 0.75);\n            quartile.median = this.getInclusiveQuartileValue(yValues, yCount, 0.5);\n        }\n        else {\n            quartile.median = getMedian(yValues);\n            this.getQuartileValues(yValues, yCount, quartile);\n        }\n        this.getMinMaxOutlier(yValues, yCount, quartile);\n        point.minimum = quartile.minimum;\n        point.maximum = quartile.maximum;\n        point.lowerQuartile = quartile.lowerQuartile;\n        point.upperQuartile = quartile.upperQuartile;\n        point.median = quartile.median;\n        point.outliers = quartile.outliers;\n        point.average = quartile.average;\n    };\n    /**\n     * to find the exclusive quartile values\n     *\n     * @param {number[]} yValues yValues\n     * @param {number} count count\n     * @param {number} percentile percentile\n     * @returns {number} exclusive quartile value\n     */\n    BoxAndWhiskerSeries.prototype.getExclusiveQuartileValue = function (yValues, count, percentile) {\n        if (count === 0) {\n            return 0;\n        }\n        else if (count === 1) {\n            return yValues[0];\n        }\n        var value = 0;\n        var rank = percentile * (count + 1);\n        var integerRank = Math.floor(Math.abs(rank));\n        var fractionRank = rank - integerRank;\n        if (integerRank === 0) {\n            value = yValues[0];\n        }\n        else if (integerRank > count - 1) {\n            value = yValues[count - 1];\n        }\n        else {\n            value = fractionRank * (yValues[integerRank] - yValues[integerRank - 1]) + yValues[integerRank - 1];\n        }\n        return value;\n    };\n    /**\n     * to find the inclusive quartile values\n     *\n     * @param {number[]} yValues yValues\n     * @param {number} count count\n     * @param {number} percentile percentile\n     * @returns {number} inclusive quartile value\n     */\n    BoxAndWhiskerSeries.prototype.getInclusiveQuartileValue = function (yValues, count, percentile) {\n        if (count === 0) {\n            return 0;\n        }\n        else if (count === 1) {\n            return yValues[0];\n        }\n        var value = 0;\n        var rank = percentile * (count - 1);\n        var integerRank = Math.floor(Math.abs(rank));\n        var fractionRank = rank - integerRank;\n        value = fractionRank * (yValues[integerRank + 1] - yValues[integerRank]) + yValues[integerRank];\n        return value;\n    };\n    /**\n     * To find the quartile values\n     *\n     * @param {number[]} yValues yValues\n     * @param {number} count count\n     * @param {IBoxPlotQuartile} quartile quartile\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.getQuartileValues = function (yValues, count, quartile) {\n        if (count === 1) {\n            quartile.lowerQuartile = yValues[0];\n            quartile.upperQuartile = yValues[0];\n            return null;\n        }\n        var isEvenList = count % 2 === 0;\n        var halfLength = count / 2;\n        var lowerQuartileArray = yValues.slice(0, halfLength);\n        var upperQuartileArray = yValues.slice(isEvenList ? halfLength : halfLength + 1, count);\n        quartile.lowerQuartile = getMedian(lowerQuartileArray);\n        quartile.upperQuartile = getMedian(upperQuartileArray);\n    };\n    /**\n     * To find the min, max and outlier values\n     *\n     * @param {number[]} yValues yValues\n     * @param {number} count count\n     * @param {IBoxPlotQuartile} quartile quartile\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.getMinMaxOutlier = function (yValues, count, quartile) {\n        var interquartile = quartile.upperQuartile - quartile.lowerQuartile;\n        var rangeIQR = 1.5 * interquartile;\n        for (var i = 0; i < count; i++) {\n            if (yValues[i] < quartile.lowerQuartile - rangeIQR) {\n                quartile.outliers.push(yValues[i]);\n            }\n            else {\n                quartile.minimum = yValues[i];\n                break;\n            }\n        }\n        for (var i = count - 1; i >= 0; i--) {\n            if (yValues[i] > quartile.upperQuartile + rangeIQR) {\n                quartile.outliers.push(yValues[i]);\n            }\n            else {\n                quartile.maximum = yValues[i];\n                break;\n            }\n        }\n    };\n    /**\n     * Animates the series.\n     *\n     * @param  {Series} series - Defines the series to animate.\n     * @returns {void}\n     */\n    BoxAndWhiskerSeries.prototype.doAnimation = function (series) {\n        this.animate(series);\n    };\n    /**\n     * Get module name.\n     *\n     * @returns {string} module name\n     */\n    BoxAndWhiskerSeries.prototype.getModuleName = function () {\n        return 'BoxAndWhiskerSeries';\n        /**\n         * return the module name\n         */\n    };\n    /**\n     * To destroy the candle series.\n     *\n     * @returns {void}\n     * @private\n     */\n    BoxAndWhiskerSeries.prototype.destroy = function () {\n        /**\n         * Destroys the candle series.\n         */\n    };\n    return BoxAndWhiskerSeries;\n}(ColumnBase));\nexport { BoxAndWhiskerSeries };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}