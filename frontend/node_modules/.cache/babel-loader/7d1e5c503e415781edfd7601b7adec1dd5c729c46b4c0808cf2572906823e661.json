{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { valueToCoefficient, textElement, firstToLowerCase } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption } from '@syncfusion/ej2-svg-base';\nimport { DateTime } from '../../chart/axis/date-time-axis';\nimport { VisibleLabels } from '../../chart/axis/axis';\n/**\n * class for axis\n */\nvar RangeNavigatorAxis = /** @class */function (_super) {\n  __extends(RangeNavigatorAxis, _super);\n  function RangeNavigatorAxis(range) {\n    var _this = _super.call(this) || this;\n    _this.firstLevelLabels = [];\n    _this.secondLevelLabels = [];\n    _this.rangeNavigator = range;\n    return _this;\n  }\n  /**\n   * To render grid lines of axis\n   */\n  RangeNavigatorAxis.prototype.renderGridLines = function () {\n    var pointX = 0;\n    var control = this.rangeNavigator;\n    var majorGridLines = control.majorGridLines;\n    var majorTickLines = control.majorTickLines;\n    var majorGrid = '';\n    var majorTick = '';\n    var rect = control.bounds;\n    var chartAxis = control.chartSeries.xAxis;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    this.gridLines = control.renderer.createGroup({\n      id: control.element.id + '_GridLines'\n    });\n    var tick = control.tickPosition === 'Outside' || control.series.length === 0 ? rect.y + rect.height + majorTickLines.height : rect.y + rect.height - majorTickLines.height;\n    //Gridlines\n    this.firstLevelLabels = [];\n    chartAxis.labelStyle = control.labelStyle;\n    chartAxis.skeleton = control.skeleton;\n    chartAxis.skeletonType = control.skeletonType;\n    chartAxis.isChart = false;\n    if (control.valueType === 'DateTime') {\n      this.calculateDateTimeNiceInterval(chartAxis, rect, chartAxis.doubleRange.start, chartAxis.doubleRange.end, chartAxis.isChart);\n      this.actualIntervalType = chartAxis.actualIntervalType;\n      this.findAxisLabels(chartAxis);\n    }\n    this.firstLevelLabels = chartAxis.visibleLabels;\n    this.lowerValues = [];\n    var labelLength = chartAxis.visibleLabels.length;\n    for (var i = 0; i < labelLength; i++) {\n      this.lowerValues.push(this.firstLevelLabels[i].value);\n      pointX = valueToCoefficient(this.firstLevelLabels[i].value, chartAxis) * rect.width + rect.x;\n      if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n        majorGrid = majorGrid.concat('M ' + pointX + ' ' + (control.bounds.y + control.bounds.height) + ' L ' + pointX + ' ' + control.bounds.y + ' ');\n        majorTick = majorTick.concat('M ' + pointX + ' ' + (rect.y + rect.height) + ' L ' + pointX + ' ' + tick + ' ');\n      }\n    }\n    var options = new PathOption(control.element.id + '_MajorGridLine', 'transparent', majorGridLines.width, control.series.length ? disabledColor || majorGridLines.color || control.themeStyle.gridLineColor : 'transparent', 1, majorGridLines.dashArray, majorGrid);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n    options = new PathOption(control.element.id + '_MajorTickLine', 'transparent', majorTickLines.width, disabledColor || majorTickLines.color || control.themeStyle.gridLineColor, 1, majorGridLines.dashArray, majorTick);\n    this.gridLines.appendChild(control.renderer.drawPath(options));\n  };\n  /**\n   * To render of axis labels\n   */\n  RangeNavigatorAxis.prototype.renderAxisLabels = function () {\n    var axis = this.rangeNavigator.chartSeries.xAxis;\n    var control = this.rangeNavigator;\n    var pointY;\n    var labelElement = control.renderer.createGroup({\n      id: control.element.id + '_AxisLabels'\n    });\n    var firstLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_FirstLevelAxisLabels'\n    });\n    var secondLevelElement = control.renderer.createGroup({\n      id: control.element.id + '_SecondLevelAxisLabels'\n    });\n    var secondaryAxis = axis;\n    pointY = this.findLabelY(control, false);\n    this.placeAxisLabels(axis, pointY, '_AxisLabel_', control, firstLevelElement);\n    secondaryAxis.intervalType = secondaryAxis.actualIntervalType = control.groupBy || this.getSecondaryLabelType(axis.actualIntervalType);\n    secondaryAxis.labelFormat = '';\n    if (control.enableGrouping && control.valueType === 'DateTime' && this.actualIntervalType !== 'Years') {\n      secondaryAxis.visibleRange.interval = 1;\n      secondaryAxis.visibleLabels = [];\n      this.findAxisLabels(secondaryAxis);\n      this.secondLevelLabels = secondaryAxis.visibleLabels;\n      pointY = this.findLabelY(control, true);\n      var border = this.placeAxisLabels(secondaryAxis, pointY, '_SecondaryLabel_', control, secondLevelElement);\n      var path = new PathOption(control.element.id + '_SecondaryMajorLines', 'transparent', control.majorTickLines.width, control.majorTickLines.color || control.themeStyle.gridLineColor, 1, control.majorGridLines.dashArray, border);\n      this.gridLines.appendChild(control.renderer.drawPath(path));\n    }\n    control.chartSeries.xAxis.visibleLabels = control.chartSeries.xAxis.visibleLabels.concat(secondaryAxis.visibleLabels);\n    labelElement.style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n    labelElement.appendChild(firstLevelElement);\n    labelElement.appendChild(secondLevelElement);\n    //gridlines and axis label append to element\n    control.svgObject.appendChild(this.gridLines);\n    control.svgObject.appendChild(labelElement);\n  };\n  /**\n   * To find secondary level label type\n   *\n   * @param {RangeIntervalType} type type of range interval\n   */\n  RangeNavigatorAxis.prototype.getSecondaryLabelType = function (type) {\n    var types = ['Years', 'Quarter', 'Months', 'Weeks', 'Days', 'Hours', 'Minutes', 'Seconds'];\n    return type === 'Years' ? 'Years' : types[types.indexOf(type) - 1];\n  };\n  /**\n   * To find labels for date time axis\n   *\n   * @param {Axis} axis range axis\n   */\n  RangeNavigatorAxis.prototype.findAxisLabels = function (axis) {\n    axis.visibleLabels = [];\n    var start = new Date(axis.visibleRange.min);\n    var nextInterval;\n    var text;\n    var interval = this.rangeNavigator.interval ? this.rangeNavigator.interval : 1;\n    switch (axis.actualIntervalType) {\n      case 'Years':\n        start = new Date(start.getFullYear(), 0, 1);\n        break;\n      case 'Quarter':\n        if (start.getMonth() <= 2) {\n          start = new Date(start.getFullYear(), 0, 1);\n        } else if (start.getMonth() <= 5) {\n          start = new Date(start.getFullYear(), 3, 1);\n        } else if (start.getMonth() <= 8) {\n          start = new Date(start.getFullYear(), 6, 1);\n        } else {\n          start = new Date(start.getFullYear(), 9, 1);\n        }\n        break;\n      case 'Months':\n        start = new Date(start.getFullYear(), start.getMonth());\n        break;\n      case 'Weeks':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate() - start.getDay());\n        break;\n      case 'Days':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate());\n        break;\n      case 'Hours':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours());\n        break;\n      case 'Minutes':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes());\n        break;\n      case 'Seconds':\n        start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());\n        break;\n    }\n    nextInterval = start.getTime();\n    this.rangeNavigator.format = this.rangeNavigator.intl.getDateFormat({\n      format: axis.labelFormat || '',\n      type: firstToLowerCase(axis.skeletonType),\n      skeleton: this.getSkeleton(axis, null, null)\n    });\n    while (nextInterval <= axis.visibleRange.max) {\n      text = this.dateFormats(this.rangeNavigator.format(new Date(nextInterval)), axis, axis.visibleLabels.length);\n      axis.visibleLabels.push(new VisibleLabels(text, nextInterval, this.rangeNavigator.labelStyle, text));\n      nextInterval = this.increaseDateTimeInterval(axis, nextInterval, interval).getTime();\n    }\n  };\n  /**\n   * To find date time formats for Quarter and week interval type\n   *\n   * @param {string} text text\n   * @param {Axis} axis axis\n   * @param {number} index index\n   */\n  RangeNavigatorAxis.prototype.dateFormats = function (text, axis, index) {\n    var changedText = text;\n    var isFirstLevel = this.rangeNavigator.enableGrouping && this.firstLevelLabels.length === 0;\n    switch (axis.actualIntervalType) {\n      case 'Quarter':\n        if (text.indexOf('Jan') > -1) {\n          changedText = !isFirstLevel ? text.replace('Jan', 'Quarter1') : 'Quarter1';\n        } else if (text.indexOf('Apr') > -1) {\n          changedText = !isFirstLevel ? text.replace('Apr', 'Quarter2') : 'Quarter2';\n        } else if (text.indexOf('Jul') > -1) {\n          changedText = !isFirstLevel ? text.replace('Jul', 'Quarter3') : 'Quarter3';\n        } else if (text.indexOf('Oct') > -1) {\n          changedText = !isFirstLevel ? text.replace('Oct', 'Quarter4') : 'Quarter4';\n        }\n        break;\n      case 'Weeks':\n        changedText = 'Week' + ++index;\n        break;\n      default:\n        changedText = text;\n        break;\n    }\n    return changedText;\n  };\n  /**\n   * To find the y co-ordinate for axis labels\n   *\n   * @param {RangeNavigator} control - rangeNavigator\n   * @param {boolean} isSecondary sets true if the axis is secondary axis\n   */\n  RangeNavigatorAxis.prototype.findLabelY = function (control, isSecondary) {\n    var pointY;\n    var reference = control.bounds.y + control.bounds.height;\n    var tickHeight = control.majorTickLines.height;\n    var textHeight = measureText('Quarter1 2011', control.labelStyle).height;\n    var padding = 8;\n    if (control.labelPosition === 'Outside' && control.tickPosition === 'Outside' || control.series.length === 0) {\n      pointY = reference + tickHeight + padding + textHeight * 0.75;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Inside') {\n      pointY = reference - tickHeight - padding;\n    } else if (control.labelPosition === 'Inside' && control.tickPosition === 'Outside') {\n      pointY = reference - padding;\n    } else {\n      pointY = reference + padding + textHeight * 0.75;\n    }\n    if (isSecondary) {\n      padding = 15;\n      if (control.labelPosition === 'Outside' || control.series.length === 0) {\n        pointY += padding + textHeight * 0.75;\n      } else {\n        pointY = control.tickPosition === 'Outside' || control.series.length === 0 ? reference + tickHeight + padding + textHeight * 0.75 : reference + padding + textHeight * 0.75;\n      }\n    }\n    return pointY;\n  };\n  /**\n   * It places the axis labels and returns border for secondary axis labels\n   *\n   * @param {Axis} axis axis for the lables placed\n   * @param {number} pointY y co-ordinate for axis labels\n   * @param {string} id id for the axis elements\n   * @param {RangeNavigator} control range navigator\n   * @param {Element} labelElement parent element in which axis labels appended\n   */\n  RangeNavigatorAxis.prototype.placeAxisLabels = function (axis, pointY, id, control, labelElement) {\n    var maxLabels = axis.visibleLabels.length;\n    var label;\n    var prevLabel;\n    var pointX;\n    var rect = control.bounds;\n    var border = '';\n    var pointXGrid;\n    var disabledColor = control.disableRangeSelector ? 'transparent' : null;\n    var prevX = control.enableRtl ? rect.x + rect.width : rect.x;\n    var intervalType = axis.actualIntervalType;\n    var intervalInTime = control.valueType === 'DateTime' ? maxLabels > 1 ? axis.visibleLabels[1].value - axis.visibleLabels[0].value : (axis.visibleRange.max - axis.visibleLabels[0].value) / 2 : 0;\n    if (control.valueType === 'DateTime' && (intervalType === 'Quarter' || intervalType === 'Weeks')) {\n      this.findSuitableFormat(axis, control);\n    }\n    for (var i = 0, len = maxLabels; i < len; i++) {\n      label = axis.visibleLabels[i];\n      label.size = measureText(label.text, axis.labelStyle);\n      if (control.secondaryLabelAlignment === 'Middle') {\n        pointX = valueToCoefficient(label.value + intervalInTime / 2, axis) * rect.width + rect.x;\n      } else if (id.indexOf('Secondary') > -1) {\n        pointX = this.findAlignment(axis, i);\n      }\n      pointXGrid = valueToCoefficient(label.value, axis) * rect.width + rect.x;\n      //edgelabelPlacements\n      if ((i === 0 || i === axis.visibleLabels.length - 1 && control.enableRtl) && pointX < rect.x) {\n        pointX = rect.x + label.size.width / 2;\n      }\n      if ((i === axis.visibleLabels.length - 1 || i === 0 && control.enableRtl) && pointX + label.size.width > rect.x + rect.width) {\n        pointX = rect.x + rect.width - label.size.width / 2;\n      }\n      //secondary axis grid lines\n      if (id.indexOf('_SecondaryLabel_') > -1) {\n        if (pointX >= rect.x && rect.x + rect.width >= pointX) {\n          border = border.concat('M ' + pointXGrid + ' ' + pointY + ' L ' + pointXGrid + ' ' + (pointY - label.size.height));\n        }\n      }\n      //smart axis label position,\n      if (control.labelIntersectAction === 'Hide' && i !== 0 && this.isIntersect(axis, pointX, label.size.width, prevX, prevLabel.size.width)) {\n        continue;\n      }\n      //label alignment for single visible label\n      if (control.secondaryLabelAlignment === 'Middle' && axis.visibleLabels.length === 1) {\n        pointX = valueToCoefficient(label.value, axis) + (rect.x + rect.width / 2);\n      }\n      //labelrender event\n      var labelStyle = control.labelStyle;\n      var style = {\n        size: labelStyle.size,\n        color: disabledColor || labelStyle.color || control.themeStyle.labelFontColor,\n        fontFamily: labelStyle.fontFamily,\n        fontStyle: labelStyle.fontStyle || control.labelStyle.fontStyle,\n        fontWeight: labelStyle.fontWeight || control.labelStyle.fontWeight,\n        opacity: labelStyle.opacity || control.labelStyle.opacity,\n        textAlignment: labelStyle.textAlignment || control.labelStyle.textAlignment,\n        textOverflow: labelStyle.textOverflow || control.labelStyle.textOverflow\n      };\n      var argsData = {\n        cancel: false,\n        name: 'labelRender',\n        text: label.text,\n        value: label.value,\n        labelStyle: style,\n        region: new Rect(pointX, pointY, label.size.width, label.size.height)\n      };\n      control.trigger('labelRender', argsData);\n      if (!argsData.cancel) {\n        control.labels.push(argsData);\n      } else {\n        continue;\n      }\n      textElement(this.rangeNavigator.renderer, new TextOption(this.rangeNavigator.element.id + id + i, pointX, pointY, 'middle', argsData.text), argsData.labelStyle, argsData.labelStyle.color || control.themeStyle.labelFontColor, labelElement).style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n      prevX = pointX;\n      prevLabel = label;\n    }\n    return border;\n  };\n  /**\n   * To check label is intersected with successive label or not\n   */\n  RangeNavigatorAxis.prototype.isIntersect = function (axis, currentX, currentWidth, prevX, prevWidth) {\n    return axis.isInversed ? currentX + currentWidth / 2 > prevX - prevWidth / 2 : currentX - currentWidth / 2 < prevX + prevWidth / 2;\n  };\n  /**\n   * To find suitable label format for Quarter and week Interval types\n   *\n   * @param {Axis} axis RangeNavigator axis\n   * @param {RangeNavigator} control RangeNavigator instance\n   */\n  RangeNavigatorAxis.prototype.findSuitableFormat = function (axis, control) {\n    var labels = axis.visibleLabels;\n    var labelLength = labels.length;\n    var bounds = control.bounds;\n    var prevX;\n    var currentX;\n    var interval = control.valueType === 'DateTime' ? labelLength > 1 ? labels[1].value - labels[0].value : axis.visibleRange.interval : 0;\n    for (var i = 0; i < labelLength; i++) {\n      currentX = valueToCoefficient(labels[i].value + interval / 2, axis) * bounds.width + bounds.x;\n      labels[i].size = measureText(labels[i].text, axis.labelStyle);\n      //edgelabelPlacements\n      if (i === 0 && currentX < bounds.x) {\n        currentX = bounds.x + labels[i].size.width / 2;\n      }\n      if (axis.actualIntervalType === 'Quarter') {\n        if (i !== 0) {\n          if (labels[i].text.indexOf('Quarter') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n            labels.every(function (label) {\n              label.text = label.text.toString().replace('Quarter', 'QTR');\n              return true;\n            });\n            axis.visibleLabels = labels;\n            this.findSuitableFormat(axis, control);\n          } else {\n            if (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n              labels.every(function (label) {\n                label.text = label.text.toString().replace('QTR', 'Q');\n                return true;\n              });\n              axis.visibleLabels = labels;\n            }\n          }\n        }\n      } else if (axis.actualIntervalType === 'Weeks') {\n        if (i !== 0 && labels[i].text.indexOf('Week') > -1 && this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n          labels.every(function (label) {\n            label.text = label.text.toString().replace('Week', 'W');\n            return true;\n          });\n          axis.visibleLabels = labels;\n        }\n      }\n      prevX = currentX;\n    }\n  };\n  /**\n   * Alignment position for secondary level labels in date time axis\n   *\n   * @param {Axis} axis axis\n   * @param {number} index label index\n   */\n  RangeNavigatorAxis.prototype.findAlignment = function (axis, index) {\n    var label = axis.visibleLabels[index];\n    var nextLabel = axis.visibleLabels[index + 1];\n    var bounds = this.rangeNavigator.bounds;\n    return this.rangeNavigator.secondaryLabelAlignment === 'Near' ? valueToCoefficient(label.value, axis) * bounds.width + bounds.x + label.size.width / 2 : valueToCoefficient(nextLabel ? nextLabel.value : axis.visibleRange.max, axis) * bounds.width + bounds.x - label.size.width;\n  };\n  return RangeNavigatorAxis;\n}(DateTime);\nexport { RangeNavigatorAxis };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","valueToCoefficient","textElement","firstToLowerCase","PathOption","Rect","measureText","TextOption","DateTime","VisibleLabels","RangeNavigatorAxis","_super","range","_this","call","firstLevelLabels","secondLevelLabels","rangeNavigator","renderGridLines","pointX","control","majorGridLines","majorTickLines","majorGrid","majorTick","rect","bounds","chartAxis","chartSeries","xAxis","disabledColor","disableRangeSelector","gridLines","renderer","createGroup","id","element","tick","tickPosition","series","length","y","height","labelStyle","skeleton","skeletonType","isChart","valueType","calculateDateTimeNiceInterval","doubleRange","start","end","actualIntervalType","findAxisLabels","visibleLabels","lowerValues","labelLength","i","push","value","width","x","concat","options","color","themeStyle","gridLineColor","dashArray","appendChild","drawPath","renderAxisLabels","axis","pointY","labelElement","firstLevelElement","secondLevelElement","secondaryAxis","findLabelY","placeAxisLabels","intervalType","groupBy","getSecondaryLabelType","labelFormat","enableGrouping","visibleRange","interval","border","path","style","cursor","svgObject","type","types","indexOf","Date","min","nextInterval","text","getFullYear","getMonth","getDate","getDay","getHours","getMinutes","getSeconds","getTime","format","intl","getDateFormat","getSkeleton","max","dateFormats","increaseDateTimeInterval","index","changedText","isFirstLevel","replace","isSecondary","reference","tickHeight","textHeight","padding","labelPosition","maxLabels","label","prevLabel","pointXGrid","prevX","enableRtl","intervalInTime","findSuitableFormat","len","size","secondaryLabelAlignment","findAlignment","labelIntersectAction","isIntersect","labelFontColor","fontFamily","fontStyle","fontWeight","opacity","textAlignment","textOverflow","argsData","cancel","name","region","trigger","labels","currentX","currentWidth","prevWidth","isInversed","every","toString","nextLabel"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/range-navigator/renderer/range-axis.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { valueToCoefficient, textElement, firstToLowerCase } from '../../common/utils/helper';\nimport { PathOption, Rect, measureText, TextOption } from '@syncfusion/ej2-svg-base';\nimport { DateTime } from '../../chart/axis/date-time-axis';\nimport { VisibleLabels } from '../../chart/axis/axis';\n/**\n * class for axis\n */\nvar RangeNavigatorAxis = /** @class */ (function (_super) {\n    __extends(RangeNavigatorAxis, _super);\n    function RangeNavigatorAxis(range) {\n        var _this = _super.call(this) || this;\n        _this.firstLevelLabels = [];\n        _this.secondLevelLabels = [];\n        _this.rangeNavigator = range;\n        return _this;\n    }\n    /**\n     * To render grid lines of axis\n     */\n    RangeNavigatorAxis.prototype.renderGridLines = function () {\n        var pointX = 0;\n        var control = this.rangeNavigator;\n        var majorGridLines = control.majorGridLines;\n        var majorTickLines = control.majorTickLines;\n        var majorGrid = '';\n        var majorTick = '';\n        var rect = control.bounds;\n        var chartAxis = control.chartSeries.xAxis;\n        var disabledColor = (control.disableRangeSelector) ? 'transparent' : null;\n        this.gridLines = control.renderer.createGroup({ id: control.element.id + '_GridLines' });\n        var tick = (control.tickPosition === 'Outside' || control.series.length === 0) ?\n            rect.y + rect.height + majorTickLines.height : rect.y + rect.height - majorTickLines.height;\n        //Gridlines\n        this.firstLevelLabels = [];\n        chartAxis.labelStyle = control.labelStyle;\n        chartAxis.skeleton = control.skeleton;\n        chartAxis.skeletonType = control.skeletonType;\n        chartAxis.isChart = false;\n        if (control.valueType === 'DateTime') {\n            this.calculateDateTimeNiceInterval(chartAxis, rect, chartAxis.doubleRange.start, chartAxis.doubleRange.end, chartAxis.isChart);\n            this.actualIntervalType = chartAxis.actualIntervalType;\n            this.findAxisLabels(chartAxis);\n        }\n        this.firstLevelLabels = chartAxis.visibleLabels;\n        this.lowerValues = [];\n        var labelLength = chartAxis.visibleLabels.length;\n        for (var i = 0; i < labelLength; i++) {\n            this.lowerValues.push(this.firstLevelLabels[i].value);\n            pointX = (valueToCoefficient(this.firstLevelLabels[i].value, chartAxis) * rect.width) + rect.x;\n            if (pointX >= rect.x && (rect.x + rect.width) >= pointX) {\n                majorGrid = majorGrid.concat('M ' + pointX + ' ' + (control.bounds.y + control.bounds.height) +\n                    ' L ' + pointX + ' ' + control.bounds.y + ' ');\n                majorTick = majorTick.concat('M ' + (pointX) + ' ' + (rect.y + rect.height) +\n                    ' L ' + (pointX) + ' ' + tick + ' ');\n            }\n        }\n        var options = new PathOption(control.element.id + '_MajorGridLine', 'transparent', majorGridLines.width, control.series.length ? disabledColor || majorGridLines.color || control.themeStyle.gridLineColor : 'transparent', 1, majorGridLines.dashArray, majorGrid);\n        this.gridLines.appendChild(control.renderer.drawPath(options));\n        options = new PathOption(control.element.id + '_MajorTickLine', 'transparent', majorTickLines.width, disabledColor || majorTickLines.color || control.themeStyle.gridLineColor, 1, majorGridLines.dashArray, majorTick);\n        this.gridLines.appendChild(control.renderer.drawPath(options));\n    };\n    /**\n     * To render of axis labels\n     */\n    RangeNavigatorAxis.prototype.renderAxisLabels = function () {\n        var axis = this.rangeNavigator.chartSeries.xAxis;\n        var control = this.rangeNavigator;\n        var pointY;\n        var labelElement = control.renderer.createGroup({ id: control.element.id + '_AxisLabels' });\n        var firstLevelElement = control.renderer.createGroup({ id: control.element.id + '_FirstLevelAxisLabels' });\n        var secondLevelElement = control.renderer.createGroup({ id: control.element.id + '_SecondLevelAxisLabels' });\n        var secondaryAxis = axis;\n        pointY = this.findLabelY(control, false);\n        this.placeAxisLabels(axis, pointY, '_AxisLabel_', control, firstLevelElement);\n        secondaryAxis.intervalType = secondaryAxis.actualIntervalType = (control.groupBy ||\n            this.getSecondaryLabelType(axis.actualIntervalType));\n        secondaryAxis.labelFormat = '';\n        if (control.enableGrouping && control.valueType === 'DateTime' && this.actualIntervalType !== 'Years') {\n            secondaryAxis.visibleRange.interval = 1;\n            secondaryAxis.visibleLabels = [];\n            this.findAxisLabels(secondaryAxis);\n            this.secondLevelLabels = secondaryAxis.visibleLabels;\n            pointY = this.findLabelY(control, true);\n            var border = this.placeAxisLabels(secondaryAxis, pointY, '_SecondaryLabel_', control, secondLevelElement);\n            var path = new PathOption(control.element.id + '_SecondaryMajorLines', 'transparent', control.majorTickLines.width, control.majorTickLines.color || control.themeStyle.gridLineColor, 1, control.majorGridLines.dashArray, border);\n            this.gridLines.appendChild(control.renderer.drawPath(path));\n        }\n        control.chartSeries.xAxis.visibleLabels = control.chartSeries.xAxis.visibleLabels.concat(secondaryAxis.visibleLabels);\n        labelElement.style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n        labelElement.appendChild(firstLevelElement);\n        labelElement.appendChild(secondLevelElement);\n        //gridlines and axis label append to element\n        control.svgObject.appendChild(this.gridLines);\n        control.svgObject.appendChild(labelElement);\n    };\n    /**\n     * To find secondary level label type\n     *\n     * @param {RangeIntervalType} type type of range interval\n     */\n    RangeNavigatorAxis.prototype.getSecondaryLabelType = function (type) {\n        var types = ['Years', 'Quarter', 'Months', 'Weeks', 'Days', 'Hours', 'Minutes', 'Seconds'];\n        return (type === 'Years' ? 'Years' : types[types.indexOf(type) - 1]);\n    };\n    /**\n     * To find labels for date time axis\n     *\n     * @param {Axis} axis range axis\n     */\n    RangeNavigatorAxis.prototype.findAxisLabels = function (axis) {\n        axis.visibleLabels = [];\n        var start = new Date(axis.visibleRange.min);\n        var nextInterval;\n        var text;\n        var interval = this.rangeNavigator.interval ? this.rangeNavigator.interval : 1;\n        switch (axis.actualIntervalType) {\n            case 'Years':\n                start = new Date(start.getFullYear(), 0, 1);\n                break;\n            case 'Quarter':\n                if (start.getMonth() <= 2) {\n                    start = new Date(start.getFullYear(), 0, 1);\n                }\n                else if (start.getMonth() <= 5) {\n                    start = new Date(start.getFullYear(), 3, 1);\n                }\n                else if (start.getMonth() <= 8) {\n                    start = new Date(start.getFullYear(), 6, 1);\n                }\n                else {\n                    start = new Date(start.getFullYear(), 9, 1);\n                }\n                break;\n            case 'Months':\n                start = new Date(start.getFullYear(), start.getMonth());\n                break;\n            case 'Weeks':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate() - start.getDay());\n                break;\n            case 'Days':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate());\n                break;\n            case 'Hours':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours());\n                break;\n            case 'Minutes':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes());\n                break;\n            case 'Seconds':\n                start = new Date(start.getFullYear(), start.getMonth(), start.getDate(), start.getHours(), start.getMinutes(), start.getSeconds());\n                break;\n        }\n        nextInterval = start.getTime();\n        this.rangeNavigator.format = this.rangeNavigator.intl.getDateFormat({\n            format: axis.labelFormat || '',\n            type: firstToLowerCase(axis.skeletonType), skeleton: this.getSkeleton(axis, null, null)\n        });\n        while (nextInterval <= axis.visibleRange.max) {\n            text = this.dateFormats(this.rangeNavigator.format(new Date(nextInterval)), axis, axis.visibleLabels.length);\n            axis.visibleLabels.push(new VisibleLabels(text, nextInterval, this.rangeNavigator.labelStyle, text));\n            nextInterval = this.increaseDateTimeInterval(axis, nextInterval, interval).getTime();\n        }\n    };\n    /**\n     * To find date time formats for Quarter and week interval type\n     *\n     * @param {string} text text\n     * @param {Axis} axis axis\n     * @param {number} index index\n     */\n    RangeNavigatorAxis.prototype.dateFormats = function (text, axis, index) {\n        var changedText = text;\n        var isFirstLevel = this.rangeNavigator.enableGrouping && this.firstLevelLabels.length === 0;\n        switch (axis.actualIntervalType) {\n            case 'Quarter':\n                if (text.indexOf('Jan') > -1) {\n                    changedText = !isFirstLevel ? text.replace('Jan', 'Quarter1') : 'Quarter1';\n                }\n                else if (text.indexOf('Apr') > -1) {\n                    changedText = !isFirstLevel ? text.replace('Apr', 'Quarter2') : 'Quarter2';\n                }\n                else if (text.indexOf('Jul') > -1) {\n                    changedText = !isFirstLevel ? text.replace('Jul', 'Quarter3') : 'Quarter3';\n                }\n                else if (text.indexOf('Oct') > -1) {\n                    changedText = !isFirstLevel ? text.replace('Oct', 'Quarter4') : 'Quarter4';\n                }\n                break;\n            case 'Weeks':\n                changedText = 'Week' + ++index;\n                break;\n            default:\n                changedText = text;\n                break;\n        }\n        return changedText;\n    };\n    /**\n     * To find the y co-ordinate for axis labels\n     *\n     * @param {RangeNavigator} control - rangeNavigator\n     * @param {boolean} isSecondary sets true if the axis is secondary axis\n     */\n    RangeNavigatorAxis.prototype.findLabelY = function (control, isSecondary) {\n        var pointY;\n        var reference = control.bounds.y + control.bounds.height;\n        var tickHeight = control.majorTickLines.height;\n        var textHeight = measureText('Quarter1 2011', control.labelStyle).height;\n        var padding = 8;\n        if ((control.labelPosition === 'Outside' && control.tickPosition === 'Outside') || control.series.length === 0) {\n            pointY = reference + tickHeight + padding + textHeight * 0.75;\n        }\n        else if (control.labelPosition === 'Inside' && control.tickPosition === 'Inside') {\n            pointY = reference - tickHeight - padding;\n        }\n        else if (control.labelPosition === 'Inside' && control.tickPosition === 'Outside') {\n            pointY = reference - padding;\n        }\n        else {\n            pointY = reference + padding + (textHeight * 0.75);\n        }\n        if (isSecondary) {\n            padding = 15;\n            if (control.labelPosition === 'Outside' || control.series.length === 0) {\n                pointY += padding + textHeight * 0.75;\n            }\n            else {\n                pointY = (control.tickPosition === 'Outside' || control.series.length === 0) ?\n                    reference + tickHeight + padding + textHeight * 0.75 : reference + padding + textHeight * 0.75;\n            }\n        }\n        return pointY;\n    };\n    /**\n     * It places the axis labels and returns border for secondary axis labels\n     *\n     * @param {Axis} axis axis for the lables placed\n     * @param {number} pointY y co-ordinate for axis labels\n     * @param {string} id id for the axis elements\n     * @param {RangeNavigator} control range navigator\n     * @param {Element} labelElement parent element in which axis labels appended\n     */\n    RangeNavigatorAxis.prototype.placeAxisLabels = function (axis, pointY, id, control, labelElement) {\n        var maxLabels = axis.visibleLabels.length;\n        var label;\n        var prevLabel;\n        var pointX;\n        var rect = control.bounds;\n        var border = '';\n        var pointXGrid;\n        var disabledColor = (control.disableRangeSelector) ? 'transparent' : null;\n        var prevX = control.enableRtl ? (rect.x + rect.width) : rect.x;\n        var intervalType = axis.actualIntervalType;\n        var intervalInTime = control.valueType === 'DateTime' ?\n            maxLabels > 1 ? (axis.visibleLabels[1].value - axis.visibleLabels[0].value) :\n                (axis.visibleRange.max - axis.visibleLabels[0].value) / 2 : 0;\n        if (control.valueType === 'DateTime' && (intervalType === 'Quarter' || intervalType === 'Weeks')) {\n            this.findSuitableFormat(axis, control);\n        }\n        for (var i = 0, len = maxLabels; i < len; i++) {\n            label = axis.visibleLabels[i];\n            label.size = measureText(label.text, axis.labelStyle);\n            if (control.secondaryLabelAlignment === 'Middle') {\n                pointX = (valueToCoefficient((label.value + intervalInTime / 2), axis) * rect.width) + rect.x;\n            }\n            else if ((id.indexOf('Secondary') > -1)) {\n                pointX = this.findAlignment(axis, i);\n            }\n            pointXGrid = (valueToCoefficient((label.value), axis) * rect.width) + rect.x;\n            //edgelabelPlacements\n            if ((i === 0 || (i === axis.visibleLabels.length - 1 && control.enableRtl)) && pointX < rect.x) {\n                pointX = rect.x + label.size.width / 2;\n            }\n            if ((i === axis.visibleLabels.length - 1 || (i === 0 && control.enableRtl)) &&\n                ((pointX + label.size.width) > (rect.x + rect.width))) {\n                pointX = rect.x + rect.width - label.size.width / 2;\n            }\n            //secondary axis grid lines\n            if (id.indexOf('_SecondaryLabel_') > -1) {\n                if (pointX >= rect.x && (rect.x + rect.width) >= pointX) {\n                    border = border.concat('M ' + pointXGrid + ' ' + pointY +\n                        ' L ' + pointXGrid + ' ' + (pointY - label.size.height));\n                }\n            }\n            //smart axis label position,\n            if (control.labelIntersectAction === 'Hide' &&\n                i !== 0 && this.isIntersect(axis, pointX, label.size.width, prevX, prevLabel.size.width)) {\n                continue;\n            }\n            //label alignment for single visible label\n            if (control.secondaryLabelAlignment === 'Middle' && axis.visibleLabels.length === 1) {\n                pointX = valueToCoefficient(label.value, axis) + (rect.x + (rect.width / 2));\n            }\n            //labelrender event\n            var labelStyle = control.labelStyle;\n            var style = {\n                size: labelStyle.size, color: disabledColor || labelStyle.color || control.themeStyle.labelFontColor,\n                fontFamily: labelStyle.fontFamily,\n                fontStyle: labelStyle.fontStyle || control.labelStyle.fontStyle,\n                fontWeight: labelStyle.fontWeight || control.labelStyle.fontWeight,\n                opacity: labelStyle.opacity || control.labelStyle.opacity,\n                textAlignment: labelStyle.textAlignment || control.labelStyle.textAlignment,\n                textOverflow: labelStyle.textOverflow || control.labelStyle.textOverflow\n            };\n            var argsData = {\n                cancel: false, name: 'labelRender',\n                text: label.text, value: label.value, labelStyle: style,\n                region: new Rect(pointX, pointY, label.size.width, label.size.height)\n            };\n            control.trigger('labelRender', argsData);\n            if (!argsData.cancel) {\n                control.labels.push(argsData);\n            }\n            else {\n                continue;\n            }\n            textElement(this.rangeNavigator.renderer, new TextOption(this.rangeNavigator.element.id + id + i, pointX, pointY, 'middle', argsData.text), argsData.labelStyle, argsData.labelStyle.color || control.themeStyle.labelFontColor, labelElement).style.cursor = axis.valueType === 'DateTime' ? 'cursor: pointer' : 'cursor: default';\n            prevX = pointX;\n            prevLabel = label;\n        }\n        return border;\n    };\n    /**\n     * To check label is intersected with successive label or not\n     */\n    RangeNavigatorAxis.prototype.isIntersect = function (axis, currentX, currentWidth, prevX, prevWidth) {\n        return (axis.isInversed) ? (currentX + currentWidth / 2 > prevX - prevWidth / 2) :\n            (currentX - currentWidth / 2 < prevX + prevWidth / 2);\n    };\n    /**\n     * To find suitable label format for Quarter and week Interval types\n     *\n     * @param {Axis} axis RangeNavigator axis\n     * @param {RangeNavigator} control RangeNavigator instance\n     */\n    RangeNavigatorAxis.prototype.findSuitableFormat = function (axis, control) {\n        var labels = axis.visibleLabels;\n        var labelLength = labels.length;\n        var bounds = control.bounds;\n        var prevX;\n        var currentX;\n        var interval = control.valueType === 'DateTime' ?\n            labelLength > 1 ? (labels[1].value - labels[0].value) : axis.visibleRange.interval\n            : 0;\n        for (var i = 0; i < labelLength; i++) {\n            currentX = (valueToCoefficient((labels[i].value + interval / 2), axis) * bounds.width) + bounds.x;\n            labels[i].size = measureText(labels[i].text, axis.labelStyle);\n            //edgelabelPlacements\n            if (i === 0 && currentX < bounds.x) {\n                currentX = bounds.x + labels[i].size.width / 2;\n            }\n            if (axis.actualIntervalType === 'Quarter') {\n                if (i !== 0) {\n                    if ((labels[i].text.indexOf('Quarter') > -1) &&\n                        (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width))) {\n                        labels.every(function (label) {\n                            label.text = label.text.toString().replace('Quarter', 'QTR');\n                            return true;\n                        });\n                        axis.visibleLabels = labels;\n                        this.findSuitableFormat(axis, control);\n                    }\n                    else {\n                        if (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)) {\n                            labels.every(function (label) {\n                                label.text = label.text.toString().replace('QTR', 'Q');\n                                return true;\n                            });\n                            axis.visibleLabels = labels;\n                        }\n                    }\n                }\n            }\n            else if (axis.actualIntervalType === 'Weeks') {\n                if ((i !== 0) && ((labels[i].text.indexOf('Week') > -1) &&\n                    (this.isIntersect(axis, currentX, labels[i].size.width, prevX, labels[i - 1].size.width)))) {\n                    labels.every(function (label) {\n                        label.text = label.text.toString().replace('Week', 'W');\n                        return true;\n                    });\n                    axis.visibleLabels = labels;\n                }\n            }\n            prevX = currentX;\n        }\n    };\n    /**\n     * Alignment position for secondary level labels in date time axis\n     *\n     * @param {Axis} axis axis\n     * @param {number} index label index\n     */\n    RangeNavigatorAxis.prototype.findAlignment = function (axis, index) {\n        var label = axis.visibleLabels[index];\n        var nextLabel = axis.visibleLabels[index + 1];\n        var bounds = this.rangeNavigator.bounds;\n        return (this.rangeNavigator.secondaryLabelAlignment === 'Near' ?\n            (valueToCoefficient((label.value), axis) * bounds.width) + bounds.x + label.size.width / 2 :\n            (valueToCoefficient((nextLabel ? nextLabel.value : axis.visibleRange.max), axis) * bounds.width) + bounds.x - label.size.width);\n    };\n    return RangeNavigatorAxis;\n}(DateTime));\nexport { RangeNavigatorAxis };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}