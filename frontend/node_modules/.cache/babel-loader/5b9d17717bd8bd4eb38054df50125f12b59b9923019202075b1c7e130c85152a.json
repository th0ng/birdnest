{"ast":null,"code":"import { Marker } from './marker';\nimport { TextOption, renderTextElement } from '../../smithchart/utils/helper';\nimport { SmithchartRect, LineSegment, PointRegion, DataLabelTextOptions } from '../../smithchart/utils/utils';\nimport { _getEpsilonValue, PathOption, RectOption, getAnimationFunction, templateAnimate } from '../../smithchart/utils/helper';\nimport { animationComplete } from '../../smithchart/model/constant';\nimport { DataLabel } from '../../smithchart/series/datalabel';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { textRender, seriesRender } from '../model/constant';\nvar SeriesRender = /** @class */function () {\n  function SeriesRender() {\n    this.xValues = [];\n    this.yValues = [];\n    this.pointsRegion = [];\n    this.lineSegments = [];\n    this.location = [];\n    this.dataLabel = new DataLabel();\n  }\n  SeriesRender.prototype.processData = function (series) {\n    var dataArray = series.dataSource;\n    var resistance = series.resistance;\n    var reactance = series.reactance;\n    var tooltip = series.tooltipMappingName;\n    series.points = [];\n    for (var i = 0; i < dataArray.length; i++) {\n      series.points.push({\n        resistance: dataArray[i][resistance],\n        reactance: dataArray[i][reactance],\n        tooltip: dataArray[i][tooltip]\n      });\n    }\n  };\n  /* eslint-disable  */\n  SeriesRender.prototype.draw = function (smithchart, axisRender, bounds) {\n    var groupElement = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_seriesCollections'\n    });\n    var resistantCx;\n    var reactanceCy;\n    var series = smithchart.series;\n    var seriesLength = series.length;\n    var chartAreaRadius = axisRender.areaRadius;\n    var interSectPoint;\n    var index;\n    for (var m = 0; m < seriesLength; m++) {\n      var seriesIndex = m;\n      if (series[m].dataSource && series[m].resistance && series[m].reactance) {\n        this.processData(series[m]);\n      }\n      this.pointsRegion[m] = [];\n      this.location[m] = [];\n      for (var j = 0; j < series[m].points.length; j++) {\n        this.xValues[j] = series[m].points[j]['resistance'];\n        this.yValues[j] = series[m].points[j]['reactance'];\n      }\n      var chartAreaCx = axisRender.circleCenterX;\n      var chartAreaCy = axisRender.circleCenterY;\n      var diameter = axisRender.areaRadius * 2;\n      var reactanceStartPoint = {\n        x: chartAreaCx + (smithchart.renderType === 'Impedance' ? chartAreaRadius : -chartAreaRadius),\n        y: chartAreaCy\n      };\n      var resistantCy = chartAreaCy;\n      var reactanceCx = reactanceStartPoint.x;\n      for (var k = 0; k < series[m].points.length; k++) {\n        var resistance = this.xValues[k];\n        var resistantR = diameter * (1 / (resistance + 1)) / 2;\n        var reactance = this.yValues[k];\n        var reactanceR = Math.abs(1 / reactance * diameter / 2);\n        if (smithchart.renderType === 'Impedance') {\n          reactanceCy = reactance > 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n          resistantCx = axisRender.circleLeftX + diameter - resistantR;\n        } else {\n          reactanceCy = reactance < 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n          resistantCx = axisRender.circleLeftX + resistantR;\n        }\n        interSectPoint = axisRender.intersectingCirclePoints(reactanceCx, reactanceCy, reactanceR, resistantCx, resistantCy, resistantR, smithchart.renderType);\n        var epsilon = _getEpsilonValue();\n        if (Math.abs(reactance) < epsilon) {\n          interSectPoint.x = smithchart.renderType === 'Impedance' ? resistantCx - resistantR : resistantCx + resistantR;\n          interSectPoint.y = chartAreaCy;\n        }\n        this.pointsRegion[m][k] = new PointRegion();\n        this.pointsRegion[m][k] = {\n          point: interSectPoint,\n          x: resistance,\n          y: reactance\n        };\n        this.location[m][k] = {\n          x: interSectPoint.x,\n          y: interSectPoint.y\n        };\n      }\n      for (var i = 0; i < series[m].points.length - 1; i++) {\n        index = i + 1;\n        this.lineSegments[i] = new LineSegment();\n        this.lineSegments[i] = {\n          x1: this.xValues[i],\n          y1: this.yValues[i],\n          x2: this.xValues[index],\n          y2: this.yValues[index]\n        };\n      }\n      smithchart.svgObject.appendChild(groupElement);\n      this.drawSeries(smithchart, seriesIndex, groupElement, bounds);\n    }\n    for (var j = 0; j < smithchart.series.length; j++) {\n      if (smithchart.series[j].enableSmartLabels && smithchart.series[j].marker.dataLabel.visible) {\n        var gdlcEle = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + '_series' + j + '_Datalabel' + '_connectorLines'\n        });\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n        if (element) {\n          element.setAttribute('aria-label', 'Smithchart with ' + series[j].points.length + 'Points');\n          element.appendChild(gdlcEle);\n        }\n        this.dataLabel.calculateSmartLabels(this.dataLabel.labelOptions[j], j);\n        for (var k = 0; k < smithchart.series[j].points.length; k++) {\n          var currentPoint = this.dataLabel.labelOptions[j]['textOptions'][k];\n          if (currentPoint.xPosition + currentPoint.width > smithchart.chartArea.x + smithchart.chartArea.width || currentPoint.xPosition < smithchart.chartArea.x || currentPoint.yPosition < smithchart.chartArea.y || currentPoint.yPosition + currentPoint.height > smithchart.chartArea.y + smithchart.chartArea.height) {\n            this.dataLabel.labelOptions[j].textOptions[k].connectorFlag = false;\n            this.dataLabel.labelOptions[j].textOptions[k].visible = false;\n          }\n          if (currentPoint['connectorFlag']) {\n            this.dataLabel.drawConnectorLines(smithchart, j, k, currentPoint, gdlcEle);\n          }\n        }\n      }\n    }\n    var _loop_1 = function (j) {\n      var dataLabel = smithchart.series[j].marker.dataLabel;\n      if (smithchart.series[j].marker.dataLabel.visible) {\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n        var gdEle_1 = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + '_series' + j + '_Datalabel'\n        });\n        gdEle_1.setAttribute('aria-hidden', 'true');\n        if (element) {\n          element.appendChild(gdEle_1);\n        }\n        var _loop_2 = function (k) {\n          var currentPoint = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n          if (!dataLabel.template && currentPoint.visible) {\n            var options_1 = new DataLabelTextOptions();\n            options_1 = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n            var font_1 = dataLabel.textStyle;\n            var x = options_1['xPosition'];\n            var y = options_1['yPosition'];\n            var id = smithchart.element.id + '_Series' + j + '_Points' + k + '_dataLabel' + '_symbol' + k;\n            var fill = dataLabel['fill'] ? dataLabel['fill'] : smithchart.series[j].fill || smithchart.seriesColors[j % smithchart.seriesColors.length];\n            var border = smithchart.series[j].marker.dataLabel.border;\n            var rectOptions = new RectOption(id, fill, border, options_1['opacity'], new SmithchartRect(x, y, options_1['width'], options_1['height']));\n            var dataEle = smithchart.renderer.drawRectangle(rectOptions);\n            gdEle_1.appendChild(dataEle);\n            var textRenderEventArgs = {\n              text: options_1['text'],\n              x: options_1['x'],\n              y: options_1['y'],\n              seriesIndex: j,\n              pointIndex: k,\n              name: textRender,\n              cancel: false\n            };\n            var textRenderSuccess = function (args) {\n              if (!args.cancel) {\n                var textoptions = new TextOption(options_1['id'], args.x, args.y, 'start', args.text);\n                var color = font_1.color ? font_1.color : smithchart.themeStyle.dataLabel;\n                var element_1 = renderTextElement(textoptions, font_1, color, gdEle_1);\n                gdEle_1.appendChild(element_1);\n              }\n            };\n            textRenderSuccess.bind(this_1);\n            smithchart.trigger(textRender, textRenderEventArgs, textRenderSuccess);\n          } else if (dataLabel.template) {\n            var element_2 = document.getElementById(dataLabel.template + '_seriesIndex' + j + '_pointIndex' + k + smithchart.element.id);\n            element_2.style.left = this_1.dataLabel.labelOptions[j]['textOptions'][k].xPosition + 'px';\n            element_2.style.top = this_1.dataLabel.labelOptions[j]['textOptions'][k].yPosition + 'px';\n          }\n        };\n        for (var k = 0; k < smithchart.series[j].points.length; k++) {\n          _loop_2(k);\n        }\n      }\n    };\n    var this_1 = this;\n    for (var j = 0; j < smithchart.series.length; j++) {\n      _loop_1(j);\n    }\n    for (var i = 0; i < smithchart.series.length; i++) {\n      if (smithchart.series[i].enableAnimation && smithchart.animateSeries) {\n        if (smithchart.series[i].marker.dataLabel.template) {\n          this.animateDataLabelTemplate(i, smithchart);\n        }\n        var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + i);\n        element.setAttribute('aria-label', 'Smithchart with ' + series[i].points.length + 'Points');\n        this.performAnimation(smithchart, element, i);\n      }\n    }\n  };\n  SeriesRender.prototype.drawSeries = function (smithchart, seriesindex, groupElement, bounds) {\n    var _this = this;\n    var gsEle = smithchart.renderer.createGroup({\n      'id': smithchart.element.id + '_svg' + '_seriesCollection' + seriesindex,\n      'clip-path': 'url(#' + smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex + ')'\n    });\n    gsEle.setAttribute('visibility', smithchart.series[seriesindex].visibility);\n    gsEle.setAttribute('aria-label', 'Smithchart with ' + smithchart.series[seriesindex].points.length + ' points');\n    groupElement.appendChild(gsEle);\n    var sb = '';\n    var path;\n    var marker = smithchart.series[seriesindex].marker;\n    var element;\n    var count = smithchart.series[seriesindex].points.length - 1;\n    for (var i = 0; i < count; i++) {\n      var point1 = this.pointsRegion[seriesindex][i]['point'];\n      var point2 = this.pointsRegion[seriesindex][i + 1]['point'];\n      sb = sb + ('M' + ' ' + point1.x + ' ' + point1.y + ' ' + 'L' + ' ' + point2.x + ' ' + point2.y + ' ');\n    }\n    path = sb.toString();\n    var fill = smithchart.series[seriesindex].fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length];\n    var seriesEventArgs = {\n      text: smithchart.series[seriesindex].name,\n      fill: fill,\n      name: seriesRender,\n      cancel: false\n    };\n    var seriesRenderSuccess = function (args) {\n      if (!args.cancel) {\n        var options = new PathOption(smithchart.element.id + '_series' + seriesindex + '_points', 'none', smithchart.series[seriesindex].width, seriesEventArgs.fill, smithchart.series[seriesindex].opacity, 'none', path);\n        _this.clipRectElement = smithchart.renderer.drawClipPath(new RectOption(smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex, 'transparent', {\n          width: 1,\n          color: 'Gray'\n        }, 1, {\n          x: bounds.x,\n          y: bounds.y,\n          width: smithchart.availableSize.width,\n          height: smithchart.availableSize.height\n        }));\n        gsEle.appendChild(_this.clipRectElement);\n        var gspEle = smithchart.renderer.createGroup({\n          'id': smithchart.element.id + '_svg' + seriesindex\n        });\n        element = smithchart.renderer.drawPath(options);\n        gspEle.appendChild(element);\n        gsEle.appendChild(gspEle);\n      }\n    };\n    seriesRenderSuccess.bind(this);\n    smithchart.trigger(seriesRender, seriesEventArgs, seriesRenderSuccess);\n    var markerrender = new Marker();\n    markerrender.drawMarker(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex]);\n    this.dataLabel.drawDataLabel(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex], bounds);\n  };\n  SeriesRender.prototype.animateDataLabelTemplate = function (seriesindex, smithchart) {\n    var length = smithchart.series[seriesindex].points.length;\n    var opacity = 0;\n    var delay = 0;\n    var duration = parseFloat(smithchart.series[seriesindex].animationDuration);\n    for (var i = 0; i < length; i++) {\n      var element = document.getElementById(smithchart.series[seriesindex].marker.dataLabel.template + '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id);\n      element.style.visibility = 'hidden';\n      templateAnimate(smithchart, element, delay, duration, 'FadeIn');\n      // this.fadein(element);\n    }\n  };\n  /*private fadein(element: HTMLElement): void {\n    let op: number = 0.1;\n    element.style.display = 'block';\n    let timer: number = setInterval( (): void => {\n          if (op >= 1) {\n              clearInterval(timer);\n          }\n          element.style.opacity = op.toString();\n          element.style.filter = 'alpha(opacity=' + op * 100 + ')';\n          op += op * 0.1;\n  }, 50);\n  \n  }*/\n  SeriesRender.prototype.performAnimation = function (smithchart, gsEle, seriesIndex) {\n    var animation = new Animation({});\n    var element = document.getElementById('container_svg_seriesCollections');\n    var clipRect = gsEle.childNodes[0].childNodes[0].childNodes[0];\n    var effect = getAnimationFunction('Linear');\n    var reveffect = getAnimationFunction('Reverse');\n    var width = +clipRect.getAttribute('width');\n    var x = +clipRect.getAttribute('x');\n    var value;\n    animation.animate(clipRect, {\n      duration: parseFloat(smithchart.series[seriesIndex].animationDuration),\n      progress: function (args) {\n        if (smithchart.renderType === 'Impedance') {\n          value = effect(args.timeStamp - args.delay, 0, width, args.duration);\n          clipRect.setAttribute('width', value.toString());\n        } else {\n          value = reveffect(args.timeStamp - args.delay, width, 0, args.duration);\n          clipRect.setAttribute('x', value.toString());\n        }\n      },\n      end: function (model) {\n        if (smithchart.renderType === 'Impedance') {\n          clipRect.setAttribute('width', width.toString());\n        } else {\n          clipRect.setAttribute('x', x.toString());\n        }\n        var event = {\n          cancel: false,\n          name: animationComplete,\n          smithchart: smithchart\n        };\n        smithchart.trigger(animationComplete, event);\n      }\n    });\n  };\n  SeriesRender.prototype.getLocation = function (seriesindex, pointIndex) {\n    var x;\n    var y;\n    x = this.location[seriesindex][pointIndex].x;\n    y = this.location[seriesindex][pointIndex].y;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  return SeriesRender;\n}();\nexport { SeriesRender };","map":{"version":3,"names":["Marker","TextOption","renderTextElement","SmithchartRect","LineSegment","PointRegion","DataLabelTextOptions","_getEpsilonValue","PathOption","RectOption","getAnimationFunction","templateAnimate","animationComplete","DataLabel","Animation","textRender","seriesRender","SeriesRender","xValues","yValues","pointsRegion","lineSegments","location","dataLabel","prototype","processData","series","dataArray","dataSource","resistance","reactance","tooltip","tooltipMappingName","points","i","length","push","draw","smithchart","axisRender","bounds","groupElement","renderer","createGroup","element","id","resistantCx","reactanceCy","seriesLength","chartAreaRadius","areaRadius","interSectPoint","index","m","seriesIndex","j","chartAreaCx","circleCenterX","chartAreaCy","circleCenterY","diameter","reactanceStartPoint","x","renderType","y","resistantCy","reactanceCx","k","resistantR","reactanceR","Math","abs","circleLeftX","intersectingCirclePoints","epsilon","point","x1","y1","x2","y2","svgObject","appendChild","drawSeries","enableSmartLabels","marker","visible","gdlcEle","document","getElementById","setAttribute","calculateSmartLabels","labelOptions","currentPoint","xPosition","width","chartArea","yPosition","height","textOptions","connectorFlag","drawConnectorLines","_loop_1","gdEle_1","_loop_2","this_1","template","options_1","font_1","textStyle","fill","seriesColors","border","rectOptions","dataEle","drawRectangle","textRenderEventArgs","text","pointIndex","name","cancel","textRenderSuccess","args","textoptions","color","themeStyle","element_1","bind","trigger","element_2","style","left","top","enableAnimation","animateSeries","animateDataLabelTemplate","performAnimation","seriesindex","_this","gsEle","visibility","sb","path","count","point1","point2","toString","seriesEventArgs","seriesRenderSuccess","options","opacity","clipRectElement","drawClipPath","availableSize","gspEle","drawPath","markerrender","drawMarker","drawDataLabel","delay","duration","parseFloat","animationDuration","animation","clipRect","childNodes","effect","reveffect","getAttribute","value","animate","progress","timeStamp","end","model","event","getLocation"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/smithchart/series/seriesrender.js"],"sourcesContent":["import { Marker } from './marker';\nimport { TextOption, renderTextElement } from '../../smithchart/utils/helper';\nimport { SmithchartRect, LineSegment, PointRegion, DataLabelTextOptions } from '../../smithchart/utils/utils';\nimport { _getEpsilonValue, PathOption, RectOption, getAnimationFunction, templateAnimate } from '../../smithchart/utils/helper';\nimport { animationComplete } from '../../smithchart/model/constant';\nimport { DataLabel } from '../../smithchart/series/datalabel';\nimport { Animation } from '@syncfusion/ej2-base';\nimport { textRender, seriesRender } from '../model/constant';\nvar SeriesRender = /** @class */ (function () {\n    function SeriesRender() {\n        this.xValues = [];\n        this.yValues = [];\n        this.pointsRegion = [];\n        this.lineSegments = [];\n        this.location = [];\n        this.dataLabel = new DataLabel();\n    }\n    SeriesRender.prototype.processData = function (series) {\n        var dataArray = series.dataSource;\n        var resistance = series.resistance;\n        var reactance = series.reactance;\n        var tooltip = series.tooltipMappingName;\n        series.points = [];\n        for (var i = 0; i < dataArray.length; i++) {\n            series.points.push({\n                resistance: dataArray[i][resistance],\n                reactance: dataArray[i][reactance],\n                tooltip: dataArray[i][tooltip]\n            });\n        }\n    };\n    /* eslint-disable  */\n    SeriesRender.prototype.draw = function (smithchart, axisRender, bounds) {\n        var groupElement = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + '_seriesCollections' });\n        var resistantCx;\n        var reactanceCy;\n        var series = smithchart.series;\n        var seriesLength = series.length;\n        var chartAreaRadius = axisRender.areaRadius;\n        var interSectPoint;\n        var index;\n        for (var m = 0; m < seriesLength; m++) {\n            var seriesIndex = m;\n            if (series[m].dataSource && series[m].resistance && series[m].reactance) {\n                this.processData(series[m]);\n            }\n            this.pointsRegion[m] = [];\n            this.location[m] = [];\n            for (var j = 0; j < series[m].points.length; j++) {\n                this.xValues[j] = series[m].points[j]['resistance'];\n                this.yValues[j] = series[m].points[j]['reactance'];\n            }\n            var chartAreaCx = axisRender.circleCenterX;\n            var chartAreaCy = axisRender.circleCenterY;\n            var diameter = axisRender.areaRadius * 2;\n            var reactanceStartPoint = {\n                x: chartAreaCx + ((smithchart.renderType === 'Impedance') ?\n                    chartAreaRadius : -chartAreaRadius), y: chartAreaCy\n            };\n            var resistantCy = chartAreaCy;\n            var reactanceCx = reactanceStartPoint.x;\n            for (var k = 0; k < series[m].points.length; k++) {\n                var resistance = this.xValues[k];\n                var resistantR = (diameter * (1 / (resistance + 1))) / 2;\n                var reactance = this.yValues[k];\n                var reactanceR = Math.abs(((1 / reactance) * diameter) / 2);\n                if (smithchart.renderType === 'Impedance') {\n                    reactanceCy = reactance > 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n                    resistantCx = (axisRender.circleLeftX + diameter - resistantR);\n                }\n                else {\n                    reactanceCy = reactance < 0 ? chartAreaCy - reactanceR : chartAreaCy + reactanceR;\n                    resistantCx = (axisRender.circleLeftX + resistantR);\n                }\n                interSectPoint = axisRender.intersectingCirclePoints(reactanceCx, reactanceCy, reactanceR, resistantCx, resistantCy, resistantR, smithchart.renderType);\n                var epsilon = _getEpsilonValue();\n                if (Math.abs(reactance) < epsilon) {\n                    interSectPoint.x = (smithchart.renderType === 'Impedance') ?\n                        resistantCx - resistantR : resistantCx + resistantR;\n                    interSectPoint.y = chartAreaCy;\n                }\n                this.pointsRegion[m][k] = new PointRegion();\n                this.pointsRegion[m][k] = { point: interSectPoint, x: resistance, y: reactance };\n                this.location[m][k] = { x: interSectPoint.x, y: interSectPoint.y };\n            }\n            for (var i = 0; i < series[m].points.length - 1; i++) {\n                index = i + 1;\n                this.lineSegments[i] = new LineSegment();\n                this.lineSegments[i] = { x1: this.xValues[i], y1: this.yValues[i], x2: this.xValues[index], y2: this.yValues[index] };\n            }\n            smithchart.svgObject.appendChild(groupElement);\n            this.drawSeries(smithchart, seriesIndex, groupElement, bounds);\n        }\n        for (var j = 0; j < smithchart.series.length; j++) {\n            if (smithchart.series[j].enableSmartLabels && smithchart.series[j].marker.dataLabel.visible) {\n                var gdlcEle = smithchart.renderer.createGroup({\n                    'id': smithchart.element.id + '_svg'\n                        + '_series' + j + '_Datalabel' + '_connectorLines'\n                });\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n                if (element) {\n                    element.setAttribute('aria-label', ('Smithchart with ' + series[j].points.length + 'Points'));\n                    element.appendChild(gdlcEle);\n                }\n                this.dataLabel.calculateSmartLabels(this.dataLabel.labelOptions[j], j);\n                for (var k = 0; k < smithchart.series[j].points.length; k++) {\n                    var currentPoint = this.dataLabel.labelOptions[j]['textOptions'][k];\n                    if ((currentPoint.xPosition + currentPoint.width) > (smithchart.chartArea.x + smithchart.chartArea.width)\n                        || currentPoint.xPosition < smithchart.chartArea.x || currentPoint.yPosition < smithchart.chartArea.y ||\n                        currentPoint.yPosition + currentPoint.height > smithchart.chartArea.y + smithchart.chartArea.height) {\n                        this.dataLabel.labelOptions[j].textOptions[k].connectorFlag = false;\n                        this.dataLabel.labelOptions[j].textOptions[k].visible = false;\n                    }\n                    if (currentPoint['connectorFlag']) {\n                        this.dataLabel.drawConnectorLines(smithchart, j, k, currentPoint, gdlcEle);\n                    }\n                }\n            }\n        }\n        var _loop_1 = function (j) {\n            var dataLabel = smithchart.series[j].marker.dataLabel;\n            if (smithchart.series[j].marker.dataLabel.visible) {\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + j);\n                var gdEle_1 = smithchart.renderer.createGroup({\n                    'id': smithchart.element.id + '_svg'\n                        + '_series' + j + '_Datalabel'\n                });\n                gdEle_1.setAttribute('aria-hidden', 'true');\n                if (element) {\n                    element.appendChild(gdEle_1);\n                }\n                var _loop_2 = function (k) {\n                    var currentPoint = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n                    if (!dataLabel.template && currentPoint.visible) {\n                        var options_1 = new DataLabelTextOptions();\n                        options_1 = this_1.dataLabel.labelOptions[j]['textOptions'][k];\n                        var font_1 = dataLabel.textStyle;\n                        var x = options_1['xPosition'];\n                        var y = options_1['yPosition'];\n                        var id = smithchart.element.id + '_Series' + j + '_Points' + k + '_dataLabel' + '_symbol' + k;\n                        var fill = dataLabel['fill'] ? dataLabel['fill'] : (smithchart.series[j].fill ||\n                            smithchart.seriesColors[j % smithchart.seriesColors.length]);\n                        var border = smithchart.series[j].marker.dataLabel.border;\n                        var rectOptions = new RectOption(id, fill, border, options_1['opacity'], new SmithchartRect(x, y, options_1['width'], options_1['height']));\n                        var dataEle = smithchart.renderer.drawRectangle(rectOptions);\n                        gdEle_1.appendChild(dataEle);\n                        var textRenderEventArgs = {\n                            text: options_1['text'],\n                            x: options_1['x'],\n                            y: options_1['y'],\n                            seriesIndex: j,\n                            pointIndex: k,\n                            name: textRender,\n                            cancel: false\n                        };\n                        var textRenderSuccess = function (args) {\n                            if (!args.cancel) {\n                                var textoptions = new TextOption(options_1['id'], args.x, args.y, 'start', args.text);\n                                var color = font_1.color ? font_1.color : smithchart.themeStyle.dataLabel;\n                                var element_1 = renderTextElement(textoptions, font_1, color, gdEle_1);\n                                gdEle_1.appendChild(element_1);\n                            }\n                        };\n                        textRenderSuccess.bind(this_1);\n                        smithchart.trigger(textRender, textRenderEventArgs, textRenderSuccess);\n                    }\n                    else if (dataLabel.template) {\n                        var element_2 = document.getElementById(dataLabel.template + '_seriesIndex' + j + '_pointIndex' +\n                            k + smithchart.element.id);\n                        element_2.style.left = this_1.dataLabel.labelOptions[j]['textOptions'][k].xPosition + 'px';\n                        element_2.style.top = this_1.dataLabel.labelOptions[j]['textOptions'][k].yPosition + 'px';\n                    }\n                };\n                for (var k = 0; k < smithchart.series[j].points.length; k++) {\n                    _loop_2(k);\n                }\n            }\n        };\n        var this_1 = this;\n        for (var j = 0; j < smithchart.series.length; j++) {\n            _loop_1(j);\n        }\n        for (var i = 0; i < smithchart.series.length; i++) {\n            if (smithchart.series[i].enableAnimation && smithchart.animateSeries) {\n                if (smithchart.series[i].marker.dataLabel.template) {\n                    this.animateDataLabelTemplate(i, smithchart);\n                }\n                var element = document.getElementById(smithchart.element.id + '_svg' + '_seriesCollection' + i);\n                element.setAttribute('aria-label', ('Smithchart with ' + series[i].points.length + 'Points'));\n                this.performAnimation(smithchart, element, i);\n            }\n        }\n    };\n    SeriesRender.prototype.drawSeries = function (smithchart, seriesindex, groupElement, bounds) {\n        var _this = this;\n        var gsEle = smithchart.renderer.createGroup({\n            'id': smithchart.element.id + '_svg' + '_seriesCollection' + seriesindex,\n            'clip-path': 'url(#' + smithchart.element.id + '_ChartSeriesClipRect_' +\n                seriesindex + ')'\n        });\n        gsEle.setAttribute('visibility', smithchart.series[seriesindex].visibility);\n        gsEle.setAttribute('aria-label', ('Smithchart with ' + smithchart.series[seriesindex].points.length + ' points'));\n        groupElement.appendChild(gsEle);\n        var sb = '';\n        var path;\n        var marker = smithchart.series[seriesindex].marker;\n        var element;\n        var count = smithchart.series[seriesindex].points.length - 1;\n        for (var i = 0; i < count; i++) {\n            var point1 = this.pointsRegion[seriesindex][i]['point'];\n            var point2 = this.pointsRegion[seriesindex][i + 1]['point'];\n            sb = sb + ('M' + ' ' + (point1.x) + ' ' + (point1.y) + ' ' + 'L' +\n                ' ' + (point2.x) + ' ' + (point2.y) + ' ');\n        }\n        path = sb.toString();\n        var fill = smithchart.series[seriesindex].fill || smithchart.seriesColors[seriesindex % smithchart.seriesColors.length];\n        var seriesEventArgs = {\n            text: smithchart.series[seriesindex].name,\n            fill: fill,\n            name: seriesRender,\n            cancel: false\n        };\n        var seriesRenderSuccess = function (args) {\n            if (!args.cancel) {\n                var options = new PathOption(smithchart.element.id + '_series' + seriesindex + '_points', 'none', smithchart.series[seriesindex].width, seriesEventArgs.fill, smithchart.series[seriesindex].opacity, 'none', path);\n                _this.clipRectElement = smithchart.renderer.drawClipPath(new RectOption(smithchart.element.id + '_ChartSeriesClipRect_' + seriesindex, 'transparent', { width: 1, color: 'Gray' }, 1, {\n                    x: bounds.x, y: bounds.y,\n                    width: smithchart.availableSize.width,\n                    height: smithchart.availableSize.height\n                }));\n                gsEle.appendChild(_this.clipRectElement);\n                var gspEle = smithchart.renderer.createGroup({ 'id': smithchart.element.id + '_svg' + seriesindex });\n                element = smithchart.renderer.drawPath(options);\n                gspEle.appendChild(element);\n                gsEle.appendChild(gspEle);\n            }\n        };\n        seriesRenderSuccess.bind(this);\n        smithchart.trigger(seriesRender, seriesEventArgs, seriesRenderSuccess);\n        var markerrender = new Marker();\n        markerrender.drawMarker(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex]);\n        this.dataLabel.drawDataLabel(smithchart, seriesindex, gsEle, this.pointsRegion[seriesindex], bounds);\n    };\n    SeriesRender.prototype.animateDataLabelTemplate = function (seriesindex, smithchart) {\n        var length = smithchart.series[seriesindex].points.length;\n        var opacity = 0;\n        var delay = 0;\n        var duration = parseFloat(smithchart.series[seriesindex].animationDuration);\n        for (var i = 0; i < length; i++) {\n            var element = document.getElementById(smithchart.series[seriesindex].marker.dataLabel.template +\n                '_seriesIndex' + seriesindex + '_pointIndex' + i + smithchart.element.id);\n            element.style.visibility = 'hidden';\n            templateAnimate(smithchart, element, delay, duration, 'FadeIn');\n            // this.fadein(element);\n        }\n    };\n    /*private fadein(element: HTMLElement): void {\n      let op: number = 0.1;\n      element.style.display = 'block';\n      let timer: number = setInterval( (): void => {\n            if (op >= 1) {\n                clearInterval(timer);\n            }\n            element.style.opacity = op.toString();\n            element.style.filter = 'alpha(opacity=' + op * 100 + ')';\n            op += op * 0.1;\n    }, 50);\n    \n    }*/\n    SeriesRender.prototype.performAnimation = function (smithchart, gsEle, seriesIndex) {\n        var animation = new Animation({});\n        var element = document.getElementById('container_svg_seriesCollections');\n        var clipRect = gsEle.childNodes[0].childNodes[0].childNodes[0];\n        var effect = getAnimationFunction('Linear');\n        var reveffect = getAnimationFunction('Reverse');\n        var width = +clipRect.getAttribute('width');\n        var x = +clipRect.getAttribute('x');\n        var value;\n        animation.animate(clipRect, {\n            duration: parseFloat(smithchart.series[seriesIndex].animationDuration),\n            progress: function (args) {\n                if (smithchart.renderType === 'Impedance') {\n                    value = effect(args.timeStamp - args.delay, 0, width, args.duration);\n                    clipRect.setAttribute('width', value.toString());\n                }\n                else {\n                    value = reveffect(args.timeStamp - args.delay, width, 0, args.duration);\n                    clipRect.setAttribute('x', value.toString());\n                }\n            },\n            end: function (model) {\n                if (smithchart.renderType === 'Impedance') {\n                    clipRect.setAttribute('width', width.toString());\n                }\n                else {\n                    clipRect.setAttribute('x', x.toString());\n                }\n                var event = {\n                    cancel: false,\n                    name: animationComplete,\n                    smithchart: smithchart\n                };\n                smithchart.trigger(animationComplete, event);\n            }\n        });\n    };\n    SeriesRender.prototype.getLocation = function (seriesindex, pointIndex) {\n        var x;\n        var y;\n        x = this.location[seriesindex][pointIndex].x;\n        y = this.location[seriesindex][pointIndex].y;\n        return { x: x, y: y };\n    };\n    return SeriesRender;\n}());\nexport { SeriesRender };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}