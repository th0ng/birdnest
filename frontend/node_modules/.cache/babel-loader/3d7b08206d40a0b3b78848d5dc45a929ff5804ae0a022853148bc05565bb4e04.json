{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */function (_super) {\n  __extends(Selection, _super);\n  /**\n   * Constructor for selection module.\n   *\n   * @private\n   */\n  function Selection(chart) {\n    var _this = _super.call(this, chart) || this;\n    _this.isdrawRect = true;\n    _this.multiDataIndexes = [];\n    _this.pathIndex = 0;\n    _this.seriesIndex = 0;\n    _this.count = -1;\n    _this.dragRectArray = [];\n    _this.filterArray = [];\n    _this.totalSelectedPoints = [];\n    _this.chart = chart;\n    _this.renderer = chart.renderer;\n    var mode = chart.selectionMode;\n    _this.isMultiDrag = chart.isMultiSelect && mode.indexOf('Drag') > -1;\n    _this.addEventListener();\n    return _this;\n  }\n  /**\n   * Binding events for selection module.\n   */\n  Selection.prototype.addEventListener = function () {\n    if (this.chart.isDestroyed || this.chart.stockChart && this.chart.stockChart.onPanning) {\n      return;\n    }\n    var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n    this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n    this.chart.on(cancelEvent, this.mouseLeave, this);\n    this.chart.on('click', this.mouseClick, this);\n    this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n    this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n  };\n  /**\n   * Chart mouse down\n   */\n  Selection.prototype.mousedown = function (e) {\n    var chart = this.chart;\n    if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n      return;\n    }\n    if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n      this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n    }\n  };\n  /**\n   * UnBinding events for selection module.\n   */\n  Selection.prototype.removeEventListener = function () {\n    if (this.chart.isDestroyed) {\n      return;\n    }\n    this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n    this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n    this.chart.off('click', this.mouseClick);\n    this.chart.off(Browser.touchStartEvent, this.mousedown);\n    this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n  };\n  /**\n   * To find private variable values\n   */\n  Selection.prototype.initPrivateVariables = function (chart) {\n    this.styleId = chart.element.id + '_ej2_chart_selection';\n    this.unselected = chart.element.id + '_ej2_deselected';\n    this.closeIconId = chart.element.id + '_ej2_drag_close';\n    this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n    this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n    this.draggedRect = chart.element.id + '_ej2_drag_rect';\n    this.lassoPath = chart.element.id + '_ej2_drag_path';\n    this.selectedDataIndexes = [];\n    this.rectPoints = null;\n    this.isSeriesMode = chart.selectionMode === 'Series';\n  };\n  /**\n   * Method to select the point and series.\n   *\n   * @returns {void}\n   */\n  Selection.prototype.invokeSelection = function (chart) {\n    this.initPrivateVariables(chart);\n    this.series = extend({}, chart.visibleSeries, null, true);\n    this.seriesStyles();\n    this.currentMode = chart.selectionMode;\n    if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n      this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n    }\n  };\n  Selection.prototype.generateStyle = function (series) {\n    if (series) {\n      if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n        this.unselected = series.unSelectedStyle || this.unselected;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        this.unselected = series.nonHighlightStyle || this.unselected;\n      }\n      return series.selectionStyle || this.styleId + '_series_' + series.index;\n    }\n    return 'undefined';\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.selectDataIndex = function (chart, indexes) {\n    for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n      var index = indexes_1[_i];\n      this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n    }\n  };\n  /**\n   *  Method to get the selected index element\n   *\n   * @private\n   */\n  Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n    var series = chart.series[index.series];\n    elementId = series.type !== 'Scatter' && series.type !== 'Bubble' && marker ? elementId + '_Symbol' + suffix : elementId;\n    return [getElement(elementId), (series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible ? getElement(elementId + '1') : null];\n  };\n  /**\n   *  Method to get the selected cluster element\n   *\n   * @private\n   */\n  Selection.prototype.getClusterElements = function (chart, index) {\n    var clusters = [];\n    var seriesStyle;\n    var selectedElements;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      if (series.visible) {\n        index = new Index(series.index, index.point);\n        if (series.isRectSeries) {\n          clusters.push(this.getElementByIndex(chart, index)[0]);\n        }\n        clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n        seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n        selectedElements = document.querySelectorAll('.' + seriesStyle);\n        this.findTrackballElements(selectedElements, seriesStyle);\n        var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n        if (!chart.isMultiSelect && selectedElements.length > 0 && selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n          this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n        }\n      }\n    }\n    return clusters;\n  };\n  /**\n   *  Method to get trackball elements\n   *\n   * @private\n   */\n  Selection.prototype.findTrackballElements = function (selectedElements, className) {\n    var trackballElements;\n    var elements;\n    for (var i = 0; i < selectedElements.length; i++) {\n      if (!isNullOrUndefined(selectedElements[i])) {\n        trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ? [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n        if (trackballElements.length > 0) {\n          elements = [];\n          for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n            if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n              elements.push(trackballElements[i_1]);\n            }\n          }\n          this.removeStyles(elements);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selected element\n   *\n   * @private\n   */\n  Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n    if (suffix === void 0) {\n      suffix = '';\n    }\n    if (this.isSeriesMode) {\n      return this.getSeriesElements(series);\n    } else if (this.currentMode === 'Cluster') {\n      return this.getClusterElements(chart, index);\n    } else {\n      return this.getElementByIndex(chart, index, suffix, marker);\n    }\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\n    if (eventType === 'click') {\n      this.currentMode = this.chart.selectionMode;\n      this.styleId = this.chart.element.id + '_ej2_chart_selection';\n    } else if (eventType === 'mousemove' || eventType === 'pointermove') {\n      this.currentMode = this.chart.highlightMode;\n      this.highlightDataIndexes = [];\n      this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n    }\n    if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n      if (eventType === 'click') {\n        return false;\n      }\n    }\n    if ((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0]) {\n      var parentNodeId = targetElem.parentNode.id;\n      var isElement = void 0;\n      if (targetElem.parentNode) {\n        isElement = parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0 ? true : false;\n      }\n      for (var i = 0; i < this.previousSelectedEle.length; i++) {\n        if (this.previousSelectedEle[i].hasAttribute('class')) {\n          if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 && (isElement || eventType === 'click')) {\n            this.previousSelectedEle[i].removeAttribute('class');\n            if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n              if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                  this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                }\n              } else {\n                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n              }\n            }\n            this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n          } else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n            this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n          }\n        }\n      }\n    }\n    return true;\n  };\n  Selection.prototype.mouseClick = function (event) {\n    this.calculateSelectedElements(event.target, event.type);\n  };\n  /**\n   * To find the selected element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.calculateSelectedElements = function (targetElement, eventType) {\n    if (isNullOrUndefined(targetElement)) {\n      return;\n    }\n    if (this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None' || targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n      return;\n    }\n    if (eventType === 'mousemove' || eventType === 'pointermove') {\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') && (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 || targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n        return;\n      }\n    }\n    this.isAlreadySelected(targetElement, eventType);\n    if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') == -1) {\n      var element = void 0;\n      if (targetElement.id.indexOf('_Trackball_1') > -1) {\n        element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n        element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n      } else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n        return null;\n      }\n      this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n    }\n  };\n  /**\n   *  Method to perform the selection\n   *\n   * @private\n   */\n  Selection.prototype.performSelection = function (index, chart, element) {\n    this.isSeriesMode = this.currentMode === 'Series';\n    if (chart.series[index.series].type === 'BoxAndWhisker' && element && element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n      element = element.parentNode;\n    }\n    if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element && element.id === this.chart.element.id + '_Series_' + index.series) {\n      var className = this.generateStyle(chart.series[index.series]);\n      var selectionEle = document.querySelectorAll('.' + className);\n      this.findTrackballElements(selectionEle, className);\n      this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n    }\n    switch (this.currentMode) {\n      case 'Series':\n        this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n        this.selectionComplete(chart, index, this.currentMode);\n        this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        break;\n      case 'Point':\n        if (!isNaN(index.point) && element) {\n          var pointElements = [];\n          pointElements.push(element);\n          if (pointElements[0] !== null && chart.series[index.series].marker.visible && (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n            if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n              pointElements.push(getElement(element.id + '_Symbol'));\n            } else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n              pointElements.push(getElement(element.id.replace('_Symbol', '')));\n            }\n          }\n          this.selection(chart, index, pointElements);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n      case 'Cluster':\n        if (!isNaN(index.point)) {\n          this.clusterSelection(chart, index);\n          this.selectionComplete(chart, index, this.currentMode);\n          this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        break;\n    }\n  };\n  /**\n   *  Method to get the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n    var points;\n    var pointIndex;\n    var seriesIndex;\n    var selectedPointValues = [];\n    var yValue;\n    var selectedPointX;\n    if (selectionMode === 'Cluster') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n            pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n            seriesIndex = series.index;\n            points = series.points;\n            if (!isNaN(pointIndex)) {\n              yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n              selectedPointX = points[pointIndex].xValue;\n              if (chart.primaryXAxis.valueType === 'Category') {\n                selectedPointX = points[pointIndex].x.toLocaleString();\n              } else if (chart.primaryXAxis.valueType === 'DateTime') {\n                selectedPointX = new Date(points[pointIndex].xValue);\n              }\n              if (series.category !== 'Indicator') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: yValue,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n              if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                selectedPointValues.push({\n                  x: selectedPointX,\n                  y: points[pointIndex].regions[0].y,\n                  seriesIndex: seriesIndex,\n                  pointIndex: pointIndex\n                });\n              }\n            }\n          }\n        }\n      }\n    } else if (selectionMode === 'Series') {\n      if (chart.isMultiSelect) {\n        for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n          seriesIndex = this.selectedDataIndexes[i].series;\n          selectedPointValues.push({\n            seriesIndex: seriesIndex\n          });\n        }\n      } else {\n        seriesIndex = this.selectedDataIndexes.length > 0 ? this.selectedDataIndexes[0].series : 0;\n        selectedPointValues.push({\n          seriesIndex: seriesIndex\n        });\n      }\n    } else if (selectionMode === 'Point') {\n      for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n        pointIndex = this.selectedDataIndexes[i].point;\n        seriesIndex = this.selectedDataIndexes[i].series;\n        var series = chart.series[seriesIndex];\n        points = series.points;\n        if (!isNaN(pointIndex)) {\n          selectedPointX = points[pointIndex].xValue;\n          yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[pointIndex].yValue : points[pointIndex].regions[0].y;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[pointIndex].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[pointIndex].xValue);\n          }\n          selectedPointValues.push({\n            x: selectedPointX,\n            y: yValue,\n            seriesIndex: seriesIndex,\n            pointIndex: pointIndex\n          });\n        }\n      }\n    }\n    var args = {\n      name: selectionComplete,\n      selectedDataValues: selectedPointValues,\n      cancel: false\n    };\n    chart.trigger(selectionComplete, args);\n  };\n  /**\n   *  Method to perform selection\n   *\n   * @private\n   */\n  Selection.prototype.selection = function (chart, index, selectedElements) {\n    if (!(this.currentMode === 'Lasso')) {\n      if (!chart.isMultiSelect && this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 && chart.selectionMode !== 'None') {\n        this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n      }\n    }\n    var indexValue = this.rangeColorMappingEnabled() ? 0 : index.series;\n    if (!isNullOrUndefined(selectedElements[0])) {\n      if (chart.series[indexValue].isRectSeries) {\n        if (selectedElements[0].id) {\n          if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n            selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n          } else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n            if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n              selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n            }\n          }\n        }\n      }\n      var isAdd = void 0;\n      var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n      var pClassName = selectedElements[0].parentNode && (selectedElements[0].parentNode.getAttribute('class') || '');\n      if (className !== '' && this.currentMode !== 'Cluster') {\n        this.findTrackballElements(selectedElements, className);\n      }\n      if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles(selectedElements);\n      } else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n        this.removeStyles([selectedElements[0].parentNode]);\n      } else {\n        this.previousSelectedEle = chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight ? selectedElements : [];\n        this.applyStyles(selectedElements);\n        isAdd = true;\n      }\n      if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n        this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n      } else {\n        this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n      }\n    }\n  };\n  /**\n   *  Method to get the cluster selection element\n   *\n   * @private\n   */\n  Selection.prototype.clusterSelection = function (chart, index) {\n    this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n  };\n  /**\n   * Method to remove the multi selected elements\n   *\n   * @private\n   */\n  Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n    var series;\n    for (var i = 0; i < index.length; i++) {\n      series = seriesCollection[index[i].series];\n      if (this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode) || this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false) || !this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false)) {\n        this.removeStyles(this.findElements(chart, series, index[i], '', false));\n        if (series.marker.visible) {\n          this.removeStyles(this.findElements(chart, series, index[i], '', true));\n        }\n        index.splice(i, 1);\n        i--;\n      }\n    }\n  };\n  /**\n   * Method to remove the selection\n   *\n   * @private\n   */\n  Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\n    if (isLegend === void 0) {\n      isLegend = false;\n    }\n    if (index === void 0) {\n      index = 0;\n    }\n    var visibility = this.checkVisibility(this.highlightDataIndexes, this.chart) || this.checkVisibility(this.selectedDataIndexes, this.chart); // legend click scenario\n    for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n      var series = visibleSeries_1[_i];\n      var legendIndex = void 0;\n      var legendStrokeColor = void 0;\n      if (this.rangeColorMappingEnabled()) {\n        if (isLegend == false) {\n          legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\n          legendStrokeColor = series.points[index].interior;\n        } else {\n          legendIndex = index;\n          legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\n        }\n      } else {\n        legendIndex = series.index;\n        legendStrokeColor = this.chart.visibleSeries[series.index].interior;\n      }\n      if (series.visible) {\n        this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n          this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n        }\n      }\n    }\n  };\n  /**\n   * Method to add the add/remove class to element\n   *\n   * @private\n   */\n  Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n    if (isLegend === void 0) {\n      isLegend = true;\n    }\n    if (series === void 0) {\n      series = 0;\n    }\n    if (legendStrokeColor === void 0) {\n      legendStrokeColor = '#D3D3D3';\n    }\n    var children = this.isSeriesMode ? [element] : element.childNodes || element;\n    if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n      children = element.childNodes || element;\n    }\n    var elementClassName;\n    var parentClassName;\n    var legendShape;\n    var selectElement = element;\n    for (var i = 0; i < children.length; i++) {\n      elementClassName = children[i].getAttribute('class') || '';\n      parentClassName = children[i].parentNode.getAttribute('class') || '';\n      if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n        className = elementClassName.indexOf('selection') > 0 || elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n        className = parentClassName.indexOf('selection') > 0 || parentClassName.indexOf('highlight') > 0 ? parentClassName : className;\n      }\n      if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n        this.addSvgClass(children[i], this.unselected);\n      } else {\n        selectElement = children[i];\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n      }\n      if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n        this.removeSvgClass(children[i], this.unselected);\n        this.removeSvgClass(children[i].parentNode, this.unselected);\n        this.addSvgClass(children[i], className);\n      }\n    }\n    if (element.id.indexOf('Symbol') > -1) {\n      if (element.querySelectorAll('.' + className)[0] && element.querySelectorAll('.' + className)[0].getAttribute('class') === className) {\n        var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n        var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n        if (seriesClassName.indexOf(this.unselected) > -1) {\n          this.removeSvgClass(symbolEle, this.unselected);\n        }\n      }\n    }\n    if (this.control.legendModule && this.control.legendSettings.visible) {\n      legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n      if (legendShape) {\n        if (legendShape.hasAttribute('class')) {\n          this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n          if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n            legendShape.setAttribute('stroke', legendStrokeColor);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', legendStrokeColor);\n            }\n          }\n        }\n        elementClassName = selectElement.getAttribute('class') || '';\n        parentClassName = selectElement.parentNode.getAttribute('class') || '';\n        if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n          this.addSvgClass(legendShape, this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight ? className : this.unselected);\n          this.removeSvgClass(legendShape, className);\n          if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n        } else {\n          this.removeSvgClass(legendShape, this.unselected);\n          if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n            legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n            if (this.chart.highlightPattern === 'None') {\n              legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n            }\n          }\n          if (elementClassName === '' && parentClassName === '' || elementClassName.trim() === 'EJ2-Trackball') {\n            this.removeSvgClass(legendShape, className);\n          } else {\n            this.addSvgClass(legendShape, className);\n            if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n              legendShape.setAttribute('stroke', this.chart.highlightColor);\n              if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                legendShape.setAttribute('fill', this.chart.highlightColor);\n              }\n            }\n          }\n        }\n        var legendItemsId = void 0;\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\n            legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\n            if (legendShape != legendItemsId) {\n              this.addSvgClass(legendItemsId, this.unselected);\n            } else if (isLegend == true) {\n              this.addSvgClass(legendItemsId, className);\n            }\n            if (elementClassName.indexOf(className) === -1 && isLegend == false) {\n              this.removeSvgClass(legendItemsId, this.unselected);\n            }\n          }\n        }\n        if (isLegend && parentClassName.indexOf(className) > -1) {\n          this.addSvgClass(legendShape, className);\n        }\n      }\n    }\n  };\n  /**\n   *  Method to apply the styles\n   *\n   * @private\n   */\n  Selection.prototype.applyStyles = function (elements) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      if (element) {\n        this.removeSvgClass(element.parentNode, this.unselected);\n        this.removeSvgClass(element, this.unselected);\n        if (this.chart.series[0].pointColorMapping == 'fill' || this.rangeColorMappingEnabled()) {\n          var className = this.getSelectionClass(element.id);\n          var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n          var pattern = void 0;\n          var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n          if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n            pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n          }\n          if (element.id.indexOf('legend') == -1 && element.id.indexOf('Group') == -1 && pattern != null) {\n            for (var i = 1; i < pattern.children.length; i++) {\n              pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n              pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n            }\n          }\n        }\n        this.addSvgClass(element, this.getSelectionClass(element.id));\n        if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.chart.highlightColor);\n            }\n          } else {\n            element.setAttribute('fill', this.chart.highlightColor);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to get the selection class\n   *\n   * @private\n   */\n  Selection.prototype.getSelectionClass = function (id) {\n    return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n  };\n  /**\n   *  Method to remove styles\n   *\n   * @private\n   */\n  Selection.prototype.removeStyles = function (elements) {\n    for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n      var element = elements_2[_i];\n      if (element) {\n        this.removeSvgClass(element, this.getSelectionClass(element.id));\n        if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n          if (element.id.indexOf('Group') > 0) {\n            for (var i = 0; i < element.children.length; i++) {\n              element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n            }\n          } else {\n            element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n          }\n        }\n      }\n    }\n  };\n  /**\n   *  Method to remove the selected data index\n   *\n   * @private\n   */\n  Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n    for (var i = 0; i < indexes.length; i++) {\n      if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n        indexes.splice(i, 1);\n        i--;\n      }\n    }\n    if (isAdd) {\n      indexes.push(index);\n    }\n  };\n  /**\n   *  Method to get the equal index\n   *\n   * @private\n   */\n  Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n    return (first.series === second.series || this.currentMode === 'Cluster' && !checkSeriesOnly) && (checkSeriesOnly || first.point === second.point);\n  };\n  /**\n   * To redraw the selected points.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n    this.isSeriesMode = oldMode === 'Series';\n    if (!isNullOrUndefined(oldMode)) {\n      if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n        chart.isRedrawSelection = false;\n      } else {\n        chart.isRedrawSelection = true;\n      }\n    }\n    var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n    var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n    if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n      this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n      selectedDataIndexes = highlightDataIndexes;\n    } else {\n      this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries, false);\n    this.selectDataIndex(chart, selectedDataIndexes);\n  };\n  /** @private */\n  Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n    if (eventType === 'mousemove') {\n      if (targetElement.id.indexOf('text') > 1) {\n        targetElement = getElement(targetElement.id.replace('text', 'shape'));\n      }\n      if (targetElement.id.indexOf('marker') > 1) {\n        targetElement = getElement(targetElement.id.replace('_marker', ''));\n      }\n      if (targetElement.id.indexOf('g') > 1) {\n        targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n      }\n      if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 || targetElement.getAttribute('class').indexOf('selection') > -1)) {\n        return;\n      }\n      this.currentMode = this.chart.highlightMode;\n    }\n    var isPreSelected = this.isAlreadySelected(targetElement, eventType);\n    if (isPreSelected) {\n      var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n      var selectedElements = document.querySelectorAll('.' + seriesStyle);\n      this.isSeriesMode = this.currentMode === 'Series';\n      var isBlurEffectNeeded = true;\n      if (selectedElements.length > 0) {\n        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n      } else {\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n          var element = _a[_i];\n          if (element.index !== series && !chart.isMultiSelect) {\n            seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n            selectedElements = document.querySelectorAll('.' + seriesStyle);\n            this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n          }\n        }\n        var seriesElements = [];\n        if (this.rangeColorMappingEnabled()) {\n          for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\n            var point = a[i];\n            if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\n              seriesElements.push(point);\n            }\n          }\n          for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n            var element = seriesElements_1[_b];\n            if (isNullOrUndefined(element)) {\n              return;\n            }\n            this.checkSelectionElements(element, seriesStyle, false, true, series);\n          }\n        } else {\n          seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n          for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\n            var seriesElement = seriesElements_2[_c];\n            if (isNullOrUndefined(seriesElement)) {\n              return;\n            }\n            this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n          }\n        }\n        this.isSeriesMode = true;\n        this.selection(chart, new Index(series, NaN), seriesElements);\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\n      }\n    }\n  };\n  /** @private */\n  Selection.prototype.rangeColorMappingEnabled = function () {\n    if (this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && this.chart.rangeColorSettings[0].colors.length > 0 && (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' || this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble')) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n    if (selectedElements.length > 0) {\n      var elements = [];\n      for (var i = 0; i < selectedElements.length; i++) {\n        elements.push(selectedElements[i]);\n      }\n      this.removeStyles(elements);\n      this.isSeriesMode = true;\n      this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var value = _a[_i];\n        seriesStyle = this.generateStyle(value);\n        if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n          for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n            var element = elements_3[_b];\n            this.checkSelectionElements(element, seriesStyle, true, true, series);\n          }\n          isBlurEffectNeeded = false;\n          break;\n        }\n      }\n      if (isBlurEffectNeeded) {\n        this.isSeriesMode = chart.selectionMode === 'Series';\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n      }\n    }\n  };\n  /** @private */\n  Selection.prototype.getSeriesElements = function (series) {\n    var seriesElements = [series.seriesElement];\n    if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    } else if (series.marker.visible && series.isRectSeries) {\n      seriesElements.push(series.symbolElement);\n    }\n    return seriesElements;\n  };\n  /** @private */\n  Selection.prototype.indexFinder = function (id) {\n    var ids = ['NaN', 'NaN'];\n    if (id.indexOf('SeriesGroup') > -1) {\n      ids = id.split('SeriesGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('SymbolGroup') > -1) {\n      ids = id.split('SymbolGroup');\n      ids[0] = ids[1];\n    } else if (id.indexOf('_Point_') > -1) {\n      ids = id.split('_Series_')[1].split('_Point_');\n    } else if (id.indexOf('_Series_') > -1) {\n      ids[0] = id.split('_Series_')[1];\n    } else if (id.indexOf('_chart_legend_shape_') > -1) {\n      ids = id.split('_chart_legend_shape_');\n      ids[0] = ids[1];\n    }\n    return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n  };\n  /**\n   * Drag selection that returns the selected data.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n    this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n    var isLasso = chart.selectionMode === 'Lasso';\n    var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n    this.removeOffset(rect, axisOffset);\n    var points;\n    var index;\n    var selectedPointValues = [];\n    var selectedSeriesValues = [];\n    this.isSeriesMode = false;\n    var isDragResize = chart.allowMultiSelection && (this.rectGrabbing || this.resizing);\n    this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n    if (dragRect.width && dragRect.height && !isClose) {\n      var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n      this.removeOffset(rt, axisOffset);\n      this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n    }\n    var _loop_1 = function (series) {\n      if (series.visible) {\n        points = series.points;\n        selectedPointValues = [];\n        var xAxisOffset_1;\n        var yAxisOffset_1;\n        if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) && !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n          xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n          yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n        } else {\n          xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n          yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n        }\n        for (var j = 0; j < points.length; j++) {\n          var yValue = series.type !== 'RangeArea' || 'SplineRangeArea' ? points[j].yValue : points[j].regions[0].y;\n          var isCurrentPoint = void 0;\n          var selectedPointX = points[j].xValue;\n          if (chart.primaryXAxis.valueType === 'Category') {\n            selectedPointX = points[j].x.toLocaleString();\n          } else if (chart.primaryXAxis.valueType === 'DateTime') {\n            selectedPointX = new Date(points[j].xValue);\n          }\n          if (series.type === 'BoxAndWhisker') {\n            isCurrentPoint = points[j].regions.some(function (region) {\n              return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n            });\n          } else {\n            if (chart.selectionMode === 'Lasso') {\n              isCurrentPoint = points[j].isSelect;\n            } else {\n              isCurrentPoint = chart.allowMultiSelection ? this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) : points[j].symbolLocations.some(function (location) {\n                return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n              });\n            }\n          }\n          if (isCurrentPoint && series.category !== 'Indicator') {\n            index = new Index(series.index, points[j].index);\n            this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: yValue\n            });\n          }\n          if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n            selectedPointValues.push({\n              x: selectedPointX,\n              y: points[j].regions[0].y\n            });\n          }\n        }\n        selectedSeriesValues.push(selectedPointValues);\n      }\n    };\n    var this_1 = this;\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      _loop_1(series);\n    }\n    this.blurEffect(chart.element.id, chart.visibleSeries);\n    var x = isLasso ? chart.mouseDownX : dragRect.x + dragRect.width;\n    var y = isLasso ? chart.mouseDownY : dragRect.y;\n    if (!isClose) {\n      this.createCloseButton(x, y);\n    }\n    var args = {\n      name: dragComplete,\n      selectedDataValues: selectedSeriesValues,\n      cancel: false\n    };\n    chart.trigger(dragComplete, args);\n  };\n  Selection.prototype.removeOffset = function (rect, clip) {\n    rect.x -= clip.x;\n    rect.y -= clip.y;\n  };\n  Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n    var location = points.symbolLocations[0];\n    for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n      var rect = rectCollection_1[_i];\n      if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Method to draw dragging rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n    var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n    var border = chart.chartArea.border.width;\n    var rectFill = chart.themeStyle.selectionRectFill;\n    var rectStroke = chart.themeStyle.selectionRectStroke;\n    var isLasso = chart.selectionMode === 'Lasso';\n    if (this.isdrawRect) {\n      cartesianLayout.x = cartesianLayout.x - border / 2;\n      cartesianLayout.y = cartesianLayout.y - border / 2;\n      cartesianLayout.width = cartesianLayout.width + border;\n      cartesianLayout.height = cartesianLayout.height + border;\n      this.isdrawRect = false;\n    }\n    switch (chart.selectionMode) {\n      case 'DragX':\n        dragRect.y = cartesianLayout.y;\n        dragRect.height = cartesianLayout.height;\n        break;\n      case 'DragY':\n        dragRect.x = cartesianLayout.x;\n        dragRect.width = cartesianLayout.width;\n        break;\n    }\n    if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n      return null;\n    }\n    var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n    if (chart.allowMultiSelection && isDragMode) {\n      var element = void 0;\n      var dragGroup = void 0;\n      var multiGroup = getElement(this.multiRectGroup);\n      if (!multiGroup) {\n        multiGroup = chart.svgRenderer.createGroup({\n          id: this.multiRectGroup\n        });\n        chart.svgObject.appendChild(multiGroup);\n      }\n      if (this.rectGrabbing || this.resizing) {\n        var rectElement = void 0;\n        rectElement = getElement(this.draggedRect + this.targetIndex);\n        if (rectElement.nextSibling) {\n          remove(rectElement.nextSibling);\n        }\n        this.setAttributes(rectElement, dragRect);\n      } else if (!getElement(this.draggedRectGroup + this.count)) {\n        dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup + this.count\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n      }\n      if (!(chart.selectionMode === 'Lasso')) {\n        element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, {\n          color: rectStroke,\n          width: 1\n        }, 1, dragRect));\n        element.style.cursor = \"move\";\n      } else {\n        element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n      }\n      if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n        getElement(this.draggedRectGroup + this.count).appendChild(element);\n      } else if (!this.rectGrabbing && !this.resizing) {\n        dragGroup.appendChild(element);\n      }\n    } else {\n      var element = isLasso ? getElement(this.lassoPath) : getElement(this.draggedRect);\n      if (this.closeIcon) {\n        removeElement(this.closeIconId);\n      }\n      if (element) {\n        if (isLasso) {\n          element.setAttribute('d', this.path);\n        } else {\n          this.setAttributes(element, dragRect);\n        }\n      } else {\n        var dragGroup = chart.svgRenderer.createGroup({\n          id: this.draggedRectGroup\n        });\n        var svgElement = document.getElementById(chart.element.id + '_series_svg');\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n        chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n        if (!(chart.selectionMode === 'Lasso')) {\n          element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, {\n            color: rectStroke,\n            width: 1\n          }, 1, dragRect));\n        } else {\n          element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n        }\n        //element.setAttribute('style', 'cursor:move;');\n        dragGroup.appendChild(element);\n      }\n    }\n  };\n  /**\n   * To get drag selected group element index from its id\n   *\n   * @param {string} id element id\n   */\n  Selection.prototype.getIndex = function (id) {\n    var i;\n    for (i = id.length - 1; i > 0; i--) {\n      var x = Number(id[i]);\n      if (!isNaN(x)) {\n        continue;\n      } else {\n        break;\n      }\n    }\n    var index = +id.substr(i + 1, id.length - 1);\n    return index;\n  };\n  Selection.prototype.createCloseButton = function (x, y) {\n    var isMultiDrag = this.chart.allowMultiSelection;\n    var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n    var isDrag = this.rectGrabbing || this.resizing;\n    var closeIcon = this.chart.svgRenderer.createGroup({\n      id: this.closeIconId + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      style: 'cursor:pointer; visibility: visible;'\n    });\n    closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''), '#FFFFFF', {\n      color: circleStroke,\n      width: 1\n    }, 1, x, y, 10)));\n    var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) + ' L ' + (x + 4) + ' ' + (y - 4);\n    closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n      id: this.closeIconId + '_cross' + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''),\n      d: direction,\n      stroke: circleStroke,\n      'stroke-width': 2,\n      fill: circleStroke\n    }));\n    this.closeIcon = closeIcon;\n    var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? isDrag ? this.targetIndex : this.count : ''));\n    if (pathElement) {\n      pathElement.appendChild(closeIcon);\n    }\n  };\n  /**\n   * Method to remove dragged element.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\n    if (targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1 && eventType.indexOf('move') === -1) {\n      var isSelectedvalues = true;\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(targetElement.id);\n        var multiRectGroupElement = getElement(this.multiRectGroup);\n        remove(getElement(this.draggedRectGroup + index));\n        this.dragRectArray[index] = null;\n        this.filterArray[index] = null;\n        this.totalSelectedPoints[index] = null;\n        if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n          removeElement(multiRectGroupElement);\n          this.dragRectArray = [];\n          this.filterArray = [];\n          this.totalSelectedPoints = [];\n        }\n        if (this.currentMode === 'Lasso') {\n          if (this.multiDataIndexes[index] != null) {\n            for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n              this.multiDataIndexes[index][i].isSelect = false;\n            }\n          }\n          this.multiDataIndexes[index] = null;\n          for (var j = 0; j < this.multiDataIndexes.length; j++) {\n            if (this.multiDataIndexes[j] != null) {\n              isSelectedvalues = false;\n              for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                this.multiDataIndexes[j][k].isSelect = true;\n              }\n            }\n          }\n          this.calculateDragSelectedElements(chart, this.dragRect, true);\n        } else if (this.filterArray.length) {\n          for (var i = 0; i < this.filterArray.length; i++) {\n            if (this.filterArray[i]) {\n              isSelectedvalues = false;\n              this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n            }\n          }\n        } else {\n          this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n        }\n      } else {\n        remove(getElement(this.draggedRectGroup));\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n      }\n      this.blurEffect(chart.element.id, chart.visibleSeries);\n      this.changeCursorStyle(false, chart.svgObject, 'auto');\n      if (!chart.allowMultiSelection || isSelectedvalues) {\n        this.rectPoints = null;\n      }\n    }\n  };\n  /**\n   * Method to resize the drag rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n    var rect;\n    if (chart.allowMultiSelection && target.id.indexOf('_ej2_drag_rect') > -1 || this.dragRectArray[this.targetIndex]) {\n      if (target.id.indexOf('_ej2_drag_rect') > -1) {\n        this.targetIndex = this.getIndex(target.id);\n      }\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    }\n    if (!chart.allowMultiSelection) {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    if (rect) {\n      var resize = this.findResizeMode(chart.svgObject, rect, location);\n      if (this.resizing) {\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, chart.chartAxisLayoutPanel.seriesClipRect);\n        this.drawDraggingRect(chart, rect);\n        this.dragRect = rect;\n      }\n      if (tapped) {\n        this.resizing = resize;\n      }\n    } else {\n      return;\n    }\n  };\n  Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n    var cursorStyle = 'se-resize';\n    var resize = false;\n    if (!this.resizing) {\n      var resizeEdges = [new Rect(rect.x, rect.y, rect.width - 5, 5), new Rect(rect.x, rect.y, 5, rect.height), new Rect(rect.x, rect.y + rect.height - 5, rect.width - 5, 5), new Rect(rect.x + rect.width - 5, rect.y + 5, 5, rect.height - 15), new Rect(rect.x + rect.width - 10, rect.y + rect.height - 10, 10, 10)]; //corner\n      for (var i = 0; i < resizeEdges.length; i++) {\n        if (withInBounds(location.x, location.y, resizeEdges[i])) {\n          cursorStyle = i === 4 ? cursorStyle : i % 2 === 0 ? 'ns-resize' : 'ew-resize';\n          resize = true;\n          this.resizeMode = i;\n          break;\n        }\n      }\n    } else {\n      var x = rect.x;\n      var y = rect.y;\n      var width = location.x - x;\n      var height = location.y - y;\n      switch (this.resizeMode) {\n        case 0:\n          height = Math.abs(rect.height + rect.y - location.y);\n          rect.y = Math.min(rect.height + rect.y, location.y);\n          rect.height = height;\n          break;\n        case 1:\n          width = Math.abs(rect.width + rect.x - location.x);\n          rect.x = Math.min(rect.width + rect.x, location.x);\n          rect.width = width;\n          break;\n        case 2:\n          rect.height = Math.abs(height);\n          rect.y = Math.min(location.y, y);\n          break;\n        case 3:\n          rect.width = Math.abs(width);\n          rect.x = Math.min(location.x, x);\n          break;\n        case 4:\n          rect.width = Math.abs(width);\n          rect.height = Math.abs(height);\n          rect.x = Math.min(location.x, x);\n          rect.y = Math.min(location.y, y);\n          break;\n      }\n    }\n    if (this.currentMode !== 'Lasso') {\n      this.changeCursorStyle(resize, getElement(this.chart.allowMultiSelection ? this.draggedRect + this.targetIndex : this.draggedRect), cursorStyle);\n    }\n    this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n    return resize;\n  };\n  Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n    cursorStyle = isResize ? cursorStyle : this.control.svgObject === rectelement ? 'auto' : 'move';\n    if (rectelement) {\n      rectelement.style.cursor = cursorStyle;\n    }\n  };\n  Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n    index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n    var seriesElements;\n    for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n      var series = seriesCollection_1[_i];\n      if (series.visible) {\n        seriesElements = this.getSeriesElements(series);\n        this.removeStyles(seriesElements);\n        for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\n          var seriesElement = seriesElements_3[_a];\n          this.removeStyles(this.getChildren(seriesElement));\n        }\n      }\n    }\n  };\n  Selection.prototype.setAttributes = function (ele, object) {\n    var keys = Object.keys(object);\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var key = keys_1[_i];\n      ele.setAttribute(key, object[key]);\n    }\n  };\n  /**\n   * Method to move the dragged rect.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n    var rect;\n    if ((this.resizing || this.rectGrabbing) && chart.allowMultiSelection) {\n      var r = this.dragRectArray[this.targetIndex];\n      rect = new Rect(r.x, r.y, r.width, r.height);\n    } else {\n      rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n    }\n    rect.x -= grabbedPoint.x - chart.mouseX;\n    rect.y -= grabbedPoint.y - chart.mouseY;\n    rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (doDrawing) {\n      this.drawDraggingRect(chart, rect, target);\n    } else {\n      this.calculateDragSelectedElements(chart, rect);\n    }\n  };\n  Selection.prototype.mouseLeave = function (event) {\n    this.completeSelection(event.target, event.type);\n  };\n  /**\n   * To complete the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.completeSelection = function (target, eventType) {\n    var chart = this.chart;\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    this.currentMode = chart.selectionMode;\n    if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n      this.calculateDragSelectedElements(chart, this.dragRect);\n    } else if (!chart.allowMultiSelection && this.rectGrabbing && this.rectPoints.width && this.rectPoints.height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    } else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n      this.draggedRectMoved(chart, this.dragRect);\n    }\n    if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n      if (this.path.indexOf('L') !== -1) {\n        if (!chart.allowMultiSelection) {\n          getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath));\n        } else if (getElement(this.lassoPath + this.count)) {\n          getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n          this.pointChecking(getElement(this.lassoPath + this.count));\n        }\n        if (this.dragging || this.resizing) {\n          this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n      }\n    }\n    this.dragging = false;\n    this.rectGrabbing = false;\n    this.resizing = false;\n    this.removeDraggedElements(chart, target, eventType);\n  };\n  Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n    return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n  };\n  /** @private */\n  Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n    var mode = chart.selectionMode;\n    this.currentMode = chart.selectionMode;\n    this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) && chart.chartAreaType !== 'PolarRadar';\n    var target = event.target;\n    this.path = undefined;\n    if (this.dragging) {\n      this.count = getElement(this.multiRectGroup) ? this.count + 1 : 0;\n      this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n      if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > seriesClipRect.x + seriesClipRect.width || chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > seriesClipRect.y + seriesClipRect.height) {\n        this.dragging = false;\n      }\n    }\n    if (mode === 'Lasso') {\n      for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n        var series = _a[_i];\n        if (series.visible) {\n          for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n            var point = _c[_b];\n            if (!chart.allowMultiSelection) {\n              point.isSelect = false;\n            }\n          }\n        }\n      }\n    }\n    if (!(mode === 'Lasso')) {\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n        this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n        this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n      }\n      if (chart.allowMultiSelection) {\n        var index = this.getIndex(target.id);\n        this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n        if (this.dragRectArray.length && this.isDragRect(target.id)) {\n          this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n          this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n        }\n      }\n    }\n  };\n  Selection.prototype.isDragRect = function (id) {\n    return id.indexOf('_ej2_drag_rect') > -1;\n  };\n  /** @private */\n  Selection.prototype.mouseMove = function (event) {\n    var chart = this.chart;\n    var target = event.target;\n    var eventType = event.type;\n    this.highlightChart(target, eventType);\n    if (chart.selectionMode === 'None') {\n      return;\n    }\n    if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n      event.preventDefault();\n    }\n    this.selectionAndDrag(chart, target, eventType);\n  };\n  /**\n   * highlight parts\n   *\n   * @private\n   */\n  Selection.prototype.highlightChart = function (target, eventType) {\n    if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\n      if (!isNullOrUndefined(target)) {\n        if (target.id.indexOf('text') > 1) {\n          target = getElement(target.id.replace('text', 'shape'));\n        }\n        if (target.hasAttribute('class') && (target.getAttribute('class').indexOf('highlight') > -1 || target.getAttribute('class').indexOf('selection') > -1)) {\n          return;\n        }\n        this.calculateSelectedElements(target, eventType);\n        if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 && target.id.indexOf(\"_chart_legend_\") == -1 && target.id.indexOf(\"_Series_\") == -1) {\n          this.removeLegendHighlightStyles();\n        }\n      }\n      return;\n    }\n  };\n  /**\n   * selection and drag selection\n   *\n   * @private\n   */\n  Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\n    var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n    if (insideMoving) {\n      if (this.rectGrabbing && !this.resizing) {\n        this.draggedRectMoved(chart, this.dragRect, true, target);\n      } else if (this.dragging && !this.resizing) {\n        if (chart.selectionMode === 'Lasso') {\n          this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        } else {\n          this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n          this.drawDraggingRect(chart, this.dragRect, target);\n        }\n      }\n      if (this.rectPoints && !chart.allowMultiSelection) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      } else if (chart.allowMultiSelection && !this.dragging || this.resizing) {\n        this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n      }\n    } else {\n      this.completeSelection(target, eventType);\n    }\n  };\n  /**\n   * remove highlighted legend when not focused.\n   *\n   * @private\n   */\n  Selection.prototype.removeLegendHighlightStyles = function () {\n    this.chart.highlightModule.highlightDataIndexes = [];\n    var elementCollection;\n    for (var i = 0; i < this.chart.series.length; i++) {\n      elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n      if (this.selectedDataIndexes.length === 0) {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute(\"class\"));\n          }\n        }\n        elementCollection = document.getElementsByClassName(this.unselected);\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute(\"class\"));\n          }\n        }\n      } else {\n        elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n        while (elementCollection.length > 0) {\n          var element = elementCollection[0];\n          if (element) {\n            this.removeSvgClass(element, element.getAttribute(\"class\"));\n            this.addSvgClass(element, this.unselected);\n          }\n        }\n      }\n    }\n  };\n  Selection.prototype.getPath = function (startX, startY, endX, endY) {\n    if (this.dragging) {\n      if (this.path) {\n        this.path = this.path + ' L' + endX + ' ' + endY;\n      } else {\n        this.path = 'M ' + startX + ' ' + startY;\n      }\n    }\n  };\n  Selection.prototype.pointChecking = function (path) {\n    var _this = this;\n    var chart = this.chart;\n    var element;\n    var svgRect = getElement(chart.svgId).getBoundingClientRect();\n    var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n    var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n    this.multiDataIndexes[this.count] = [];\n    for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n      var series = _a[_i];\n      series.points.filter(function (point) {\n        // To check whether the point have symbol location value or not.\n        if (point.symbolLocations && point.symbolLocations.length) {\n          element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n        }\n        if (element === path) {\n          point.isSelect = true;\n          if (_this.chart.allowMultiSelection && _this.currentMode === 'Lasso') {\n            _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n            _this.seriesIndex++;\n          }\n        } else if (!chart.allowMultiSelection) {\n          point.isSelect = false;\n        }\n      });\n    }\n    this.seriesIndex = 0;\n  };\n  /**\n   * Get module name.\n   *\n   * @private\n   */\n  Selection.prototype.getModuleName = function () {\n    return 'Selection';\n  };\n  /**\n   * To destroy the selection.\n   *\n   * @returns {void}\n   * @private\n   */\n  Selection.prototype.destroy = function () {\n    this.removeEventListener();\n    // Destroy method performed here\n  };\n\n  return Selection;\n}(BaseSelection);\nexport { Selection };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Browser","remove","extend","isNullOrUndefined","ChartLocation","RectOption","CircleOption","withInBounds","getDraggedRectLocation","removeElement","getElement","Rect","PathOption","Index","dragComplete","selectionComplete","BaseSelection","Selection","_super","chart","_this","call","isdrawRect","multiDataIndexes","pathIndex","seriesIndex","count","dragRectArray","filterArray","totalSelectedPoints","renderer","mode","selectionMode","isMultiDrag","isMultiSelect","indexOf","addEventListener","isDestroyed","stockChart","onPanning","cancelEvent","isPointer","on","touchMoveEvent","mouseMove","mouseLeave","mouseClick","touchStartEvent","mousedown","touchEndEvent","e","isPointMouseDown","isChartDrag","isDoubleTap","isTouch","rectPoints","dragStart","chartAxisLayoutPanel","seriesClipRect","mouseDownX","mouseDownY","removeEventListener","off","initPrivateVariables","styleId","element","id","unselected","closeIconId","draggedRectGroup","multiRectGroup","draggedRect","lassoPath","selectedDataIndexes","isSeriesMode","invokeSelection","series","visibleSeries","seriesStyles","currentMode","selectDataIndex","concatIndexes","generateStyle","unSelectedStyle","highlightMode","legendSettings","enableHighlight","nonHighlightStyle","selectionStyle","index","indexes","_i","indexes_1","length","performSelection","getElementByIndex","suffix","marker","elementId","point","type","visible","getClusterElements","clusters","seriesStyle","selectedElements","_a","isRectSeries","push","document","querySelectorAll","findTrackballElements","clusterIndex","removeSelection","className","trackballElements","elements","i","parentNode","slice","i_1","removeStyles","findElements","getSeriesElements","isAlreadySelected","targetElem","eventType","highlightDataIndexes","previousSelectedEle","parentNodeId","isElement","hasAttribute","getAttribute","removeAttribute","highlightColor","highlightPattern","j","children","setAttribute","control","indexFinder","interior","addOrRemoveIndex","event","calculateSelectedElements","target","targetElement","split","selectionEle","blurEffect","selection","isNaN","pointElements","replace","clusterSelection","points","pointIndex","selectedPointValues","yValue","selectedPointX","regions","y","xValue","primaryXAxis","valueType","x","toLocaleString","Date","category","args","name","selectedDataValues","cancel","trigger","removeMultiSelectElements","indexValue","rangeColorMappingEnabled","getElementById","isAdd","pClassName","getSelectionClass","applyStyles","currentIndex","seriesCollection","toEquals","splice","chartId","isLegend","visibility","checkVisibility","visibleSeries_1","legendIndex","legendStrokeColor","keys","rangeColorPoints","checkSelectionElements","childNodes","elementClassName","parentClassName","legendShape","selectElement","addSvgClass","removeSvgClass","classList","symbolEle","seriesClassName","legendModule","trim","legendItemsId","rangeColorSettings","elements_1","pointColorMapping","patternName","selectionPattern","pattern","parseInt","elements_2","first","second","checkSeriesOnly","redrawSelection","oldMode","chartRedraw","isRedrawSelection","removeSelectedElements","legendSelection","isPreSelected","isBlurEffectNeeded","seriesElements","a","seriesElement","_b","seriesElements_1","_c","seriesElements_2","NaN","colors","value","elements_3","symbolElement","ids","calculateDragSelectedElements","dragRect","isClose","isLasso","rect","width","height","axisOffset","removeOffset","selectedSeriesValues","isDragResize","allowMultiSelection","rectGrabbing","resizing","targetIndex","rt","_loop_1","xAxisOffset_1","yAxisOffset_1","isTransposed","xAxis","yAxis","isCurrentPoint","some","region","isSelect","this_1","isPointSelect","symbolLocations","location","createCloseButton","clip","xAxisOffset","yAxisOffset","rectCollection","rectCollection_1","drawDraggingRect","cartesianLayout","border","chartArea","rectFill","themeStyle","selectionRectFill","rectStroke","selectionRectStroke","isDragMode","dragGroup","multiGroup","svgRenderer","createGroup","svgObject","appendChild","rectElement","nextSibling","setAttributes","svgElement","enableCanvas","drawRectangle","color","style","cursor","drawPath","path","closeIcon","getIndex","Number","substr","circleStroke","selectionCircleStroke","isDrag","drawCircle","direction","stroke","fill","pathElement","removeDraggedElements","isSelectedvalues","multiRectGroupElement","childElementCount","k","changeCursorStyle","resizingSelectionRect","tapped","r","resize","findResizeMode","chartSvgObject","cursorStyle","resizeEdges","resizeMode","Math","abs","min","isResize","rectelement","seriesCollection_1","seriesElements_3","getChildren","ele","object","keys_1","key","draggedRectMoved","grabbedPoint","doDrawing","mouseX","mouseY","completeSelection","dragging","pointChecking","getDragRect","chartAreaType","undefined","isDragRect","highlightChart","isIos","isIos7","preventDefault","selectionAndDrag","highlightModule","removeLegendHighlightStyles","insideMoving","getPath","elementCollection","getElementsByClassName","startX","startY","endX","endY","svgRect","svgId","getBoundingClientRect","offsetX","max","left","offsetY","top","filter","elementFromPoint","getModuleName","destroy"],"sources":["/Users/thonghoangdanh/FullStack/birdnest/node_modules/@syncfusion/ej2-charts/src/chart/user-interaction/selection.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable jsdoc/require-returns */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable valid-jsdoc */\n/* eslint-disable @typescript-eslint/no-inferrable-types */\n/**\n * Selection src file\n */\nimport { Browser } from '@syncfusion/ej2-base';\nimport { remove } from '@syncfusion/ej2-base';\nimport { extend, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { ChartLocation, RectOption, CircleOption, withInBounds, getDraggedRectLocation, removeElement, getElement } from '../../common/utils/helper';\nimport { Rect, PathOption } from '@syncfusion/ej2-svg-base';\nimport { Index } from '../../common/model/base';\nimport { dragComplete, selectionComplete } from '../../common/model/constants';\nimport { BaseSelection } from '../../common/user-interaction/selection';\n/**\n * `Selection` module handles the selection for chart.\n *\n * @private\n */\nvar Selection = /** @class */ (function (_super) {\n    __extends(Selection, _super);\n    /**\n     * Constructor for selection module.\n     *\n     * @private\n     */\n    function Selection(chart) {\n        var _this = _super.call(this, chart) || this;\n        _this.isdrawRect = true;\n        _this.multiDataIndexes = [];\n        _this.pathIndex = 0;\n        _this.seriesIndex = 0;\n        _this.count = -1;\n        _this.dragRectArray = [];\n        _this.filterArray = [];\n        _this.totalSelectedPoints = [];\n        _this.chart = chart;\n        _this.renderer = chart.renderer;\n        var mode = chart.selectionMode;\n        _this.isMultiDrag = chart.isMultiSelect && (mode.indexOf('Drag') > -1);\n        _this.addEventListener();\n        return _this;\n    }\n    /**\n     * Binding events for selection module.\n     */\n    Selection.prototype.addEventListener = function () {\n        if (this.chart.isDestroyed || (this.chart.stockChart && this.chart.stockChart.onPanning)) {\n            return;\n        }\n        var cancelEvent = Browser.isPointer ? 'pointerleave' : 'mouseleave';\n        this.chart.on(Browser.touchMoveEvent, this.mouseMove, this);\n        this.chart.on(cancelEvent, this.mouseLeave, this);\n        this.chart.on('click', this.mouseClick, this);\n        this.chart.on(Browser.touchStartEvent, this.mousedown, this);\n        this.chart.on(Browser.touchEndEvent, this.mouseLeave, this);\n    };\n    /**\n     * Chart mouse down\n     */\n    Selection.prototype.mousedown = function (e) {\n        var chart = this.chart;\n        if (chart.isPointMouseDown || chart.selectionMode === 'None' || chart.isChartDrag) {\n            return;\n        }\n        if (chart.isDoubleTap || !chart.isTouch || this.rectPoints) {\n            this.dragStart(chart, chart.chartAxisLayoutPanel.seriesClipRect, chart.mouseDownX, chart.mouseDownY, e);\n        }\n    };\n    /**\n     * UnBinding events for selection module.\n     */\n    Selection.prototype.removeEventListener = function () {\n        if (this.chart.isDestroyed) {\n            return;\n        }\n        this.chart.off(Browser.touchMoveEvent, this.mouseMove);\n        this.chart.off('pointerleave' || 'mouseleave', this.mouseLeave);\n        this.chart.off('click', this.mouseClick);\n        this.chart.off(Browser.touchStartEvent, this.mousedown);\n        this.chart.off(Browser.touchEndEvent, this.mouseLeave);\n    };\n    /**\n     * To find private variable values\n     */\n    Selection.prototype.initPrivateVariables = function (chart) {\n        this.styleId = chart.element.id + '_ej2_chart_selection';\n        this.unselected = chart.element.id + '_ej2_deselected';\n        this.closeIconId = chart.element.id + '_ej2_drag_close';\n        this.draggedRectGroup = chart.element.id + '_ej2_drag_group';\n        this.multiRectGroup = chart.element.id + '_ej2_drag_multi_group';\n        this.draggedRect = chart.element.id + '_ej2_drag_rect';\n        this.lassoPath = chart.element.id + '_ej2_drag_path';\n        this.selectedDataIndexes = [];\n        this.rectPoints = null;\n        this.isSeriesMode = chart.selectionMode === 'Series';\n    };\n    /**\n     * Method to select the point and series.\n     *\n     * @returns {void}\n     */\n    Selection.prototype.invokeSelection = function (chart) {\n        this.initPrivateVariables(chart);\n        this.series = extend({}, chart.visibleSeries, null, true);\n        this.seriesStyles();\n        this.currentMode = chart.selectionMode;\n        if (!(chart.selectionMode.indexOf('Drag') > -1)) {\n            this.selectDataIndex(chart, this.concatIndexes(chart.selectedDataIndexes, this.selectedDataIndexes));\n        }\n    };\n    Selection.prototype.generateStyle = function (series) {\n        if (series) {\n            if (this.styleId.indexOf('selection') > 1 && this.chart.selectionMode !== 'None') {\n                this.unselected = series.unSelectedStyle || this.unselected;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                this.unselected = series.nonHighlightStyle || this.unselected;\n            }\n            return (series.selectionStyle || this.styleId + '_series_' + series.index);\n        }\n        return 'undefined';\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectDataIndex = function (chart, indexes) {\n        for (var _i = 0, indexes_1 = indexes; _i < indexes_1.length; _i++) {\n            var index = indexes_1[_i];\n            this.performSelection(index, chart, this.getElementByIndex(chart, index)[0]);\n        }\n    };\n    /**\n     *  Method to get the selected index element\n     *\n     * @private\n     */\n    Selection.prototype.getElementByIndex = function (chart, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        var elementId = chart.element.id + '_Series_' + index.series + '_Point' + '_' + index.point;\n        var series = chart.series[index.series];\n        elementId = (series.type !== 'Scatter' && series.type !== 'Bubble' && marker) ? (elementId + '_Symbol' + suffix) : elementId;\n        return [getElement(elementId), ((series.type === 'RangeArea' || series.type === 'SplineRangeArea') && series.marker.visible) ?\n                getElement(elementId + '1') : null];\n    };\n    /**\n     *  Method to get the selected cluster element\n     *\n     * @private\n     */\n    Selection.prototype.getClusterElements = function (chart, index) {\n        var clusters = [];\n        var seriesStyle;\n        var selectedElements;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            if (series.visible) {\n                index = new Index(series.index, index.point);\n                if (series.isRectSeries) {\n                    clusters.push(this.getElementByIndex(chart, index)[0]);\n                }\n                clusters.push(this.getElementByIndex(chart, index, '', series.marker.visible)[0]);\n                seriesStyle = this.generateStyle(chart.visibleSeries[index.series]);\n                selectedElements = document.querySelectorAll('.' + seriesStyle);\n                this.findTrackballElements(selectedElements, seriesStyle);\n                var clusterIndex = series.marker.visible && series.isRectSeries ? 2 : 1;\n                if (!chart.isMultiSelect && selectedElements.length > 0 &&\n                    selectedElements[0].id !== clusters[clusters.length - clusterIndex].id) {\n                    this.removeSelection(chart, index.series, selectedElements, seriesStyle, true);\n                }\n            }\n        }\n        return clusters;\n    };\n    /**\n     *  Method to get trackball elements\n     *\n     * @private\n     */\n    Selection.prototype.findTrackballElements = function (selectedElements, className) {\n        var trackballElements;\n        var elements;\n        for (var i = 0; i < selectedElements.length; i++) {\n            if (!isNullOrUndefined(selectedElements[i])) {\n                trackballElements = !isNullOrUndefined(selectedElements[i].parentNode) ?\n                    [].slice.call(selectedElements[0].parentNode.querySelectorAll('.' + className)) : [];\n                if (trackballElements.length > 0) {\n                    elements = [];\n                    for (var i_1 = 0; i_1 < trackballElements.length; i_1++) {\n                        if (trackballElements[i_1].id.indexOf('Trackball') > -1) {\n                            elements.push(trackballElements[i_1]);\n                        }\n                    }\n                    this.removeStyles(elements);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selected element\n     *\n     * @private\n     */\n    Selection.prototype.findElements = function (chart, series, index, suffix, marker) {\n        if (suffix === void 0) { suffix = ''; }\n        if (this.isSeriesMode) {\n            return this.getSeriesElements(series);\n        }\n        else if (this.currentMode === 'Cluster') {\n            return this.getClusterElements(chart, index);\n        }\n        else {\n            return this.getElementByIndex(chart, index, suffix, marker);\n        }\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.isAlreadySelected = function (targetElem, eventType) {\n        if (eventType === 'click') {\n            this.currentMode = this.chart.selectionMode;\n            this.styleId = this.chart.element.id + '_ej2_chart_selection';\n        }\n        else if (eventType === 'mousemove' || eventType === 'pointermove') {\n            this.currentMode = this.chart.highlightMode;\n            this.highlightDataIndexes = [];\n            this.styleId = this.chart.element.id + '_ej2_chart_highlight';\n        }\n        if (this.chart.highlightMode !== 'None' && this.chart.selectionMode === 'None') {\n            if (eventType === 'click') {\n                return false;\n            }\n        }\n        if (((this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) && this.previousSelectedEle && this.previousSelectedEle[0])) {\n            var parentNodeId = targetElem.parentNode.id;\n            var isElement = void 0;\n            if (targetElem.parentNode) {\n                isElement = (parentNodeId.indexOf('SeriesGroup') > 0 || parentNodeId.indexOf('SymbolGroup') > 0) ? true : false;\n            }\n            for (var i = 0; i < this.previousSelectedEle.length; i++) {\n                if (this.previousSelectedEle[i].hasAttribute('class')) {\n                    if (this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1 &&\n                        (isElement || eventType === 'click')) {\n                        this.previousSelectedEle[i].removeAttribute('class');\n                        if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                            if (this.previousSelectedEle[i].id.indexOf('Group') > 0) {\n                                for (var j = 0; j < this.previousSelectedEle[i].children.length; j++) {\n                                    this.previousSelectedEle[i].children[j].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                                }\n                            }\n                            else {\n                                this.previousSelectedEle[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(this.previousSelectedEle[i].id).series].interior);\n                            }\n                        }\n                        this.addOrRemoveIndex(this.highlightDataIndexes, this.indexFinder(this.previousSelectedEle[i].id));\n                    }\n                    else if (!isElement && this.previousSelectedEle[i].getAttribute('class').indexOf('highlight') > -1) {\n                        this.performSelection(this.indexFinder(this.previousSelectedEle[i].id), this.chart, this.previousSelectedEle[i]);\n                    }\n                }\n            }\n        }\n        return true;\n    };\n    Selection.prototype.mouseClick = function (event) {\n        this.calculateSelectedElements(event.target, event.type);\n    };\n    /**\n     * To find the selected element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateSelectedElements = function (targetElement, eventType) {\n        if (isNullOrUndefined(targetElement)) {\n            return;\n        }\n        if ((this.chart.selectionMode === 'None' && this.chart.highlightMode === 'None') ||\n            targetElement.id && targetElement.id.indexOf(this.chart.element.id + '_') === -1) {\n            return;\n        }\n        if (eventType === 'mousemove' || eventType === 'pointermove') {\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            if (!isNullOrUndefined(targetElement.parentNode) && targetElement.parentNode.hasAttribute('class') &&\n                (targetElement.parentNode.getAttribute('class').indexOf('highlight') > 0 ||\n                    targetElement.parentNode.getAttribute('class').indexOf('selection') > 0)) {\n                return;\n            }\n        }\n        this.isAlreadySelected(targetElement, eventType);\n        if (targetElement.id && targetElement.id.indexOf('_Series_') > -1 && targetElement.id.indexOf('_Text_') == -1) {\n            var element = void 0;\n            if (targetElement.id.indexOf('_Trackball_1') > -1) {\n                element = getElement(targetElement.id.split('_Trackball_')[0] + '_Symbol');\n                element = isNullOrUndefined(element) ? getElement(targetElement.id.split('_Trackball_')[0]) : element;\n            }\n            else if (targetElement.id.indexOf('_Trackball_0') > -1) {\n                return null;\n            }\n            this.performSelection(this.indexFinder(targetElement.id), this.chart, element || targetElement);\n        }\n    };\n    /**\n     *  Method to perform the selection\n     *\n     * @private\n     */\n    Selection.prototype.performSelection = function (index, chart, element) {\n        this.isSeriesMode = this.currentMode === 'Series';\n        if (chart.series[index.series].type === 'BoxAndWhisker' && element &&\n            element.id === chart.element.id + '_Series_' + index.series + '_Point_' + index.point + '_BoxPath') {\n            element = element.parentNode;\n        }\n        if (chart.series[index.series].type === 'Area' && (this.currentMode === 'Point' || this.currentMode === 'Cluster') && element &&\n            (element.id === this.chart.element.id + '_Series_' + index.series)) {\n            var className = this.generateStyle(chart.series[index.series]);\n            var selectionEle = document.querySelectorAll('.' + className);\n            this.findTrackballElements(selectionEle, className);\n            this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n        }\n        switch (this.currentMode) {\n            case 'Series':\n                this.selection(chart, index, this.getSeriesElements(chart.series[index.series]));\n                this.selectionComplete(chart, index, this.currentMode);\n                this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                break;\n            case 'Point':\n                if (!isNaN(index.point) && element) {\n                    var pointElements = [];\n                    pointElements.push(element);\n                    if (pointElements[0] !== null && chart.series[index.series].marker.visible &&\n                        (chart.series[index.series].type.indexOf('Column') !== -1 || chart.series[index.series].type.indexOf('Bar') !== -1)) {\n                        if (!(element.id.indexOf('_Symbol') !== -1) && getElement(element.id + '_Symbol')) {\n                            pointElements.push(getElement(element.id + '_Symbol'));\n                        }\n                        else if (element.id.indexOf('_Symbol') !== -1 && getElement(element.id.replace('_Symbol', ''))) {\n                            pointElements.push(getElement(element.id.replace('_Symbol', '')));\n                        }\n                    }\n                    this.selection(chart, index, pointElements);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                }\n                break;\n            case 'Cluster':\n                if (!isNaN(index.point)) {\n                    this.clusterSelection(chart, index);\n                    this.selectionComplete(chart, index, this.currentMode);\n                    this.blurEffect(chart.element.id, chart.visibleSeries, false, index.point);\n                }\n                break;\n        }\n    };\n    /**\n     *  Method to get the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.selectionComplete = function (chart, index, selectionMode) {\n        var points;\n        var pointIndex;\n        var seriesIndex;\n        var selectedPointValues = [];\n        var yValue;\n        var selectedPointX;\n        if (selectionMode === 'Cluster') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                        pointIndex = chart.isMultiSelect ? this.selectedDataIndexes[i].point : index.point;\n                        seriesIndex = series.index;\n                        points = series.points;\n                        if (!isNaN(pointIndex)) {\n                            yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                                points[pointIndex].regions[0].y;\n                            selectedPointX = points[pointIndex].xValue;\n                            if (chart.primaryXAxis.valueType === 'Category') {\n                                selectedPointX = points[pointIndex].x.toLocaleString();\n                            }\n                            else if (chart.primaryXAxis.valueType === 'DateTime') {\n                                selectedPointX = new Date(points[pointIndex].xValue);\n                            }\n                            if (series.category !== 'Indicator') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                                    pointIndex: pointIndex\n                                });\n                            }\n                            if (series.type === 'RangeArea' || series.type === 'SplineRangeArea') {\n                                selectedPointValues.push({\n                                    x: selectedPointX, y: points[pointIndex].regions[0].y,\n                                    seriesIndex: seriesIndex, pointIndex: pointIndex\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (selectionMode === 'Series') {\n            if (chart.isMultiSelect) {\n                for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                    seriesIndex = this.selectedDataIndexes[i].series;\n                    selectedPointValues.push({\n                        seriesIndex: seriesIndex\n                    });\n                }\n            }\n            else {\n                seriesIndex = (this.selectedDataIndexes.length > 0) ? this.selectedDataIndexes[0].series : 0;\n                selectedPointValues.push({\n                    seriesIndex: seriesIndex\n                });\n            }\n        }\n        else if (selectionMode === 'Point') {\n            for (var i = 0; i < this.selectedDataIndexes.length; i++) {\n                pointIndex = this.selectedDataIndexes[i].point;\n                seriesIndex = this.selectedDataIndexes[i].series;\n                var series = chart.series[seriesIndex];\n                points = series.points;\n                if (!isNaN(pointIndex)) {\n                    selectedPointX = points[pointIndex].xValue;\n                    yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[pointIndex].yValue :\n                        points[pointIndex].regions[0].y;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[pointIndex].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[pointIndex].xValue);\n                    }\n                    selectedPointValues.push({\n                        x: selectedPointX, y: yValue, seriesIndex: seriesIndex,\n                        pointIndex: pointIndex\n                    });\n                }\n            }\n        }\n        var args = {\n            name: selectionComplete,\n            selectedDataValues: selectedPointValues,\n            cancel: false\n        };\n        chart.trigger(selectionComplete, args);\n    };\n    /**\n     *  Method to perform selection\n     *\n     * @private\n     */\n    Selection.prototype.selection = function (chart, index, selectedElements) {\n        if (!(this.currentMode === 'Lasso')) {\n            if (!chart.isMultiSelect && (this.currentMode.indexOf('Drag') === -1 && this.styleId.indexOf('highlight') === -1 &&\n                chart.selectionMode !== 'None')) {\n                this.removeMultiSelectElements(chart, this.selectedDataIndexes, index, chart.series);\n            }\n        }\n        var indexValue = (this.rangeColorMappingEnabled()) ? 0 : index.series;\n        if (!isNullOrUndefined(selectedElements[0])) {\n            if (chart.series[indexValue].isRectSeries) {\n                if (selectedElements[0].id) {\n                    if (document.getElementById(selectedElements[0].id + '_Symbol')) {\n                        selectedElements.push(getElement(selectedElements[0].id + '_Symbol'));\n                    }\n                    else if (selectedElements[0].id.indexOf('SeriesGroup') !== -1) {\n                        if (document.getElementById(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup'))) {\n                            selectedElements.push(getElement(selectedElements[0].id.replace('SeriesGroup', 'SymbolGroup')));\n                        }\n                    }\n                }\n            }\n            var isAdd = void 0;\n            var className = selectedElements[0] && (selectedElements[0].getAttribute('class') || '');\n            var pClassName = selectedElements[0].parentNode &&\n                (selectedElements[0].parentNode.getAttribute('class') || '');\n            if (className !== '' && this.currentMode !== 'Cluster') {\n                this.findTrackballElements(selectedElements, className);\n            }\n            if (selectedElements[0] && className.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles(selectedElements);\n            }\n            else if (selectedElements[0].parentNode && pClassName.indexOf(this.getSelectionClass(selectedElements[0].id)) > -1) {\n                this.removeStyles([selectedElements[0].parentNode]);\n            }\n            else {\n                this.previousSelectedEle = (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight) ? selectedElements : [];\n                this.applyStyles(selectedElements);\n                isAdd = true;\n            }\n            if (this.styleId.indexOf('highlight') > 0 && (chart.highlightMode !== 'None' || chart.legendSettings.enableHighlight)) {\n                this.addOrRemoveIndex(this.highlightDataIndexes, index, isAdd);\n            }\n            else {\n                this.addOrRemoveIndex(this.selectedDataIndexes, index, isAdd);\n            }\n        }\n    };\n    /**\n     *  Method to get the cluster selection element\n     *\n     * @private\n     */\n    Selection.prototype.clusterSelection = function (chart, index) {\n        this.selection(chart, index, this.getClusterElements(chart, new Index(index.series, index.point)));\n    };\n    /**\n     * Method to remove the multi selected elements\n     *\n     * @private\n     */\n    Selection.prototype.removeMultiSelectElements = function (chart, index, currentIndex, seriesCollection) {\n        var series;\n        for (var i = 0; i < index.length; i++) {\n            series = seriesCollection[index[i].series];\n            if ((this.isSeriesMode && !this.toEquals(index[i], currentIndex, this.isSeriesMode)) ||\n                (this.currentMode === 'Cluster' && !this.toEquals(index[i], currentIndex, false)) ||\n                (!this.isSeriesMode && this.toEquals(index[i], currentIndex, true) && !this.toEquals(index[i], currentIndex, false))) {\n                this.removeStyles(this.findElements(chart, series, index[i], '', false));\n                if (series.marker.visible) {\n                    this.removeStyles(this.findElements(chart, series, index[i], '', true));\n                }\n                index.splice(i, 1);\n                i--;\n            }\n        }\n    };\n    /**\n     * Method to remove the selection\n     *\n     * @private\n     */\n    Selection.prototype.blurEffect = function (chartId, visibleSeries, isLegend, index) {\n        if (isLegend === void 0) { isLegend = false; }\n        if (index === void 0) { index = 0; }\n        var visibility = (this.checkVisibility(this.highlightDataIndexes, this.chart) ||\n            this.checkVisibility(this.selectedDataIndexes, this.chart)); // legend click scenario\n        for (var _i = 0, visibleSeries_1 = visibleSeries; _i < visibleSeries_1.length; _i++) {\n            var series = visibleSeries_1[_i];\n            var legendIndex = void 0;\n            var legendStrokeColor = void 0;\n            if (this.rangeColorMappingEnabled()) {\n                if (isLegend == false) {\n                    legendIndex = Object.keys(series.rangeColorPoints).indexOf(series.points[index].interior);\n                    legendStrokeColor = series.points[index].interior;\n                }\n                else {\n                    legendIndex = index;\n                    legendStrokeColor = document.getElementById(chartId + '_chart_legend_shape_' + index).getAttribute('fill');\n                }\n            }\n            else {\n                legendIndex = series.index;\n                legendStrokeColor = this.chart.visibleSeries[series.index].interior;\n            }\n            if (series.visible) {\n                this.checkSelectionElements(getElement(chartId + 'SeriesGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                if (!isNullOrUndefined(getElement(chartId + 'SymbolGroup' + series.index))) {\n                    this.checkSelectionElements(getElement(chartId + 'SymbolGroup' + series.index), this.generateStyle(series), visibility, isLegend, legendIndex, legendStrokeColor);\n                }\n            }\n        }\n    };\n    /**\n     * Method to add the add/remove class to element\n     *\n     * @private\n     */\n    Selection.prototype.checkSelectionElements = function (element, className, visibility, isLegend, series, legendStrokeColor) {\n        if (isLegend === void 0) { isLegend = true; }\n        if (series === void 0) { series = 0; }\n        if (legendStrokeColor === void 0) { legendStrokeColor = '#D3D3D3'; }\n        var children = (this.isSeriesMode ? [element] : element.childNodes || element);\n        if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n            children = (element.childNodes || element);\n        }\n        var elementClassName;\n        var parentClassName;\n        var legendShape;\n        var selectElement = element;\n        for (var i = 0; i < children.length; i++) {\n            elementClassName = children[i].getAttribute('class') || '';\n            parentClassName = children[i].parentNode.getAttribute('class') || '';\n            if (this.chart.selectionMode !== 'None' && (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight)) {\n                className = elementClassName.indexOf('selection') > 0 ||\n                    elementClassName.indexOf('highlight') > 0 ? elementClassName : className;\n                className = (parentClassName.indexOf('selection') > 0 ||\n                    parentClassName.indexOf('highlight') > 0) ? parentClassName : className;\n            }\n            if (elementClassName.indexOf(className) === -1 &&\n                parentClassName.indexOf(className) === -1 && visibility) {\n                this.addSvgClass(children[i], this.unselected);\n            }\n            else {\n                selectElement = children[i];\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n            }\n            if (children[i].id.indexOf('Trackball') > 0 && selectElement.classList[0] === className) {\n                this.removeSvgClass(children[i], this.unselected);\n                this.removeSvgClass(children[i].parentNode, this.unselected);\n                this.addSvgClass(children[i], className);\n            }\n        }\n        if (element.id.indexOf('Symbol') > -1) {\n            if ((element.querySelectorAll('.' + className)[0]) && element.querySelectorAll('.' + className)[0].getAttribute('class')\n                === className) {\n                var symbolEle = getElement(this.control.element.id + '_Series_' + element.id[element.id.length - 1]);\n                var seriesClassName = symbolEle && symbolEle.hasAttribute('class') ? symbolEle.getAttribute('class') : '';\n                if (seriesClassName.indexOf(this.unselected) > -1) {\n                    this.removeSvgClass(symbolEle, this.unselected);\n                }\n            }\n        }\n        if (this.control.legendModule && this.control.legendSettings.visible) {\n            legendShape = getElement(this.control.element.id + '_chart_legend_shape_' + series);\n            if (legendShape) {\n                if (legendShape.hasAttribute('class')) {\n                    this.removeSvgClass(legendShape, legendShape.getAttribute('class'));\n                    if (!isNullOrUndefined(this.chart.highlightColor && this.chart.highlightColor !== '') && !this.chart.legendSettings.enableHighlight) {\n                        legendShape.setAttribute('stroke', legendStrokeColor);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', legendStrokeColor);\n                        }\n                    }\n                }\n                elementClassName = selectElement.getAttribute('class') || '';\n                parentClassName = selectElement.parentNode.getAttribute('class') || '';\n                if (elementClassName.indexOf(className) === -1 && parentClassName.indexOf(className) === -1 && visibility) {\n                    this.addSvgClass(legendShape, (this.chart.highlightMode === 'None' && this.chart.legendSettings.enableHighlight) ? className : this.unselected);\n                    this.removeSvgClass(legendShape, className);\n                    if (this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                }\n                else {\n                    this.removeSvgClass(legendShape, this.unselected);\n                    if (!isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightColor !== '') {\n                        legendShape.setAttribute('stroke', this.control.visibleSeries[series].interior);\n                        if (this.chart.highlightPattern === 'None') {\n                            legendShape.setAttribute('fill', this.control.visibleSeries[series].interior);\n                        }\n                    }\n                    if ((elementClassName === '' && parentClassName === '') || elementClassName.trim() === 'EJ2-Trackball') {\n                        this.removeSvgClass(legendShape, className);\n                    }\n                    else {\n                        this.addSvgClass(legendShape, className);\n                        if (className.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                            legendShape.setAttribute('stroke', this.chart.highlightColor);\n                            if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightPattern === 'None') {\n                                legendShape.setAttribute('fill', this.chart.highlightColor);\n                            }\n                        }\n                    }\n                }\n                var legendItemsId = void 0;\n                if (this.rangeColorMappingEnabled()) {\n                    for (var i = 0; i < this.chart.rangeColorSettings.length; i++) {\n                        legendItemsId = document.getElementById(this.chart.element.id + '_chart_legend_shape_' + i);\n                        if (legendShape != legendItemsId) {\n                            this.addSvgClass(legendItemsId, this.unselected);\n                        }\n                        else if (isLegend == true) {\n                            this.addSvgClass(legendItemsId, className);\n                        }\n                        if (elementClassName.indexOf(className) === -1 && isLegend == false) {\n                            this.removeSvgClass(legendItemsId, this.unselected);\n                        }\n                    }\n                }\n                if (isLegend && parentClassName.indexOf(className) > -1) {\n                    this.addSvgClass(legendShape, className);\n                }\n            }\n        }\n    };\n    /**\n     *  Method to apply the styles\n     *\n     * @private\n     */\n    Selection.prototype.applyStyles = function (elements) {\n        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n            var element = elements_1[_i];\n            if (element) {\n                this.removeSvgClass(element.parentNode, this.unselected);\n                this.removeSvgClass(element, this.unselected);\n                if (this.chart.series[0].pointColorMapping == 'fill' || this.rangeColorMappingEnabled()) {\n                    var className = this.getSelectionClass(element.id);\n                    var patternName = this.styleId.indexOf('highlight') > 0 ? this.chart.highlightPattern : this.chart.selectionPattern;\n                    var pattern = void 0;\n                    var index = className.indexOf('highlight') > -1 ? parseInt(className.split(this.chart.element.id + '_ej2_chart_highlight_series_')[1], 10) : parseInt(className.split(this.chart.element.id + '_ej2_chart_selection_series_')[1], 10);\n                    if (className.indexOf('highlight') > -1 || className.indexOf('selection') > -1) {\n                        pattern = document.getElementById(this.chart.element.id + '_' + patternName + '_' + 'Selection' + '_' + index);\n                    }\n                    if (element.id.indexOf('legend') == -1 && element.id.indexOf('Group') == -1 && pattern != null) {\n                        for (var i = 1; i < pattern.children.length; i++) {\n                            pattern.children[i].setAttribute('fill', element.getAttribute('fill'));\n                            pattern.children[i].setAttribute('stroke', element.getAttribute('fill'));\n                        }\n                    }\n                }\n                this.addSvgClass(element, this.getSelectionClass(element.id));\n                if (this.styleId.indexOf('highlight') > 0 && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor) && this.chart.highlightPattern === 'None') {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.chart.highlightColor);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.chart.highlightColor);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to get the selection class\n     *\n     * @private\n     */\n    Selection.prototype.getSelectionClass = function (id) {\n        return this.generateStyle(this.control.series[this.indexFinder(id).series]);\n    };\n    /**\n     *  Method to remove styles\n     *\n     * @private\n     */\n    Selection.prototype.removeStyles = function (elements) {\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n            var element = elements_2[_i];\n            if (element) {\n                this.removeSvgClass(element, this.getSelectionClass(element.id));\n                if (this.chart.highlightPattern === 'None' && this.chart.highlightColor !== '' && !isNullOrUndefined(this.chart.highlightColor)) {\n                    if (element.id.indexOf('Group') > 0) {\n                        for (var i = 0; i < element.children.length; i++) {\n                            element.children[i].setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                        }\n                    }\n                    else {\n                        element.setAttribute('fill', this.control.visibleSeries[this.indexFinder(element.id).series].interior);\n                    }\n                }\n            }\n        }\n    };\n    /**\n     *  Method to remove the selected data index\n     *\n     * @private\n     */\n    Selection.prototype.addOrRemoveIndex = function (indexes, index, isAdd) {\n        for (var i = 0; i < indexes.length; i++) {\n            if (this.toEquals(indexes[i], index, this.isSeriesMode)) {\n                indexes.splice(i, 1);\n                i--;\n            }\n        }\n        if (isAdd) {\n            indexes.push(index);\n        }\n    };\n    /**\n     *  Method to get the equal index\n     *\n     * @private\n     */\n    Selection.prototype.toEquals = function (first, second, checkSeriesOnly) {\n        return ((first.series === second.series || (this.currentMode === 'Cluster' && !checkSeriesOnly))\n            && (checkSeriesOnly || (first.point === second.point)));\n    };\n    /**\n     * To redraw the selected points.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.redrawSelection = function (chart, oldMode, chartRedraw) {\n        this.isSeriesMode = oldMode === 'Series';\n        if (!isNullOrUndefined(oldMode)) {\n            if (oldMode.indexOf('Drag') !== -1 || oldMode === 'Lasso' || chartRedraw) {\n                chart.isRedrawSelection = false;\n            }\n            else {\n                chart.isRedrawSelection = true;\n            }\n        }\n        var selectedDataIndexes = extend([], this.selectedDataIndexes, null, true);\n        var highlightDataIndexes = extend([], this.highlightDataIndexes, null, true);\n        if (this.styleId.indexOf('highlight') > 0 && highlightDataIndexes.length > 0) {\n            this.removeSelectedElements(chart, this.highlightDataIndexes, chart.series);\n            selectedDataIndexes = highlightDataIndexes;\n        }\n        else {\n            this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries, false);\n        this.selectDataIndex(chart, selectedDataIndexes);\n    };\n    /** @private */\n    Selection.prototype.legendSelection = function (chart, series, targetElement, eventType) {\n        if (eventType === 'mousemove') {\n            if (targetElement.id.indexOf('text') > 1) {\n                targetElement = getElement(targetElement.id.replace('text', 'shape'));\n            }\n            if (targetElement.id.indexOf('marker') > 1) {\n                targetElement = getElement(targetElement.id.replace('_marker', ''));\n            }\n            if (targetElement.id.indexOf('g') > 1) {\n                targetElement = getElement(targetElement.id.replace('_g_', '_shape_'));\n            }\n            if (targetElement.hasAttribute('class') && (targetElement.getAttribute('class').indexOf('highlight') > -1 ||\n                targetElement.getAttribute('class').indexOf('selection') > -1)) {\n                return;\n            }\n            this.currentMode = this.chart.highlightMode;\n        }\n        var isPreSelected = this.isAlreadySelected(targetElement, eventType);\n        if (isPreSelected) {\n            var seriesStyle = this.generateStyle(chart.visibleSeries[series]);\n            var selectedElements = (document.querySelectorAll('.' + seriesStyle));\n            this.isSeriesMode = this.currentMode === 'Series';\n            var isBlurEffectNeeded = true;\n            if (selectedElements.length > 0) {\n                this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n            }\n            else {\n                for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                    var element = _a[_i];\n                    if (element.index !== series && !chart.isMultiSelect) {\n                        seriesStyle = this.generateStyle(chart.visibleSeries[element.index]);\n                        selectedElements = document.querySelectorAll('.' + seriesStyle);\n                        this.removeSelection(chart, series, selectedElements, seriesStyle, isBlurEffectNeeded);\n                    }\n                }\n                var seriesElements = [];\n                if (this.rangeColorMappingEnabled()) {\n                    for (var i = 0, a = chart.visibleSeries[0].seriesElement.children; i < a.length; i++) {\n                        var point = a[i];\n                        if (targetElement.getAttribute('fill') === point.getAttribute('fill')) {\n                            seriesElements.push(point);\n                        }\n                    }\n                    for (var _b = 0, seriesElements_1 = seriesElements; _b < seriesElements_1.length; _b++) {\n                        var element = seriesElements_1[_b];\n                        if (isNullOrUndefined(element)) {\n                            return;\n                        }\n                        this.checkSelectionElements(element, seriesStyle, false, true, series);\n                    }\n                }\n                else {\n                    seriesElements = this.getSeriesElements(chart.visibleSeries[series]);\n                    for (var _c = 0, seriesElements_2 = seriesElements; _c < seriesElements_2.length; _c++) {\n                        var seriesElement = seriesElements_2[_c];\n                        if (isNullOrUndefined(seriesElement)) {\n                            return;\n                        }\n                        this.checkSelectionElements(seriesElement, seriesStyle, false, true, series);\n                    }\n                }\n                this.isSeriesMode = true;\n                this.selection(chart, new Index(series, NaN), seriesElements);\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries, true, series);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.rangeColorMappingEnabled = function () {\n        if ((this.chart.rangeColorSettings && this.chart.rangeColorSettings.length > 0 && this.chart.visibleSeries.length === 1 && this.chart.rangeColorSettings[0].colors.length > 0 &&\n            (this.chart.series[0].type === 'Column' || this.chart.series[0].type === 'Bar' ||\n                this.chart.series[0].type === 'Scatter' || this.chart.series[0].type === 'Bubble'))) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Selection.prototype.removeSelection = function (chart, series, selectedElements, seriesStyle, isBlurEffectNeeded) {\n        if (selectedElements.length > 0) {\n            var elements = [];\n            for (var i = 0; i < selectedElements.length; i++) {\n                elements.push(selectedElements[i]);\n            }\n            this.removeStyles(elements);\n            this.isSeriesMode = true;\n            this.addOrRemoveIndex(this.selectedDataIndexes, new Index(series, NaN));\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var value = _a[_i];\n                seriesStyle = this.generateStyle(value);\n                if (document.querySelectorAll('.' + seriesStyle).length > 0) {\n                    for (var _b = 0, elements_3 = elements; _b < elements_3.length; _b++) {\n                        var element = elements_3[_b];\n                        this.checkSelectionElements(element, seriesStyle, true, true, series);\n                    }\n                    isBlurEffectNeeded = false;\n                    break;\n                }\n            }\n            if (isBlurEffectNeeded) {\n                this.isSeriesMode = chart.selectionMode === 'Series';\n                this.blurEffect(chart.element.id, chart.visibleSeries);\n            }\n        }\n    };\n    /** @private */\n    Selection.prototype.getSeriesElements = function (series) {\n        var seriesElements = [series.seriesElement];\n        if (series.marker.visible && series.type !== 'Scatter' && series.type !== 'Bubble' && !series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        else if (series.marker.visible && series.isRectSeries) {\n            seriesElements.push(series.symbolElement);\n        }\n        return seriesElements;\n    };\n    /** @private */\n    Selection.prototype.indexFinder = function (id) {\n        var ids = ['NaN', 'NaN'];\n        if (id.indexOf('SeriesGroup') > -1) {\n            ids = id.split('SeriesGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('SymbolGroup') > -1) {\n            ids = id.split('SymbolGroup');\n            ids[0] = ids[1];\n        }\n        else if (id.indexOf('_Point_') > -1) {\n            ids = id.split('_Series_')[1].split('_Point_');\n        }\n        else if (id.indexOf('_Series_') > -1) {\n            ids[0] = id.split('_Series_')[1];\n        }\n        else if (id.indexOf('_chart_legend_shape_') > -1) {\n            ids = id.split('_chart_legend_shape_');\n            ids[0] = ids[1];\n        }\n        return new Index(parseInt(ids[0], 10), parseInt(ids[1], 10));\n    };\n    /**\n     * Drag selection that returns the selected data.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.calculateDragSelectedElements = function (chart, dragRect, isClose) {\n        this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n        var isLasso = chart.selectionMode === 'Lasso';\n        var rect = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        var axisOffset = new ChartLocation(chart.chartAxisLayoutPanel.seriesClipRect.x, chart.chartAxisLayoutPanel.seriesClipRect.y);\n        this.removeOffset(rect, axisOffset);\n        var points;\n        var index;\n        var selectedPointValues = [];\n        var selectedSeriesValues = [];\n        this.isSeriesMode = false;\n        var isDragResize = (chart.allowMultiSelection) && (this.rectGrabbing || this.resizing);\n        this.rectPoints = this.dragRectArray[isDragResize ? this.targetIndex : this.count] =\n            new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n        if (dragRect.width && dragRect.height && !isClose) {\n            var rt = new Rect(dragRect.x, dragRect.y, dragRect.width, dragRect.height);\n            this.removeOffset(rt, axisOffset);\n            this.filterArray[isDragResize ? this.targetIndex : this.count] = rt;\n        }\n        var _loop_1 = function (series) {\n            if (series.visible) {\n                points = series.points;\n                selectedPointValues = [];\n                var xAxisOffset_1;\n                var yAxisOffset_1;\n                if ((chart.isTransposed || series.type.indexOf('Bar') !== -1) &&\n                    !(chart.isTransposed && series.type.indexOf('Bar') !== -1)) {\n                    xAxisOffset_1 = series.xAxis.rect.y - axisOffset.y;\n                    yAxisOffset_1 = series.yAxis.rect.x - axisOffset.x;\n                }\n                else {\n                    xAxisOffset_1 = series.xAxis.rect.x - axisOffset.x;\n                    yAxisOffset_1 = series.yAxis.rect.y - axisOffset.y;\n                }\n                for (var j = 0; j < points.length; j++) {\n                    var yValue = (series.type !== 'RangeArea' || 'SplineRangeArea') ? points[j].yValue :\n                        points[j].regions[0].y;\n                    var isCurrentPoint = void 0;\n                    var selectedPointX = points[j].xValue;\n                    if (chart.primaryXAxis.valueType === 'Category') {\n                        selectedPointX = points[j].x.toLocaleString();\n                    }\n                    else if (chart.primaryXAxis.valueType === 'DateTime') {\n                        selectedPointX = new Date(points[j].xValue);\n                    }\n                    if (series.type === 'BoxAndWhisker') {\n                        isCurrentPoint = points[j].regions.some(function (region) {\n                            return withInBounds(region.x + xAxisOffset_1, region.y + yAxisOffset_1, rect);\n                        });\n                    }\n                    else {\n                        if (chart.selectionMode === 'Lasso') {\n                            isCurrentPoint = points[j].isSelect;\n                        }\n                        else {\n                            isCurrentPoint = (chart.allowMultiSelection) ?\n                                this_1.isPointSelect(points[j], xAxisOffset_1, yAxisOffset_1, this_1.filterArray) :\n                                points[j].symbolLocations.some(function (location) {\n                                    return location && withInBounds(location.x + xAxisOffset_1, location.y + yAxisOffset_1, rect);\n                                });\n                        }\n                    }\n                    if (isCurrentPoint && series.category !== 'Indicator') {\n                        index = new Index(series.index, points[j].index);\n                        this_1.selection(chart, index, this_1.findElements(chart, series, index, '', !series.isRectSeries ? series.marker.visible : false));\n                        selectedPointValues.push({ x: selectedPointX, y: yValue });\n                    }\n                    if (isCurrentPoint && (series.type === 'RangeArea' || series.type === 'SplineRangeArea')) {\n                        selectedPointValues.push({ x: selectedPointX, y: points[j].regions[0].y });\n                    }\n                }\n                selectedSeriesValues.push(selectedPointValues);\n            }\n        };\n        var this_1 = this;\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            _loop_1(series);\n        }\n        this.blurEffect(chart.element.id, chart.visibleSeries);\n        var x = isLasso ? chart.mouseDownX : (dragRect.x + dragRect.width);\n        var y = isLasso ? chart.mouseDownY : dragRect.y;\n        if (!isClose) {\n            this.createCloseButton(x, y);\n        }\n        var args = {\n            name: dragComplete,\n            selectedDataValues: selectedSeriesValues,\n            cancel: false\n        };\n        chart.trigger(dragComplete, args);\n    };\n    Selection.prototype.removeOffset = function (rect, clip) {\n        rect.x -= clip.x;\n        rect.y -= clip.y;\n    };\n    Selection.prototype.isPointSelect = function (points, xAxisOffset, yAxisOffset, rectCollection) {\n        var location = points.symbolLocations[0];\n        for (var _i = 0, rectCollection_1 = rectCollection; _i < rectCollection_1.length; _i++) {\n            var rect = rectCollection_1[_i];\n            if (rect && location && withInBounds(location.x + xAxisOffset, location.y + yAxisOffset, rect)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * Method to draw dragging rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.drawDraggingRect = function (chart, dragRect, target) {\n        var cartesianLayout = chart.chartAxisLayoutPanel.seriesClipRect;\n        var border = chart.chartArea.border.width;\n        var rectFill = chart.themeStyle.selectionRectFill;\n        var rectStroke = chart.themeStyle.selectionRectStroke;\n        var isLasso = chart.selectionMode === 'Lasso';\n        if (this.isdrawRect) {\n            cartesianLayout.x = cartesianLayout.x - border / 2;\n            cartesianLayout.y = cartesianLayout.y - border / 2;\n            cartesianLayout.width = cartesianLayout.width + border;\n            cartesianLayout.height = cartesianLayout.height + border;\n            this.isdrawRect = false;\n        }\n        switch (chart.selectionMode) {\n            case 'DragX':\n                dragRect.y = cartesianLayout.y;\n                dragRect.height = cartesianLayout.height;\n                break;\n            case 'DragY':\n                dragRect.x = cartesianLayout.x;\n                dragRect.width = cartesianLayout.width;\n                break;\n        }\n        if ((dragRect.width < 5 || dragRect.height < 5) && !isLasso) {\n            return null;\n        }\n        var isDragMode = chart.selectionMode.indexOf('Drag') > -1 || chart.selectionMode === 'Lasso';\n        if ((chart.allowMultiSelection) && isDragMode) {\n            var element = void 0;\n            var dragGroup = void 0;\n            var multiGroup = getElement(this.multiRectGroup);\n            if (!multiGroup) {\n                multiGroup = chart.svgRenderer.createGroup({ id: this.multiRectGroup });\n                chart.svgObject.appendChild(multiGroup);\n            }\n            if (this.rectGrabbing || this.resizing) {\n                var rectElement = void 0;\n                rectElement = getElement(this.draggedRect + this.targetIndex);\n                if (rectElement.nextSibling) {\n                    remove(rectElement.nextSibling);\n                }\n                this.setAttributes(rectElement, dragRect);\n            }\n            else if (!getElement(this.draggedRectGroup + this.count)) {\n                dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup + this.count });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : multiGroup.appendChild(dragGroup);\n            }\n            if (!(chart.selectionMode === 'Lasso')) {\n                element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect + this.count, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                element.style.cursor = \"move\";\n            }\n            else {\n                element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath + this.count, rectFill, 3, rectStroke, 1, '', this.path));\n            }\n            if (!dragGroup && !this.rectGrabbing && !this.resizing) {\n                getElement(this.draggedRectGroup + this.count).appendChild(element);\n            }\n            else if (!this.rectGrabbing && !this.resizing) {\n                dragGroup.appendChild(element);\n            }\n        }\n        else {\n            var element = isLasso ?\n                getElement(this.lassoPath) : getElement(this.draggedRect);\n            if (this.closeIcon) {\n                removeElement(this.closeIconId);\n            }\n            if (element) {\n                if (isLasso) {\n                    element.setAttribute('d', this.path);\n                }\n                else {\n                    this.setAttributes(element, dragRect);\n                }\n            }\n            else {\n                var dragGroup = chart.svgRenderer.createGroup({ id: this.draggedRectGroup });\n                var svgElement = document.getElementById(chart.element.id + '_series_svg');\n                // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n                chart.enableCanvas ? svgElement.appendChild(dragGroup) : chart.svgObject.appendChild(dragGroup);\n                if (!(chart.selectionMode === 'Lasso')) {\n                    element = chart.svgRenderer.drawRectangle(new RectOption(this.draggedRect, rectFill, { color: rectStroke, width: 1 }, 1, dragRect));\n                }\n                else {\n                    element = chart.svgRenderer.drawPath(new PathOption(this.lassoPath, rectFill, 3, rectStroke, 1, '', this.path));\n                }\n                //element.setAttribute('style', 'cursor:move;');\n                dragGroup.appendChild(element);\n            }\n        }\n    };\n    /**\n     * To get drag selected group element index from its id\n     *\n     * @param {string} id element id\n     */\n    Selection.prototype.getIndex = function (id) {\n        var i;\n        for (i = id.length - 1; i > 0; i--) {\n            var x = Number(id[i]);\n            if (!isNaN(x)) {\n                continue;\n            }\n            else {\n                break;\n            }\n        }\n        var index = +id.substr(i + 1, id.length - 1);\n        return index;\n    };\n    Selection.prototype.createCloseButton = function (x, y) {\n        var isMultiDrag = this.chart.allowMultiSelection;\n        var circleStroke = this.chart.themeStyle.selectionCircleStroke;\n        var isDrag = this.rectGrabbing || this.resizing;\n        var closeIcon = this.chart.svgRenderer.createGroup({\n            id: this.closeIconId + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''),\n            style: 'cursor:pointer; visibility: visible;'\n        });\n        closeIcon.appendChild(this.chart.svgRenderer.drawCircle(new CircleOption(this.closeIconId + '_circle' + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), '#FFFFFF', { color: circleStroke, width: 1 }, 1, x, y, 10)));\n        var direction = 'M ' + (x - 4) + ' ' + (y - 4) + ' L ' + (x + 4) + ' ' + (y + 4) + ' M ' + (x - 4) + ' ' + (y + 4) +\n            ' L ' + (x + 4) + ' ' + (y - 4);\n        closeIcon.appendChild(this.chart.svgRenderer.drawPath({\n            id: this.closeIconId + '_cross' +\n                (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''), d: direction,\n            stroke: circleStroke, 'stroke-width': 2, fill: circleStroke\n        }));\n        this.closeIcon = closeIcon;\n        var pathElement = getElement(this.draggedRectGroup + (isMultiDrag ? (isDrag ? this.targetIndex : this.count) : ''));\n        if (pathElement) {\n            pathElement.appendChild(closeIcon);\n        }\n    };\n    /**\n     * Method to remove dragged element.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.removeDraggedElements = function (chart, targetElement, eventType) {\n        if ((targetElement.id && targetElement.id.indexOf(this.closeIconId) > -1) && (eventType.indexOf('move') === -1)) {\n            var isSelectedvalues = true;\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(targetElement.id);\n                var multiRectGroupElement = getElement(this.multiRectGroup);\n                remove(getElement(this.draggedRectGroup + index));\n                this.dragRectArray[index] = null;\n                this.filterArray[index] = null;\n                this.totalSelectedPoints[index] = null;\n                if (multiRectGroupElement && multiRectGroupElement.childElementCount === 0) {\n                    removeElement(multiRectGroupElement);\n                    this.dragRectArray = [];\n                    this.filterArray = [];\n                    this.totalSelectedPoints = [];\n                }\n                if (this.currentMode === 'Lasso') {\n                    if (this.multiDataIndexes[index] != null) {\n                        for (var i = 0; i < this.multiDataIndexes[index].length; i++) {\n                            this.multiDataIndexes[index][i].isSelect = false;\n                        }\n                    }\n                    this.multiDataIndexes[index] = null;\n                    for (var j = 0; j < this.multiDataIndexes.length; j++) {\n                        if (this.multiDataIndexes[j] != null) {\n                            isSelectedvalues = false;\n                            for (var k = 0; k < this.multiDataIndexes[j].length; k++) {\n                                this.multiDataIndexes[j][k].isSelect = true;\n                            }\n                        }\n                    }\n                    this.calculateDragSelectedElements(chart, this.dragRect, true);\n                }\n                else if (this.filterArray.length) {\n                    for (var i = 0; i < this.filterArray.length; i++) {\n                        if (this.filterArray[i]) {\n                            isSelectedvalues = false;\n                            this.calculateDragSelectedElements(chart, this.filterArray[i], true);\n                        }\n                    }\n                }\n                else {\n                    this.calculateDragSelectedElements(chart, new Rect(0, 0, 0, 0), true);\n                }\n            }\n            else {\n                remove(getElement(this.draggedRectGroup));\n                this.removeSelectedElements(chart, this.selectedDataIndexes, chart.series);\n            }\n            this.blurEffect(chart.element.id, chart.visibleSeries);\n            this.changeCursorStyle(false, chart.svgObject, 'auto');\n            if (!(chart.allowMultiSelection) || isSelectedvalues) {\n                this.rectPoints = null;\n            }\n        }\n    };\n    /**\n     * Method to resize the drag rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.resizingSelectionRect = function (chart, location, tapped, target) {\n        var rect;\n        if (((chart.allowMultiSelection) && (target.id.indexOf('_ej2_drag_rect') > -1)) ||\n            this.dragRectArray[this.targetIndex]) {\n            if (target.id.indexOf('_ej2_drag_rect') > -1) {\n                this.targetIndex = this.getIndex(target.id);\n            }\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        if (!(chart.allowMultiSelection)) {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        if (rect) {\n            var resize = this.findResizeMode(chart.svgObject, rect, location);\n            if (this.resizing) {\n                rect = getDraggedRectLocation(rect.x, rect.y, (rect.x + rect.width), (rect.y + rect.height), chart.chartAxisLayoutPanel.seriesClipRect);\n                this.drawDraggingRect(chart, rect);\n                this.dragRect = rect;\n            }\n            if (tapped) {\n                this.resizing = resize;\n            }\n        }\n        else {\n            return;\n        }\n    };\n    Selection.prototype.findResizeMode = function (chartSvgObject, rect, location) {\n        var cursorStyle = 'se-resize';\n        var resize = false;\n        if (!this.resizing) {\n            var resizeEdges = [new Rect(rect.x, (rect.y), rect.width - 5, 5),\n                new Rect((rect.x), rect.y, 5, rect.height),\n                new Rect(rect.x, (rect.y + rect.height - 5), rect.width - 5, 5),\n                new Rect((rect.x + rect.width - 5), rect.y + 5, 5, rect.height - 15),\n                new Rect((rect.x + rect.width - 10), (rect.y + rect.height - 10), 10, 10)]; //corner\n            for (var i = 0; i < resizeEdges.length; i++) {\n                if (withInBounds(location.x, location.y, resizeEdges[i])) {\n                    cursorStyle = (i === 4) ? cursorStyle : (i % 2 === 0) ? 'ns-resize' : 'ew-resize';\n                    resize = true;\n                    this.resizeMode = i;\n                    break;\n                }\n            }\n        }\n        else {\n            var x = rect.x;\n            var y = rect.y;\n            var width = (location.x - x);\n            var height = (location.y - y);\n            switch (this.resizeMode) {\n                case 0:\n                    height = Math.abs((rect.height + rect.y) - location.y);\n                    rect.y = Math.min((rect.height + rect.y), location.y);\n                    rect.height = height;\n                    break;\n                case 1:\n                    width = Math.abs((rect.width + rect.x) - location.x);\n                    rect.x = Math.min((rect.width + rect.x), location.x);\n                    rect.width = width;\n                    break;\n                case 2:\n                    rect.height = Math.abs(height);\n                    rect.y = Math.min(location.y, y);\n                    break;\n                case 3:\n                    rect.width = Math.abs(width);\n                    rect.x = Math.min(location.x, x);\n                    break;\n                case 4:\n                    rect.width = Math.abs(width);\n                    rect.height = Math.abs(height);\n                    rect.x = Math.min(location.x, x);\n                    rect.y = Math.min(location.y, y);\n                    break;\n            }\n        }\n        if (this.currentMode !== 'Lasso') {\n            this.changeCursorStyle(resize, getElement((this.chart.allowMultiSelection) ? this.draggedRect +\n                this.targetIndex : this.draggedRect), cursorStyle);\n        }\n        this.changeCursorStyle(resize, chartSvgObject, cursorStyle);\n        return resize;\n    };\n    Selection.prototype.changeCursorStyle = function (isResize, rectelement, cursorStyle) {\n        cursorStyle = isResize ? cursorStyle : (this.control.svgObject === rectelement) ? 'auto' : 'move';\n        if (rectelement) {\n            rectelement.style.cursor = cursorStyle;\n        }\n    };\n    Selection.prototype.removeSelectedElements = function (chart, index, seriesCollection) {\n        index = chart.isRedrawSelection ? index : index.splice(0, index.length); // No need to remove selected indexes while redrawing\n        var seriesElements;\n        for (var _i = 0, seriesCollection_1 = seriesCollection; _i < seriesCollection_1.length; _i++) {\n            var series = seriesCollection_1[_i];\n            if (series.visible) {\n                seriesElements = this.getSeriesElements(series);\n                this.removeStyles(seriesElements);\n                for (var _a = 0, seriesElements_3 = seriesElements; _a < seriesElements_3.length; _a++) {\n                    var seriesElement = seriesElements_3[_a];\n                    this.removeStyles(this.getChildren(seriesElement));\n                }\n            }\n        }\n    };\n    Selection.prototype.setAttributes = function (ele, object) {\n        var keys = Object.keys(object);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            ele.setAttribute(key, object[key]);\n        }\n    };\n    /**\n     * Method to move the dragged rect.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.draggedRectMoved = function (chart, grabbedPoint, doDrawing, target) {\n        var rect;\n        if ((this.resizing || this.rectGrabbing) && (chart.allowMultiSelection)) {\n            var r = this.dragRectArray[this.targetIndex];\n            rect = new Rect(r.x, r.y, r.width, r.height);\n        }\n        else {\n            rect = new Rect(this.rectPoints.x, this.rectPoints.y, this.rectPoints.width, this.rectPoints.height);\n        }\n        rect.x -= (grabbedPoint.x - chart.mouseX);\n        rect.y -= (grabbedPoint.y - chart.mouseY);\n        rect = getDraggedRectLocation(rect.x, rect.y, rect.x + rect.width, rect.height + rect.y, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (doDrawing) {\n            this.drawDraggingRect(chart, rect, target);\n        }\n        else {\n            this.calculateDragSelectedElements(chart, rect);\n        }\n    };\n    Selection.prototype.mouseLeave = function (event) {\n        this.completeSelection(event.target, event.type);\n    };\n    /**\n     * To complete the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.completeSelection = function (target, eventType) {\n        var chart = this.chart;\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        this.currentMode = chart.selectionMode;\n        if ((this.dragging || this.resizing) && this.dragRect.width > 5 && this.dragRect.height > 5) {\n            this.calculateDragSelectedElements(chart, this.dragRect);\n        }\n        else if (!(chart.allowMultiSelection) && this.rectGrabbing &&\n            this.rectPoints.width && this.rectPoints.height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        else if (this.rectGrabbing && this.dragRectArray[this.targetIndex].width && this.dragRectArray[this.targetIndex].height) {\n            this.draggedRectMoved(chart, this.dragRect);\n        }\n        if (chart.selectionMode === 'Lasso' && this.dragging && this.path) {\n            if (this.path.indexOf('L') !== -1) {\n                if (!(chart.allowMultiSelection)) {\n                    getElement(this.lassoPath).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath));\n                }\n                else if (getElement(this.lassoPath + this.count)) {\n                    getElement(this.lassoPath + this.count).setAttribute('d', this.path + 'Z');\n                    this.pointChecking(getElement(this.lassoPath + this.count));\n                }\n                if (this.dragging || this.resizing) {\n                    this.calculateDragSelectedElements(chart, this.dragRect);\n                }\n            }\n        }\n        this.dragging = false;\n        this.rectGrabbing = false;\n        this.resizing = false;\n        this.removeDraggedElements(chart, target, eventType);\n    };\n    Selection.prototype.getDragRect = function (chart, seriesClipRect) {\n        return getDraggedRectLocation(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY, seriesClipRect);\n    };\n    /** @private */\n    Selection.prototype.dragStart = function (chart, seriesClipRect, mouseDownX, mouseDownY, event) {\n        var mode = chart.selectionMode;\n        this.currentMode = chart.selectionMode;\n        this.dragging = (mode.indexOf('Drag') > -1 || mode === 'Lasso') && (chart.isDoubleTap || !chart.isTouch) &&\n            chart.chartAreaType !== 'PolarRadar';\n        var target = event.target;\n        this.path = undefined;\n        if (this.dragging) {\n            this.count = getElement(this.multiRectGroup) ? (this.count + 1) : 0;\n            this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n            if (chart.mouseDownX < seriesClipRect.x || chart.mouseDownX > (seriesClipRect.x + seriesClipRect.width) ||\n                chart.mouseDownY < seriesClipRect.y || chart.mouseDownY > (seriesClipRect.y + seriesClipRect.height)) {\n                this.dragging = false;\n            }\n        }\n        if (mode === 'Lasso') {\n            for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n                var series = _a[_i];\n                if (series.visible) {\n                    for (var _b = 0, _c = series.points; _b < _c.length; _b++) {\n                        var point = _c[_b];\n                        if (!(chart.allowMultiSelection)) {\n                            point.isSelect = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (!(mode === 'Lasso')) {\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.dragRect = new Rect(chart.mouseDownX, chart.mouseDownY, 0, 0);\n                this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true);\n                this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.rectPoints);\n            }\n            if ((chart.allowMultiSelection)) {\n                var index = this.getIndex(target.id);\n                this.targetIndex = this.isDragRect(target.id) ? index : undefined;\n                if (this.dragRectArray.length && this.isDragRect(target.id)) {\n                    this.resizingSelectionRect(chart, new ChartLocation(mouseDownX, mouseDownY), true, target);\n                    this.rectGrabbing = withInBounds(mouseDownX, mouseDownY, this.dragRectArray[index]);\n                }\n            }\n        }\n    };\n    Selection.prototype.isDragRect = function (id) {\n        return id.indexOf('_ej2_drag_rect') > -1;\n    };\n    /** @private */\n    Selection.prototype.mouseMove = function (event) {\n        var chart = this.chart;\n        var target = event.target;\n        var eventType = event.type;\n        this.highlightChart(target, eventType);\n        if (chart.selectionMode === 'None') {\n            return;\n        }\n        if (eventType === 'touchmove' && (Browser.isIos || Browser.isIos7) && this.dragging && event.preventDefault) {\n            event.preventDefault();\n        }\n        this.selectionAndDrag(chart, target, eventType);\n    };\n    /**\n     * highlight parts\n     *\n     * @private\n     */\n    Selection.prototype.highlightChart = function (target, eventType) {\n        if (this.chart.highlightMode !== 'None' || this.chart.legendSettings.enableHighlight) {\n            if (!isNullOrUndefined(target)) {\n                if (target.id.indexOf('text') > 1) {\n                    target = getElement(target.id.replace('text', 'shape'));\n                }\n                if ((target).hasAttribute('class') && ((target).getAttribute('class').indexOf('highlight') > -1 ||\n                    target.getAttribute('class').indexOf('selection') > -1)) {\n                    return;\n                }\n                this.calculateSelectedElements(target, eventType);\n                if (this.chart.highlightModule.highlightDataIndexes && this.chart.highlightModule.highlightDataIndexes.length > 0 &&\n                    target.id.indexOf(\"_chart_legend_\") == -1 && target.id.indexOf(\"_Series_\") == -1) {\n                    this.removeLegendHighlightStyles();\n                }\n            }\n            return;\n        }\n    };\n    /**\n     * selection and drag selection\n     *\n     * @private\n     */\n    Selection.prototype.selectionAndDrag = function (chart, target, eventType) {\n        var insideMoving = withInBounds(chart.mouseX, chart.mouseY, chart.chartAxisLayoutPanel.seriesClipRect);\n        if (insideMoving) {\n            if (this.rectGrabbing && !this.resizing) {\n                this.draggedRectMoved(chart, this.dragRect, true, target);\n            }\n            else if (this.dragging && !this.resizing) {\n                if (chart.selectionMode === 'Lasso') {\n                    this.getPath(chart.mouseDownX, chart.mouseDownY, chart.mouseX, chart.mouseY);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n                else {\n                    this.dragRect = this.getDragRect(chart, chart.chartAxisLayoutPanel.seriesClipRect);\n                    this.drawDraggingRect(chart, this.dragRect, target);\n                }\n            }\n            if (this.rectPoints && !(chart.allowMultiSelection)) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n            else if (((chart.allowMultiSelection) && !this.dragging) || this.resizing) {\n                this.resizingSelectionRect(chart, new ChartLocation(chart.mouseX, chart.mouseY), null, target);\n            }\n        }\n        else {\n            this.completeSelection(target, eventType);\n        }\n    };\n    /**\n     * remove highlighted legend when not focused.\n     *\n     * @private\n     */\n    Selection.prototype.removeLegendHighlightStyles = function () {\n        this.chart.highlightModule.highlightDataIndexes = [];\n        var elementCollection;\n        for (var i = 0; i < this.chart.series.length; i++) {\n            elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n            if (this.selectedDataIndexes.length === 0) {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute(\"class\"));\n                    }\n                }\n                elementCollection = document.getElementsByClassName(this.unselected);\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute(\"class\"));\n                    }\n                }\n            }\n            else {\n                elementCollection = document.getElementsByClassName(this.generateStyle(this.chart.series[i]));\n                while (elementCollection.length > 0) {\n                    var element = elementCollection[0];\n                    if (element) {\n                        this.removeSvgClass(element, element.getAttribute(\"class\"));\n                        this.addSvgClass(element, this.unselected);\n                    }\n                }\n            }\n        }\n    };\n    Selection.prototype.getPath = function (startX, startY, endX, endY) {\n        if (this.dragging) {\n            if (this.path) {\n                this.path = this.path + ' L' + endX + ' ' + endY;\n            }\n            else {\n                this.path = 'M ' + startX + ' ' + startY;\n            }\n        }\n    };\n    Selection.prototype.pointChecking = function (path) {\n        var _this = this;\n        var chart = this.chart;\n        var element;\n        var svgRect = getElement(chart.svgId).getBoundingClientRect();\n        var offsetX = chart.chartAxisLayoutPanel.seriesClipRect.x + Math.max(svgRect.left, 0);\n        var offsetY = chart.chartAxisLayoutPanel.seriesClipRect.y + Math.max(svgRect.top, 0);\n        this.multiDataIndexes[this.count] = [];\n        for (var _i = 0, _a = chart.visibleSeries; _i < _a.length; _i++) {\n            var series = _a[_i];\n            series.points.filter(function (point) {\n                // To check whether the point have symbol location value or not.\n                if (point.symbolLocations && point.symbolLocations.length) {\n                    element = document.elementFromPoint(point.symbolLocations[0].x + offsetX, point.symbolLocations[0].y + offsetY);\n                }\n                if (element === path) {\n                    point.isSelect = true;\n                    if ((_this.chart.allowMultiSelection) && _this.currentMode === 'Lasso') {\n                        _this.multiDataIndexes[_this.count][_this.seriesIndex] = point;\n                        _this.seriesIndex++;\n                    }\n                }\n                else if (!(chart.allowMultiSelection)) {\n                    point.isSelect = false;\n                }\n            });\n        }\n        this.seriesIndex = 0;\n    };\n    /**\n     * Get module name.\n     *\n     * @private\n     */\n    Selection.prototype.getModuleName = function () {\n        return 'Selection';\n    };\n    /**\n     * To destroy the selection.\n     *\n     * @returns {void}\n     * @private\n     */\n    Selection.prototype.destroy = function () {\n        this.removeEventListener();\n        // Destroy method performed here\n    };\n    return Selection;\n}(BaseSelection));\nexport { Selection };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,OAAO,QAAQ,sBAAsB;AAC9C,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,MAAM,EAAEC,iBAAiB,QAAQ,sBAAsB;AAChE,SAASC,aAAa,EAAEC,UAAU,EAAEC,YAAY,EAAEC,YAAY,EAAEC,sBAAsB,EAAEC,aAAa,EAAEC,UAAU,QAAQ,2BAA2B;AACpJ,SAASC,IAAI,EAAEC,UAAU,QAAQ,0BAA0B;AAC3D,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,8BAA8B;AAC9E,SAASC,aAAa,QAAQ,yCAAyC;AACvE;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC7ChC,SAAS,CAAC+B,SAAS,EAAEC,MAAM,CAAC;EAC5B;AACJ;AACA;AACA;AACA;EACI,SAASD,SAAS,CAACE,KAAK,EAAE;IACtB,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC,IAAI,IAAI;IAC5CC,KAAK,CAACE,UAAU,GAAG,IAAI;IACvBF,KAAK,CAACG,gBAAgB,GAAG,EAAE;IAC3BH,KAAK,CAACI,SAAS,GAAG,CAAC;IACnBJ,KAAK,CAACK,WAAW,GAAG,CAAC;IACrBL,KAAK,CAACM,KAAK,GAAG,CAAC,CAAC;IAChBN,KAAK,CAACO,aAAa,GAAG,EAAE;IACxBP,KAAK,CAACQ,WAAW,GAAG,EAAE;IACtBR,KAAK,CAACS,mBAAmB,GAAG,EAAE;IAC9BT,KAAK,CAACD,KAAK,GAAGA,KAAK;IACnBC,KAAK,CAACU,QAAQ,GAAGX,KAAK,CAACW,QAAQ;IAC/B,IAAIC,IAAI,GAAGZ,KAAK,CAACa,aAAa;IAC9BZ,KAAK,CAACa,WAAW,GAAGd,KAAK,CAACe,aAAa,IAAKH,IAAI,CAACI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAE;IACtEf,KAAK,CAACgB,gBAAgB,EAAE;IACxB,OAAOhB,KAAK;EAChB;EACA;AACJ;AACA;EACIH,SAAS,CAACnB,SAAS,CAACsC,gBAAgB,GAAG,YAAY;IAC/C,IAAI,IAAI,CAACjB,KAAK,CAACkB,WAAW,IAAK,IAAI,CAAClB,KAAK,CAACmB,UAAU,IAAI,IAAI,CAACnB,KAAK,CAACmB,UAAU,CAACC,SAAU,EAAE;MACtF;IACJ;IACA,IAAIC,WAAW,GAAGxC,OAAO,CAACyC,SAAS,GAAG,cAAc,GAAG,YAAY;IACnE,IAAI,CAACtB,KAAK,CAACuB,EAAE,CAAC1C,OAAO,CAAC2C,cAAc,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;IAC3D,IAAI,CAACzB,KAAK,CAACuB,EAAE,CAACF,WAAW,EAAE,IAAI,CAACK,UAAU,EAAE,IAAI,CAAC;IACjD,IAAI,CAAC1B,KAAK,CAACuB,EAAE,CAAC,OAAO,EAAE,IAAI,CAACI,UAAU,EAAE,IAAI,CAAC;IAC7C,IAAI,CAAC3B,KAAK,CAACuB,EAAE,CAAC1C,OAAO,CAAC+C,eAAe,EAAE,IAAI,CAACC,SAAS,EAAE,IAAI,CAAC;IAC5D,IAAI,CAAC7B,KAAK,CAACuB,EAAE,CAAC1C,OAAO,CAACiD,aAAa,EAAE,IAAI,CAACJ,UAAU,EAAE,IAAI,CAAC;EAC/D,CAAC;EACD;AACJ;AACA;EACI5B,SAAS,CAACnB,SAAS,CAACkD,SAAS,GAAG,UAAUE,CAAC,EAAE;IACzC,IAAI/B,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIA,KAAK,CAACgC,gBAAgB,IAAIhC,KAAK,CAACa,aAAa,KAAK,MAAM,IAAIb,KAAK,CAACiC,WAAW,EAAE;MAC/E;IACJ;IACA,IAAIjC,KAAK,CAACkC,WAAW,IAAI,CAAClC,KAAK,CAACmC,OAAO,IAAI,IAAI,CAACC,UAAU,EAAE;MACxD,IAAI,CAACC,SAAS,CAACrC,KAAK,EAAEA,KAAK,CAACsC,oBAAoB,CAACC,cAAc,EAAEvC,KAAK,CAACwC,UAAU,EAAExC,KAAK,CAACyC,UAAU,EAAEV,CAAC,CAAC;IAC3G;EACJ,CAAC;EACD;AACJ;AACA;EACIjC,SAAS,CAACnB,SAAS,CAAC+D,mBAAmB,GAAG,YAAY;IAClD,IAAI,IAAI,CAAC1C,KAAK,CAACkB,WAAW,EAAE;MACxB;IACJ;IACA,IAAI,CAAClB,KAAK,CAAC2C,GAAG,CAAC9D,OAAO,CAAC2C,cAAc,EAAE,IAAI,CAACC,SAAS,CAAC;IACtD,IAAI,CAACzB,KAAK,CAAC2C,GAAG,CAAC,cAAc,IAAI,YAAY,EAAE,IAAI,CAACjB,UAAU,CAAC;IAC/D,IAAI,CAAC1B,KAAK,CAAC2C,GAAG,CAAC,OAAO,EAAE,IAAI,CAAChB,UAAU,CAAC;IACxC,IAAI,CAAC3B,KAAK,CAAC2C,GAAG,CAAC9D,OAAO,CAAC+C,eAAe,EAAE,IAAI,CAACC,SAAS,CAAC;IACvD,IAAI,CAAC7B,KAAK,CAAC2C,GAAG,CAAC9D,OAAO,CAACiD,aAAa,EAAE,IAAI,CAACJ,UAAU,CAAC;EAC1D,CAAC;EACD;AACJ;AACA;EACI5B,SAAS,CAACnB,SAAS,CAACiE,oBAAoB,GAAG,UAAU5C,KAAK,EAAE;IACxD,IAAI,CAAC6C,OAAO,GAAG7C,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,sBAAsB;IACxD,IAAI,CAACC,UAAU,GAAGhD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,iBAAiB;IACtD,IAAI,CAACE,WAAW,GAAGjD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,iBAAiB;IACvD,IAAI,CAACG,gBAAgB,GAAGlD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,iBAAiB;IAC5D,IAAI,CAACI,cAAc,GAAGnD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,uBAAuB;IAChE,IAAI,CAACK,WAAW,GAAGpD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,gBAAgB;IACtD,IAAI,CAACM,SAAS,GAAGrD,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,gBAAgB;IACpD,IAAI,CAACO,mBAAmB,GAAG,EAAE;IAC7B,IAAI,CAAClB,UAAU,GAAG,IAAI;IACtB,IAAI,CAACmB,YAAY,GAAGvD,KAAK,CAACa,aAAa,KAAK,QAAQ;EACxD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIf,SAAS,CAACnB,SAAS,CAAC6E,eAAe,GAAG,UAAUxD,KAAK,EAAE;IACnD,IAAI,CAAC4C,oBAAoB,CAAC5C,KAAK,CAAC;IAChC,IAAI,CAACyD,MAAM,GAAG1E,MAAM,CAAC,CAAC,CAAC,EAAEiB,KAAK,CAAC0D,aAAa,EAAE,IAAI,EAAE,IAAI,CAAC;IACzD,IAAI,CAACC,YAAY,EAAE;IACnB,IAAI,CAACC,WAAW,GAAG5D,KAAK,CAACa,aAAa;IACtC,IAAI,EAAEb,KAAK,CAACa,aAAa,CAACG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;MAC7C,IAAI,CAAC6C,eAAe,CAAC7D,KAAK,EAAE,IAAI,CAAC8D,aAAa,CAAC9D,KAAK,CAACsD,mBAAmB,EAAE,IAAI,CAACA,mBAAmB,CAAC,CAAC;IACxG;EACJ,CAAC;EACDxD,SAAS,CAACnB,SAAS,CAACoF,aAAa,GAAG,UAAUN,MAAM,EAAE;IAClD,IAAIA,MAAM,EAAE;MACR,IAAI,IAAI,CAACZ,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAAChB,KAAK,CAACa,aAAa,KAAK,MAAM,EAAE;QAC9E,IAAI,CAACmC,UAAU,GAAGS,MAAM,CAACO,eAAe,IAAI,IAAI,CAAChB,UAAU;MAC/D;MACA,IAAI,IAAI,CAACH,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,IAAI,CAAChB,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,CAAC,EAAE;QAC7H,IAAI,CAACnB,UAAU,GAAGS,MAAM,CAACW,iBAAiB,IAAI,IAAI,CAACpB,UAAU;MACjE;MACA,OAAQS,MAAM,CAACY,cAAc,IAAI,IAAI,CAACxB,OAAO,GAAG,UAAU,GAAGY,MAAM,CAACa,KAAK;IAC7E;IACA,OAAO,WAAW;EACtB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxE,SAAS,CAACnB,SAAS,CAACkF,eAAe,GAAG,UAAU7D,KAAK,EAAEuE,OAAO,EAAE;IAC5D,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEC,SAAS,GAAGF,OAAO,EAAEC,EAAE,GAAGC,SAAS,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC/D,IAAIF,KAAK,GAAGG,SAAS,CAACD,EAAE,CAAC;MACzB,IAAI,CAACG,gBAAgB,CAACL,KAAK,EAAEtE,KAAK,EAAE,IAAI,CAAC4E,iBAAiB,CAAC5E,KAAK,EAAEsE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChF;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxE,SAAS,CAACnB,SAAS,CAACiG,iBAAiB,GAAG,UAAU5E,KAAK,EAAEsE,KAAK,EAAEO,MAAM,EAAEC,MAAM,EAAE;IAC5E,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,EAAE;IAAE;IACtC,IAAIE,SAAS,GAAG/E,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGuB,KAAK,CAACb,MAAM,GAAG,QAAQ,GAAG,GAAG,GAAGa,KAAK,CAACU,KAAK;IAC3F,IAAIvB,MAAM,GAAGzD,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC;IACvCsB,SAAS,GAAItB,MAAM,CAACwB,IAAI,KAAK,SAAS,IAAIxB,MAAM,CAACwB,IAAI,KAAK,QAAQ,IAAIH,MAAM,GAAKC,SAAS,GAAG,SAAS,GAAGF,MAAM,GAAIE,SAAS;IAC5H,OAAO,CAACxF,UAAU,CAACwF,SAAS,CAAC,EAAG,CAACtB,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAIxB,MAAM,CAACwB,IAAI,KAAK,iBAAiB,KAAKxB,MAAM,CAACqB,MAAM,CAACI,OAAO,GACnH3F,UAAU,CAACwF,SAAS,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC;EAC/C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjF,SAAS,CAACnB,SAAS,CAACwG,kBAAkB,GAAG,UAAUnF,KAAK,EAAEsE,KAAK,EAAE;IAC7D,IAAIc,QAAQ,GAAG,EAAE;IACjB,IAAIC,WAAW;IACf,IAAIC,gBAAgB;IACpB,KAAK,IAAId,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC7D,IAAIf,MAAM,GAAG8B,EAAE,CAACf,EAAE,CAAC;MACnB,IAAIf,MAAM,CAACyB,OAAO,EAAE;QAChBZ,KAAK,GAAG,IAAI5E,KAAK,CAAC+D,MAAM,CAACa,KAAK,EAAEA,KAAK,CAACU,KAAK,CAAC;QAC5C,IAAIvB,MAAM,CAAC+B,YAAY,EAAE;UACrBJ,QAAQ,CAACK,IAAI,CAAC,IAAI,CAACb,iBAAiB,CAAC5E,KAAK,EAAEsE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1D;QACAc,QAAQ,CAACK,IAAI,CAAC,IAAI,CAACb,iBAAiB,CAAC5E,KAAK,EAAEsE,KAAK,EAAE,EAAE,EAAEb,MAAM,CAACqB,MAAM,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACjFG,WAAW,GAAG,IAAI,CAACtB,aAAa,CAAC/D,KAAK,CAAC0D,aAAa,CAACY,KAAK,CAACb,MAAM,CAAC,CAAC;QACnE6B,gBAAgB,GAAGI,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAGN,WAAW,CAAC;QAC/D,IAAI,CAACO,qBAAqB,CAACN,gBAAgB,EAAED,WAAW,CAAC;QACzD,IAAIQ,YAAY,GAAGpC,MAAM,CAACqB,MAAM,CAACI,OAAO,IAAIzB,MAAM,CAAC+B,YAAY,GAAG,CAAC,GAAG,CAAC;QACvE,IAAI,CAACxF,KAAK,CAACe,aAAa,IAAIuE,gBAAgB,CAACZ,MAAM,GAAG,CAAC,IACnDY,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,KAAKqC,QAAQ,CAACA,QAAQ,CAACV,MAAM,GAAGmB,YAAY,CAAC,CAAC9C,EAAE,EAAE;UACxE,IAAI,CAAC+C,eAAe,CAAC9F,KAAK,EAAEsE,KAAK,CAACb,MAAM,EAAE6B,gBAAgB,EAAED,WAAW,EAAE,IAAI,CAAC;QAClF;MACJ;IACJ;IACA,OAAOD,QAAQ;EACnB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACItF,SAAS,CAACnB,SAAS,CAACiH,qBAAqB,GAAG,UAAUN,gBAAgB,EAAES,SAAS,EAAE;IAC/E,IAAIC,iBAAiB;IACrB,IAAIC,QAAQ;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,gBAAgB,CAACZ,MAAM,EAAEwB,CAAC,EAAE,EAAE;MAC9C,IAAI,CAAClH,iBAAiB,CAACsG,gBAAgB,CAACY,CAAC,CAAC,CAAC,EAAE;QACzCF,iBAAiB,GAAG,CAAChH,iBAAiB,CAACsG,gBAAgB,CAACY,CAAC,CAAC,CAACC,UAAU,CAAC,GAClE,EAAE,CAACC,KAAK,CAAClG,IAAI,CAACoF,gBAAgB,CAAC,CAAC,CAAC,CAACa,UAAU,CAACR,gBAAgB,CAAC,GAAG,GAAGI,SAAS,CAAC,CAAC,GAAG,EAAE;QACxF,IAAIC,iBAAiB,CAACtB,MAAM,GAAG,CAAC,EAAE;UAC9BuB,QAAQ,GAAG,EAAE;UACb,KAAK,IAAII,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,iBAAiB,CAACtB,MAAM,EAAE2B,GAAG,EAAE,EAAE;YACrD,IAAIL,iBAAiB,CAACK,GAAG,CAAC,CAACtD,EAAE,CAAC/B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;cACrDiF,QAAQ,CAACR,IAAI,CAACO,iBAAiB,CAACK,GAAG,CAAC,CAAC;YACzC;UACJ;UACA,IAAI,CAACC,YAAY,CAACL,QAAQ,CAAC;QAC/B;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACInG,SAAS,CAACnB,SAAS,CAAC4H,YAAY,GAAG,UAAUvG,KAAK,EAAEyD,MAAM,EAAEa,KAAK,EAAEO,MAAM,EAAEC,MAAM,EAAE;IAC/E,IAAID,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,EAAE;IAAE;IACtC,IAAI,IAAI,CAACtB,YAAY,EAAE;MACnB,OAAO,IAAI,CAACiD,iBAAiB,CAAC/C,MAAM,CAAC;IACzC,CAAC,MACI,IAAI,IAAI,CAACG,WAAW,KAAK,SAAS,EAAE;MACrC,OAAO,IAAI,CAACuB,kBAAkB,CAACnF,KAAK,EAAEsE,KAAK,CAAC;IAChD,CAAC,MACI;MACD,OAAO,IAAI,CAACM,iBAAiB,CAAC5E,KAAK,EAAEsE,KAAK,EAAEO,MAAM,EAAEC,MAAM,CAAC;IAC/D;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIhF,SAAS,CAACnB,SAAS,CAAC8H,iBAAiB,GAAG,UAAUC,UAAU,EAAEC,SAAS,EAAE;IACrE,IAAIA,SAAS,KAAK,OAAO,EAAE;MACvB,IAAI,CAAC/C,WAAW,GAAG,IAAI,CAAC5D,KAAK,CAACa,aAAa;MAC3C,IAAI,CAACgC,OAAO,GAAG,IAAI,CAAC7C,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,sBAAsB;IACjE,CAAC,MACI,IAAI4D,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,aAAa,EAAE;MAC/D,IAAI,CAAC/C,WAAW,GAAG,IAAI,CAAC5D,KAAK,CAACiE,aAAa;MAC3C,IAAI,CAAC2C,oBAAoB,GAAG,EAAE;MAC9B,IAAI,CAAC/D,OAAO,GAAG,IAAI,CAAC7C,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,sBAAsB;IACjE;IACA,IAAI,IAAI,CAAC/C,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACa,aAAa,KAAK,MAAM,EAAE;MAC5E,IAAI8F,SAAS,KAAK,OAAO,EAAE;QACvB,OAAO,KAAK;MAChB;IACJ;IACA,IAAK,CAAC,IAAI,CAAC3G,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,KAAK,IAAI,CAAC0C,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAAC,CAAC,CAAC,EAAG;MACjJ,IAAIC,YAAY,GAAGJ,UAAU,CAACP,UAAU,CAACpD,EAAE;MAC3C,IAAIgE,SAAS,GAAG,KAAK,CAAC;MACtB,IAAIL,UAAU,CAACP,UAAU,EAAE;QACvBY,SAAS,GAAID,YAAY,CAAC9F,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI8F,YAAY,CAAC9F,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,GAAI,IAAI,GAAG,KAAK;MACnH;MACA,KAAK,IAAIkF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACW,mBAAmB,CAACnC,MAAM,EAAEwB,CAAC,EAAE,EAAE;QACtD,IAAI,IAAI,CAACW,mBAAmB,CAACX,CAAC,CAAC,CAACc,YAAY,CAAC,OAAO,CAAC,EAAE;UACnD,IAAI,IAAI,CAACH,mBAAmB,CAACX,CAAC,CAAC,CAACe,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAC1E+F,SAAS,IAAIJ,SAAS,KAAK,OAAO,CAAC,EAAE;YACtC,IAAI,CAACE,mBAAmB,CAACX,CAAC,CAAC,CAACgB,eAAe,CAAC,OAAO,CAAC;YACpD,IAAI,IAAI,CAAClH,KAAK,CAACmH,cAAc,KAAK,EAAE,IAAI,CAACnI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,IAAI,IAAI,CAACnH,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;cAC7H,IAAI,IAAI,CAACP,mBAAmB,CAACX,CAAC,CAAC,CAACnD,EAAE,CAAC/B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACrD,KAAK,IAAIqG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACR,mBAAmB,CAACX,CAAC,CAAC,CAACoB,QAAQ,CAAC5C,MAAM,EAAE2C,CAAC,EAAE,EAAE;kBAClE,IAAI,CAACR,mBAAmB,CAACX,CAAC,CAAC,CAACoB,QAAQ,CAACD,CAAC,CAAC,CAACE,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAAC,IAAI,CAAC+D,WAAW,CAAC,IAAI,CAACZ,mBAAmB,CAACX,CAAC,CAAC,CAACnD,EAAE,CAAC,CAACU,MAAM,CAAC,CAACiE,QAAQ,CAAC;gBAC9J;cACJ,CAAC,MACI;gBACD,IAAI,CAACb,mBAAmB,CAACX,CAAC,CAAC,CAACqB,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAAC,IAAI,CAAC+D,WAAW,CAAC,IAAI,CAACZ,mBAAmB,CAACX,CAAC,CAAC,CAACnD,EAAE,CAAC,CAACU,MAAM,CAAC,CAACiE,QAAQ,CAAC;cAClJ;YACJ;YACA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACf,oBAAoB,EAAE,IAAI,CAACa,WAAW,CAAC,IAAI,CAACZ,mBAAmB,CAACX,CAAC,CAAC,CAACnD,EAAE,CAAC,CAAC;UACtG,CAAC,MACI,IAAI,CAACgE,SAAS,IAAI,IAAI,CAACF,mBAAmB,CAACX,CAAC,CAAC,CAACe,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;YAChG,IAAI,CAAC2D,gBAAgB,CAAC,IAAI,CAAC8C,WAAW,CAAC,IAAI,CAACZ,mBAAmB,CAACX,CAAC,CAAC,CAACnD,EAAE,CAAC,EAAE,IAAI,CAAC/C,KAAK,EAAE,IAAI,CAAC6G,mBAAmB,CAACX,CAAC,CAAC,CAAC;UACpH;QACJ;MACJ;IACJ;IACA,OAAO,IAAI;EACf,CAAC;EACDpG,SAAS,CAACnB,SAAS,CAACgD,UAAU,GAAG,UAAUiG,KAAK,EAAE;IAC9C,IAAI,CAACC,yBAAyB,CAACD,KAAK,CAACE,MAAM,EAAEF,KAAK,CAAC3C,IAAI,CAAC;EAC5D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInF,SAAS,CAACnB,SAAS,CAACkJ,yBAAyB,GAAG,UAAUE,aAAa,EAAEpB,SAAS,EAAE;IAChF,IAAI3H,iBAAiB,CAAC+I,aAAa,CAAC,EAAE;MAClC;IACJ;IACA,IAAK,IAAI,CAAC/H,KAAK,CAACa,aAAa,KAAK,MAAM,IAAI,IAAI,CAACb,KAAK,CAACiE,aAAa,KAAK,MAAM,IAC3E8D,aAAa,CAAChF,EAAE,IAAIgF,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,IAAI,CAAChB,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MAClF;IACJ;IACA,IAAI4D,SAAS,KAAK,WAAW,IAAIA,SAAS,KAAK,aAAa,EAAE;MAC1D,IAAIoB,aAAa,CAACf,YAAY,CAAC,OAAO,CAAC,KAAKe,aAAa,CAACd,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IACrG+G,aAAa,CAACd,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAChE;MACJ;MACA,IAAI,CAAChC,iBAAiB,CAAC+I,aAAa,CAAC5B,UAAU,CAAC,IAAI4B,aAAa,CAAC5B,UAAU,CAACa,YAAY,CAAC,OAAO,CAAC,KAC7Fe,aAAa,CAAC5B,UAAU,CAACc,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IACpE+G,aAAa,CAAC5B,UAAU,CAACc,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;QAC9E;MACJ;IACJ;IACA,IAAI,CAACyF,iBAAiB,CAACsB,aAAa,EAAEpB,SAAS,CAAC;IAChD,IAAIoB,aAAa,CAAChF,EAAE,IAAIgF,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI+G,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;MAC3G,IAAI8B,OAAO,GAAG,KAAK,CAAC;MACpB,IAAIiF,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE;QAC/C8B,OAAO,GAAGvD,UAAU,CAACwI,aAAa,CAAChF,EAAE,CAACiF,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;QAC1ElF,OAAO,GAAG9D,iBAAiB,CAAC8D,OAAO,CAAC,GAAGvD,UAAU,CAACwI,aAAa,CAAChF,EAAE,CAACiF,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGlF,OAAO;MACzG,CAAC,MACI,IAAIiF,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE;QACpD,OAAO,IAAI;MACf;MACA,IAAI,CAAC2D,gBAAgB,CAAC,IAAI,CAAC8C,WAAW,CAACM,aAAa,CAAChF,EAAE,CAAC,EAAE,IAAI,CAAC/C,KAAK,EAAE8C,OAAO,IAAIiF,aAAa,CAAC;IACnG;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjI,SAAS,CAACnB,SAAS,CAACgG,gBAAgB,GAAG,UAAUL,KAAK,EAAEtE,KAAK,EAAE8C,OAAO,EAAE;IACpE,IAAI,CAACS,YAAY,GAAG,IAAI,CAACK,WAAW,KAAK,QAAQ;IACjD,IAAI5D,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAACwB,IAAI,KAAK,eAAe,IAAInC,OAAO,IAC9DA,OAAO,CAACC,EAAE,KAAK/C,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGuB,KAAK,CAACb,MAAM,GAAG,SAAS,GAAGa,KAAK,CAACU,KAAK,GAAG,UAAU,EAAE;MACpGlC,OAAO,GAAGA,OAAO,CAACqD,UAAU;IAChC;IACA,IAAInG,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAACwB,IAAI,KAAK,MAAM,KAAK,IAAI,CAACrB,WAAW,KAAK,OAAO,IAAI,IAAI,CAACA,WAAW,KAAK,SAAS,CAAC,IAAId,OAAO,IACxHA,OAAO,CAACC,EAAE,KAAK,IAAI,CAAC/C,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGuB,KAAK,CAACb,MAAO,EAAE;MACpE,IAAIsC,SAAS,GAAG,IAAI,CAAChC,aAAa,CAAC/D,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAAC;MAC9D,IAAIwE,YAAY,GAAGvC,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAGI,SAAS,CAAC;MAC7D,IAAI,CAACH,qBAAqB,CAACqC,YAAY,EAAElC,SAAS,CAAC;MACnD,IAAI,CAACmC,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,KAAK,EAAEY,KAAK,CAACU,KAAK,CAAC;IAC9E;IACA,QAAQ,IAAI,CAACpB,WAAW;MACpB,KAAK,QAAQ;QACT,IAAI,CAACuE,SAAS,CAACnI,KAAK,EAAEsE,KAAK,EAAE,IAAI,CAACkC,iBAAiB,CAACxG,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC7D,iBAAiB,CAACI,KAAK,EAAEsE,KAAK,EAAE,IAAI,CAACV,WAAW,CAAC;QACtD,IAAI,CAACsE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,KAAK,EAAEY,KAAK,CAACU,KAAK,CAAC;QAC1E;MACJ,KAAK,OAAO;QACR,IAAI,CAACoD,KAAK,CAAC9D,KAAK,CAACU,KAAK,CAAC,IAAIlC,OAAO,EAAE;UAChC,IAAIuF,aAAa,GAAG,EAAE;UACtBA,aAAa,CAAC5C,IAAI,CAAC3C,OAAO,CAAC;UAC3B,IAAIuF,aAAa,CAAC,CAAC,CAAC,KAAK,IAAI,IAAIrI,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAACqB,MAAM,CAACI,OAAO,KACrElF,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAACwB,IAAI,CAACjE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAIhB,KAAK,CAACyD,MAAM,CAACa,KAAK,CAACb,MAAM,CAAC,CAACwB,IAAI,CAACjE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACrH,IAAI,EAAE8B,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,IAAIzB,UAAU,CAACuD,OAAO,CAACC,EAAE,GAAG,SAAS,CAAC,EAAE;cAC/EsF,aAAa,CAAC5C,IAAI,CAAClG,UAAU,CAACuD,OAAO,CAACC,EAAE,GAAG,SAAS,CAAC,CAAC;YAC1D,CAAC,MACI,IAAID,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,IAAIzB,UAAU,CAACuD,OAAO,CAACC,EAAE,CAACuF,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,EAAE;cAC5FD,aAAa,CAAC5C,IAAI,CAAClG,UAAU,CAACuD,OAAO,CAACC,EAAE,CAACuF,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;YACrE;UACJ;UACA,IAAI,CAACH,SAAS,CAACnI,KAAK,EAAEsE,KAAK,EAAE+D,aAAa,CAAC;UAC3C,IAAI,CAACzI,iBAAiB,CAACI,KAAK,EAAEsE,KAAK,EAAE,IAAI,CAACV,WAAW,CAAC;UACtD,IAAI,CAACsE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,KAAK,EAAEY,KAAK,CAACU,KAAK,CAAC;QAC9E;QACA;MACJ,KAAK,SAAS;QACV,IAAI,CAACoD,KAAK,CAAC9D,KAAK,CAACU,KAAK,CAAC,EAAE;UACrB,IAAI,CAACuD,gBAAgB,CAACvI,KAAK,EAAEsE,KAAK,CAAC;UACnC,IAAI,CAAC1E,iBAAiB,CAACI,KAAK,EAAEsE,KAAK,EAAE,IAAI,CAACV,WAAW,CAAC;UACtD,IAAI,CAACsE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,KAAK,EAAEY,KAAK,CAACU,KAAK,CAAC;QAC9E;QACA;IAAM;EAElB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIlF,SAAS,CAACnB,SAAS,CAACiB,iBAAiB,GAAG,UAAUI,KAAK,EAAEsE,KAAK,EAAEzD,aAAa,EAAE;IAC3E,IAAI2H,MAAM;IACV,IAAIC,UAAU;IACd,IAAInI,WAAW;IACf,IAAIoI,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,MAAM;IACV,IAAIC,cAAc;IAClB,IAAI/H,aAAa,KAAK,SAAS,EAAE;MAC7B,KAAK,IAAI2D,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC7D,IAAIf,MAAM,GAAG8B,EAAE,CAACf,EAAE,CAAC;QACnB,IAAIf,MAAM,CAACyB,OAAO,EAAE;UAChB,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,mBAAmB,CAACoB,MAAM,EAAEwB,CAAC,EAAE,EAAE;YACtDuC,UAAU,GAAGzI,KAAK,CAACe,aAAa,GAAG,IAAI,CAACuC,mBAAmB,CAAC4C,CAAC,CAAC,CAAClB,KAAK,GAAGV,KAAK,CAACU,KAAK;YAClF1E,WAAW,GAAGmD,MAAM,CAACa,KAAK;YAC1BkE,MAAM,GAAG/E,MAAM,CAAC+E,MAAM;YACtB,IAAI,CAACJ,KAAK,CAACK,UAAU,CAAC,EAAE;cACpBE,MAAM,GAAIlF,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAI,iBAAiB,GAAIuD,MAAM,CAACC,UAAU,CAAC,CAACE,MAAM,GACnFH,MAAM,CAACC,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,CAAC;cACnCF,cAAc,GAAGJ,MAAM,CAACC,UAAU,CAAC,CAACM,MAAM;cAC1C,IAAI/I,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;gBAC7CL,cAAc,GAAGJ,MAAM,CAACC,UAAU,CAAC,CAACS,CAAC,CAACC,cAAc,EAAE;cAC1D,CAAC,MACI,IAAInJ,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;gBAClDL,cAAc,GAAG,IAAIQ,IAAI,CAACZ,MAAM,CAACC,UAAU,CAAC,CAACM,MAAM,CAAC;cACxD;cACA,IAAItF,MAAM,CAAC4F,QAAQ,KAAK,WAAW,EAAE;gBACjCX,mBAAmB,CAACjD,IAAI,CAAC;kBACrByD,CAAC,EAAEN,cAAc;kBAAEE,CAAC,EAAEH,MAAM;kBAAErI,WAAW,EAAEA,WAAW;kBACtDmI,UAAU,EAAEA;gBAChB,CAAC,CAAC;cACN;cACA,IAAIhF,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAIxB,MAAM,CAACwB,IAAI,KAAK,iBAAiB,EAAE;gBAClEyD,mBAAmB,CAACjD,IAAI,CAAC;kBACrByD,CAAC,EAAEN,cAAc;kBAAEE,CAAC,EAAEN,MAAM,CAACC,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,CAAC;kBACrDxI,WAAW,EAAEA,WAAW;kBAAEmI,UAAU,EAAEA;gBAC1C,CAAC,CAAC;cACN;YACJ;UACJ;QACJ;MACJ;IACJ,CAAC,MACI,IAAI5H,aAAa,KAAK,QAAQ,EAAE;MACjC,IAAIb,KAAK,CAACe,aAAa,EAAE;QACrB,KAAK,IAAImF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,mBAAmB,CAACoB,MAAM,EAAEwB,CAAC,EAAE,EAAE;UACtD5F,WAAW,GAAG,IAAI,CAACgD,mBAAmB,CAAC4C,CAAC,CAAC,CAACzC,MAAM;UAChDiF,mBAAmB,CAACjD,IAAI,CAAC;YACrBnF,WAAW,EAAEA;UACjB,CAAC,CAAC;QACN;MACJ,CAAC,MACI;QACDA,WAAW,GAAI,IAAI,CAACgD,mBAAmB,CAACoB,MAAM,GAAG,CAAC,GAAI,IAAI,CAACpB,mBAAmB,CAAC,CAAC,CAAC,CAACG,MAAM,GAAG,CAAC;QAC5FiF,mBAAmB,CAACjD,IAAI,CAAC;UACrBnF,WAAW,EAAEA;QACjB,CAAC,CAAC;MACN;IACJ,CAAC,MACI,IAAIO,aAAa,KAAK,OAAO,EAAE;MAChC,KAAK,IAAIqF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC5C,mBAAmB,CAACoB,MAAM,EAAEwB,CAAC,EAAE,EAAE;QACtDuC,UAAU,GAAG,IAAI,CAACnF,mBAAmB,CAAC4C,CAAC,CAAC,CAAClB,KAAK;QAC9C1E,WAAW,GAAG,IAAI,CAACgD,mBAAmB,CAAC4C,CAAC,CAAC,CAACzC,MAAM;QAChD,IAAIA,MAAM,GAAGzD,KAAK,CAACyD,MAAM,CAACnD,WAAW,CAAC;QACtCkI,MAAM,GAAG/E,MAAM,CAAC+E,MAAM;QACtB,IAAI,CAACJ,KAAK,CAACK,UAAU,CAAC,EAAE;UACpBG,cAAc,GAAGJ,MAAM,CAACC,UAAU,CAAC,CAACM,MAAM;UAC1CJ,MAAM,GAAIlF,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAI,iBAAiB,GAAIuD,MAAM,CAACC,UAAU,CAAC,CAACE,MAAM,GACnFH,MAAM,CAACC,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC,CAAC,CAACC,CAAC;UACnC,IAAI9I,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;YAC7CL,cAAc,GAAGJ,MAAM,CAACC,UAAU,CAAC,CAACS,CAAC,CAACC,cAAc,EAAE;UAC1D,CAAC,MACI,IAAInJ,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;YAClDL,cAAc,GAAG,IAAIQ,IAAI,CAACZ,MAAM,CAACC,UAAU,CAAC,CAACM,MAAM,CAAC;UACxD;UACAL,mBAAmB,CAACjD,IAAI,CAAC;YACrByD,CAAC,EAAEN,cAAc;YAAEE,CAAC,EAAEH,MAAM;YAAErI,WAAW,EAAEA,WAAW;YACtDmI,UAAU,EAAEA;UAChB,CAAC,CAAC;QACN;MACJ;IACJ;IACA,IAAIa,IAAI,GAAG;MACPC,IAAI,EAAE3J,iBAAiB;MACvB4J,kBAAkB,EAAEd,mBAAmB;MACvCe,MAAM,EAAE;IACZ,CAAC;IACDzJ,KAAK,CAAC0J,OAAO,CAAC9J,iBAAiB,EAAE0J,IAAI,CAAC;EAC1C,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxJ,SAAS,CAACnB,SAAS,CAACwJ,SAAS,GAAG,UAAUnI,KAAK,EAAEsE,KAAK,EAAEgB,gBAAgB,EAAE;IACtE,IAAI,EAAE,IAAI,CAAC1B,WAAW,KAAK,OAAO,CAAC,EAAE;MACjC,IAAI,CAAC5D,KAAK,CAACe,aAAa,IAAK,IAAI,CAAC6C,WAAW,CAAC5C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC6B,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,IAC5GhB,KAAK,CAACa,aAAa,KAAK,MAAO,EAAE;QACjC,IAAI,CAAC8I,yBAAyB,CAAC3J,KAAK,EAAE,IAAI,CAACsD,mBAAmB,EAAEgB,KAAK,EAAEtE,KAAK,CAACyD,MAAM,CAAC;MACxF;IACJ;IACA,IAAImG,UAAU,GAAI,IAAI,CAACC,wBAAwB,EAAE,GAAI,CAAC,GAAGvF,KAAK,CAACb,MAAM;IACrE,IAAI,CAACzE,iBAAiB,CAACsG,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE;MACzC,IAAItF,KAAK,CAACyD,MAAM,CAACmG,UAAU,CAAC,CAACpE,YAAY,EAAE;QACvC,IAAIF,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,EAAE;UACxB,IAAI2C,QAAQ,CAACoE,cAAc,CAACxE,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,GAAG,SAAS,CAAC,EAAE;YAC7DuC,gBAAgB,CAACG,IAAI,CAAClG,UAAU,CAAC+F,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,GAAG,SAAS,CAAC,CAAC;UACzE,CAAC,MACI,IAAIuC,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,CAAC/B,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3D,IAAI0E,QAAQ,CAACoE,cAAc,CAACxE,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,CAACuF,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,EAAE;cACvFhD,gBAAgB,CAACG,IAAI,CAAClG,UAAU,CAAC+F,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,CAACuF,OAAO,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC;YACnG;UACJ;QACJ;MACJ;MACA,IAAIyB,KAAK,GAAG,KAAK,CAAC;MAClB,IAAIhE,SAAS,GAAGT,gBAAgB,CAAC,CAAC,CAAC,KAAKA,gBAAgB,CAAC,CAAC,CAAC,CAAC2B,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;MACxF,IAAI+C,UAAU,GAAG1E,gBAAgB,CAAC,CAAC,CAAC,CAACa,UAAU,KAC1Cb,gBAAgB,CAAC,CAAC,CAAC,CAACa,UAAU,CAACc,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;MAChE,IAAIlB,SAAS,KAAK,EAAE,IAAI,IAAI,CAACnC,WAAW,KAAK,SAAS,EAAE;QACpD,IAAI,CAACgC,qBAAqB,CAACN,gBAAgB,EAAES,SAAS,CAAC;MAC3D;MACA,IAAIT,gBAAgB,CAAC,CAAC,CAAC,IAAIS,SAAS,CAAC/E,OAAO,CAAC,IAAI,CAACiJ,iBAAiB,CAAC3E,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QAC/F,IAAI,CAACuD,YAAY,CAAChB,gBAAgB,CAAC;MACvC,CAAC,MACI,IAAIA,gBAAgB,CAAC,CAAC,CAAC,CAACa,UAAU,IAAI6D,UAAU,CAAChJ,OAAO,CAAC,IAAI,CAACiJ,iBAAiB,CAAC3E,gBAAgB,CAAC,CAAC,CAAC,CAACvC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;QAChH,IAAI,CAACuD,YAAY,CAAC,CAAChB,gBAAgB,CAAC,CAAC,CAAC,CAACa,UAAU,CAAC,CAAC;MACvD,CAAC,MACI;QACD,IAAI,CAACU,mBAAmB,GAAI7G,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAIjE,KAAK,CAACkE,cAAc,CAACC,eAAe,GAAImB,gBAAgB,GAAG,EAAE;QAC3H,IAAI,CAAC4E,WAAW,CAAC5E,gBAAgB,CAAC;QAClCyE,KAAK,GAAG,IAAI;MAChB;MACA,IAAI,IAAI,CAAClH,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,KAAKhB,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAIjE,KAAK,CAACkE,cAAc,CAACC,eAAe,CAAC,EAAE;QACnH,IAAI,CAACwD,gBAAgB,CAAC,IAAI,CAACf,oBAAoB,EAAEtC,KAAK,EAAEyF,KAAK,CAAC;MAClE,CAAC,MACI;QACD,IAAI,CAACpC,gBAAgB,CAAC,IAAI,CAACrE,mBAAmB,EAAEgB,KAAK,EAAEyF,KAAK,CAAC;MACjE;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjK,SAAS,CAACnB,SAAS,CAAC4J,gBAAgB,GAAG,UAAUvI,KAAK,EAAEsE,KAAK,EAAE;IAC3D,IAAI,CAAC6D,SAAS,CAACnI,KAAK,EAAEsE,KAAK,EAAE,IAAI,CAACa,kBAAkB,CAACnF,KAAK,EAAE,IAAIN,KAAK,CAAC4E,KAAK,CAACb,MAAM,EAAEa,KAAK,CAACU,KAAK,CAAC,CAAC,CAAC;EACtG,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIlF,SAAS,CAACnB,SAAS,CAACgL,yBAAyB,GAAG,UAAU3J,KAAK,EAAEsE,KAAK,EAAE6F,YAAY,EAAEC,gBAAgB,EAAE;IACpG,IAAI3G,MAAM;IACV,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAACI,MAAM,EAAEwB,CAAC,EAAE,EAAE;MACnCzC,MAAM,GAAG2G,gBAAgB,CAAC9F,KAAK,CAAC4B,CAAC,CAAC,CAACzC,MAAM,CAAC;MAC1C,IAAK,IAAI,CAACF,YAAY,IAAI,CAAC,IAAI,CAAC8G,QAAQ,CAAC/F,KAAK,CAAC4B,CAAC,CAAC,EAAEiE,YAAY,EAAE,IAAI,CAAC5G,YAAY,CAAC,IAC9E,IAAI,CAACK,WAAW,KAAK,SAAS,IAAI,CAAC,IAAI,CAACyG,QAAQ,CAAC/F,KAAK,CAAC4B,CAAC,CAAC,EAAEiE,YAAY,EAAE,KAAK,CAAE,IAChF,CAAC,IAAI,CAAC5G,YAAY,IAAI,IAAI,CAAC8G,QAAQ,CAAC/F,KAAK,CAAC4B,CAAC,CAAC,EAAEiE,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAACE,QAAQ,CAAC/F,KAAK,CAAC4B,CAAC,CAAC,EAAEiE,YAAY,EAAE,KAAK,CAAE,EAAE;QACtH,IAAI,CAAC7D,YAAY,CAAC,IAAI,CAACC,YAAY,CAACvG,KAAK,EAAEyD,MAAM,EAAEa,KAAK,CAAC4B,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACxE,IAAIzC,MAAM,CAACqB,MAAM,CAACI,OAAO,EAAE;UACvB,IAAI,CAACoB,YAAY,CAAC,IAAI,CAACC,YAAY,CAACvG,KAAK,EAAEyD,MAAM,EAAEa,KAAK,CAAC4B,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QAC3E;QACA5B,KAAK,CAACgG,MAAM,CAACpE,CAAC,EAAE,CAAC,CAAC;QAClBA,CAAC,EAAE;MACP;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIpG,SAAS,CAACnB,SAAS,CAACuJ,UAAU,GAAG,UAAUqC,OAAO,EAAE7G,aAAa,EAAE8G,QAAQ,EAAElG,KAAK,EAAE;IAChF,IAAIkG,QAAQ,KAAK,KAAK,CAAC,EAAE;MAAEA,QAAQ,GAAG,KAAK;IAAE;IAC7C,IAAIlG,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,CAAC;IAAE;IACnC,IAAImG,UAAU,GAAI,IAAI,CAACC,eAAe,CAAC,IAAI,CAAC9D,oBAAoB,EAAE,IAAI,CAAC5G,KAAK,CAAC,IACzE,IAAI,CAAC0K,eAAe,CAAC,IAAI,CAACpH,mBAAmB,EAAE,IAAI,CAACtD,KAAK,CAAE,CAAC,CAAC;IACjE,KAAK,IAAIwE,EAAE,GAAG,CAAC,EAAEmG,eAAe,GAAGjH,aAAa,EAAEc,EAAE,GAAGmG,eAAe,CAACjG,MAAM,EAAEF,EAAE,EAAE,EAAE;MACjF,IAAIf,MAAM,GAAGkH,eAAe,CAACnG,EAAE,CAAC;MAChC,IAAIoG,WAAW,GAAG,KAAK,CAAC;MACxB,IAAIC,iBAAiB,GAAG,KAAK,CAAC;MAC9B,IAAI,IAAI,CAAChB,wBAAwB,EAAE,EAAE;QACjC,IAAIW,QAAQ,IAAI,KAAK,EAAE;UACnBI,WAAW,GAAGzM,MAAM,CAAC2M,IAAI,CAACrH,MAAM,CAACsH,gBAAgB,CAAC,CAAC/J,OAAO,CAACyC,MAAM,CAAC+E,MAAM,CAAClE,KAAK,CAAC,CAACoD,QAAQ,CAAC;UACzFmD,iBAAiB,GAAGpH,MAAM,CAAC+E,MAAM,CAAClE,KAAK,CAAC,CAACoD,QAAQ;QACrD,CAAC,MACI;UACDkD,WAAW,GAAGtG,KAAK;UACnBuG,iBAAiB,GAAGnF,QAAQ,CAACoE,cAAc,CAACS,OAAO,GAAG,sBAAsB,GAAGjG,KAAK,CAAC,CAAC2C,YAAY,CAAC,MAAM,CAAC;QAC9G;MACJ,CAAC,MACI;QACD2D,WAAW,GAAGnH,MAAM,CAACa,KAAK;QAC1BuG,iBAAiB,GAAG,IAAI,CAAC7K,KAAK,CAAC0D,aAAa,CAACD,MAAM,CAACa,KAAK,CAAC,CAACoD,QAAQ;MACvE;MACA,IAAIjE,MAAM,CAACyB,OAAO,EAAE;QAChB,IAAI,CAAC8F,sBAAsB,CAACzL,UAAU,CAACgL,OAAO,GAAG,aAAa,GAAG9G,MAAM,CAACa,KAAK,CAAC,EAAE,IAAI,CAACP,aAAa,CAACN,MAAM,CAAC,EAAEgH,UAAU,EAAED,QAAQ,EAAEI,WAAW,EAAEC,iBAAiB,CAAC;QACjK,IAAI,CAAC7L,iBAAiB,CAACO,UAAU,CAACgL,OAAO,GAAG,aAAa,GAAG9G,MAAM,CAACa,KAAK,CAAC,CAAC,EAAE;UACxE,IAAI,CAAC0G,sBAAsB,CAACzL,UAAU,CAACgL,OAAO,GAAG,aAAa,GAAG9G,MAAM,CAACa,KAAK,CAAC,EAAE,IAAI,CAACP,aAAa,CAACN,MAAM,CAAC,EAAEgH,UAAU,EAAED,QAAQ,EAAEI,WAAW,EAAEC,iBAAiB,CAAC;QACrK;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI/K,SAAS,CAACnB,SAAS,CAACqM,sBAAsB,GAAG,UAAUlI,OAAO,EAAEiD,SAAS,EAAE0E,UAAU,EAAED,QAAQ,EAAE/G,MAAM,EAAEoH,iBAAiB,EAAE;IACxH,IAAIL,QAAQ,KAAK,KAAK,CAAC,EAAE;MAAEA,QAAQ,GAAG,IAAI;IAAE;IAC5C,IAAI/G,MAAM,KAAK,KAAK,CAAC,EAAE;MAAEA,MAAM,GAAG,CAAC;IAAE;IACrC,IAAIoH,iBAAiB,KAAK,KAAK,CAAC,EAAE;MAAEA,iBAAiB,GAAG,SAAS;IAAE;IACnE,IAAIvD,QAAQ,GAAI,IAAI,CAAC/D,YAAY,GAAG,CAACT,OAAO,CAAC,GAAGA,OAAO,CAACmI,UAAU,IAAInI,OAAQ;IAC9E,IAAI,IAAI,CAAC9C,KAAK,CAACa,aAAa,KAAK,MAAM,KAAK,IAAI,CAACb,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,CAAC,EAAE;MAC3HmD,QAAQ,GAAIxE,OAAO,CAACmI,UAAU,IAAInI,OAAQ;IAC9C;IACA,IAAIoI,gBAAgB;IACpB,IAAIC,eAAe;IACnB,IAAIC,WAAW;IACf,IAAIC,aAAa,GAAGvI,OAAO;IAC3B,KAAK,IAAIoD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoB,QAAQ,CAAC5C,MAAM,EAAEwB,CAAC,EAAE,EAAE;MACtCgF,gBAAgB,GAAG5D,QAAQ,CAACpB,CAAC,CAAC,CAACe,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;MAC1DkE,eAAe,GAAG7D,QAAQ,CAACpB,CAAC,CAAC,CAACC,UAAU,CAACc,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;MACpE,IAAI,IAAI,CAACjH,KAAK,CAACa,aAAa,KAAK,MAAM,KAAK,IAAI,CAACb,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,CAAC,EAAE;QAC3H4B,SAAS,GAAGmF,gBAAgB,CAAClK,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IACjDkK,gBAAgB,CAAClK,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAGkK,gBAAgB,GAAGnF,SAAS;QAC5EA,SAAS,GAAIoF,eAAe,CAACnK,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IACjDmK,eAAe,CAACnK,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAImK,eAAe,GAAGpF,SAAS;MAC/E;MACA,IAAImF,gBAAgB,CAAClK,OAAO,CAAC+E,SAAS,CAAC,KAAK,CAAC,CAAC,IAC1CoF,eAAe,CAACnK,OAAO,CAAC+E,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI0E,UAAU,EAAE;QACzD,IAAI,CAACa,WAAW,CAAChE,QAAQ,CAACpB,CAAC,CAAC,EAAE,IAAI,CAAClD,UAAU,CAAC;MAClD,CAAC,MACI;QACDqI,aAAa,GAAG/D,QAAQ,CAACpB,CAAC,CAAC;QAC3B,IAAI,CAACqF,cAAc,CAACjE,QAAQ,CAACpB,CAAC,CAAC,EAAE,IAAI,CAAClD,UAAU,CAAC;QACjD,IAAI,CAACuI,cAAc,CAACjE,QAAQ,CAACpB,CAAC,CAAC,CAACC,UAAU,EAAE,IAAI,CAACnD,UAAU,CAAC;MAChE;MACA,IAAIsE,QAAQ,CAACpB,CAAC,CAAC,CAACnD,EAAE,CAAC/B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAIqK,aAAa,CAACG,SAAS,CAAC,CAAC,CAAC,KAAKzF,SAAS,EAAE;QACrF,IAAI,CAACwF,cAAc,CAACjE,QAAQ,CAACpB,CAAC,CAAC,EAAE,IAAI,CAAClD,UAAU,CAAC;QACjD,IAAI,CAACuI,cAAc,CAACjE,QAAQ,CAACpB,CAAC,CAAC,CAACC,UAAU,EAAE,IAAI,CAACnD,UAAU,CAAC;QAC5D,IAAI,CAACsI,WAAW,CAAChE,QAAQ,CAACpB,CAAC,CAAC,EAAEH,SAAS,CAAC;MAC5C;IACJ;IACA,IAAIjD,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;MACnC,IAAK8B,OAAO,CAAC6C,gBAAgB,CAAC,GAAG,GAAGI,SAAS,CAAC,CAAC,CAAC,CAAC,IAAKjD,OAAO,CAAC6C,gBAAgB,CAAC,GAAG,GAAGI,SAAS,CAAC,CAAC,CAAC,CAAC,CAACkB,YAAY,CAAC,OAAO,CAAC,KAChHlB,SAAS,EAAE;QACf,IAAI0F,SAAS,GAAGlM,UAAU,CAAC,IAAI,CAACiI,OAAO,CAAC1E,OAAO,CAACC,EAAE,GAAG,UAAU,GAAGD,OAAO,CAACC,EAAE,CAACD,OAAO,CAACC,EAAE,CAAC2B,MAAM,GAAG,CAAC,CAAC,CAAC;QACpG,IAAIgH,eAAe,GAAGD,SAAS,IAAIA,SAAS,CAACzE,YAAY,CAAC,OAAO,CAAC,GAAGyE,SAAS,CAACxE,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE;QACzG,IAAIyE,eAAe,CAAC1K,OAAO,CAAC,IAAI,CAACgC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;UAC/C,IAAI,CAACuI,cAAc,CAACE,SAAS,EAAE,IAAI,CAACzI,UAAU,CAAC;QACnD;MACJ;IACJ;IACA,IAAI,IAAI,CAACwE,OAAO,CAACmE,YAAY,IAAI,IAAI,CAACnE,OAAO,CAACtD,cAAc,CAACgB,OAAO,EAAE;MAClEkG,WAAW,GAAG7L,UAAU,CAAC,IAAI,CAACiI,OAAO,CAAC1E,OAAO,CAACC,EAAE,GAAG,sBAAsB,GAAGU,MAAM,CAAC;MACnF,IAAI2H,WAAW,EAAE;QACb,IAAIA,WAAW,CAACpE,YAAY,CAAC,OAAO,CAAC,EAAE;UACnC,IAAI,CAACuE,cAAc,CAACH,WAAW,EAAEA,WAAW,CAACnE,YAAY,CAAC,OAAO,CAAC,CAAC;UACnE,IAAI,CAACjI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,IAAI,IAAI,CAACnH,KAAK,CAACmH,cAAc,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,CAACnH,KAAK,CAACkE,cAAc,CAACC,eAAe,EAAE;YACjIiH,WAAW,CAAC7D,YAAY,CAAC,QAAQ,EAAEsD,iBAAiB,CAAC;YACrD,IAAI,IAAI,CAAC7K,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;cACxCgE,WAAW,CAAC7D,YAAY,CAAC,MAAM,EAAEsD,iBAAiB,CAAC;YACvD;UACJ;QACJ;QACAK,gBAAgB,GAAGG,aAAa,CAACpE,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;QAC5DkE,eAAe,GAAGE,aAAa,CAAClF,UAAU,CAACc,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;QACtE,IAAIiE,gBAAgB,CAAClK,OAAO,CAAC+E,SAAS,CAAC,KAAK,CAAC,CAAC,IAAIoF,eAAe,CAACnK,OAAO,CAAC+E,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI0E,UAAU,EAAE;UACvG,IAAI,CAACa,WAAW,CAACF,WAAW,EAAG,IAAI,CAACpL,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,GAAI4B,SAAS,GAAG,IAAI,CAAC/C,UAAU,CAAC;UAC/I,IAAI,CAACuI,cAAc,CAACH,WAAW,EAAErF,SAAS,CAAC;UAC3C,IAAI,IAAI,CAAC/F,KAAK,CAACmH,cAAc,KAAK,EAAE,IAAI,CAACnI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,EAAE;YACnFiE,WAAW,CAAC7D,YAAY,CAAC,QAAQ,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAACD,MAAM,CAAC,CAACiE,QAAQ,CAAC;YAC/E,IAAI,IAAI,CAAC1H,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;cACxCgE,WAAW,CAAC7D,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAACD,MAAM,CAAC,CAACiE,QAAQ,CAAC;YACjF;UACJ;QACJ,CAAC,MACI;UACD,IAAI,CAAC6D,cAAc,CAACH,WAAW,EAAE,IAAI,CAACpI,UAAU,CAAC;UACjD,IAAI,CAAChE,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,IAAI,IAAI,CAACnH,KAAK,CAACmH,cAAc,KAAK,EAAE,EAAE;YACnFiE,WAAW,CAAC7D,YAAY,CAAC,QAAQ,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAACD,MAAM,CAAC,CAACiE,QAAQ,CAAC;YAC/E,IAAI,IAAI,CAAC1H,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;cACxCgE,WAAW,CAAC7D,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAACD,MAAM,CAAC,CAACiE,QAAQ,CAAC;YACjF;UACJ;UACA,IAAKwD,gBAAgB,KAAK,EAAE,IAAIC,eAAe,KAAK,EAAE,IAAKD,gBAAgB,CAACU,IAAI,EAAE,KAAK,eAAe,EAAE;YACpG,IAAI,CAACL,cAAc,CAACH,WAAW,EAAErF,SAAS,CAAC;UAC/C,CAAC,MACI;YACD,IAAI,CAACuF,WAAW,CAACF,WAAW,EAAErF,SAAS,CAAC;YACxC,IAAIA,SAAS,CAAC/E,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAAChB,KAAK,CAACmH,cAAc,KAAK,EAAE,IAAI,CAACnI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,EAAE;cACzHiE,WAAW,CAAC7D,YAAY,CAAC,QAAQ,EAAE,IAAI,CAACvH,KAAK,CAACmH,cAAc,CAAC;cAC7D,IAAI,IAAI,CAACtE,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAAChB,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;gBACjFgE,WAAW,CAAC7D,YAAY,CAAC,MAAM,EAAE,IAAI,CAACvH,KAAK,CAACmH,cAAc,CAAC;cAC/D;YACJ;UACJ;QACJ;QACA,IAAI0E,aAAa,GAAG,KAAK,CAAC;QAC1B,IAAI,IAAI,CAAChC,wBAAwB,EAAE,EAAE;UACjC,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClG,KAAK,CAAC8L,kBAAkB,CAACpH,MAAM,EAAEwB,CAAC,EAAE,EAAE;YAC3D2F,aAAa,GAAGnG,QAAQ,CAACoE,cAAc,CAAC,IAAI,CAAC9J,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,sBAAsB,GAAGmD,CAAC,CAAC;YAC3F,IAAIkF,WAAW,IAAIS,aAAa,EAAE;cAC9B,IAAI,CAACP,WAAW,CAACO,aAAa,EAAE,IAAI,CAAC7I,UAAU,CAAC;YACpD,CAAC,MACI,IAAIwH,QAAQ,IAAI,IAAI,EAAE;cACvB,IAAI,CAACc,WAAW,CAACO,aAAa,EAAE9F,SAAS,CAAC;YAC9C;YACA,IAAImF,gBAAgB,CAAClK,OAAO,CAAC+E,SAAS,CAAC,KAAK,CAAC,CAAC,IAAIyE,QAAQ,IAAI,KAAK,EAAE;cACjE,IAAI,CAACe,cAAc,CAACM,aAAa,EAAE,IAAI,CAAC7I,UAAU,CAAC;YACvD;UACJ;QACJ;QACA,IAAIwH,QAAQ,IAAIW,eAAe,CAACnK,OAAO,CAAC+E,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;UACrD,IAAI,CAACuF,WAAW,CAACF,WAAW,EAAErF,SAAS,CAAC;QAC5C;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIjG,SAAS,CAACnB,SAAS,CAACuL,WAAW,GAAG,UAAUjE,QAAQ,EAAE;IAClD,KAAK,IAAIzB,EAAE,GAAG,CAAC,EAAEuH,UAAU,GAAG9F,QAAQ,EAAEzB,EAAE,GAAGuH,UAAU,CAACrH,MAAM,EAAEF,EAAE,EAAE,EAAE;MAClE,IAAI1B,OAAO,GAAGiJ,UAAU,CAACvH,EAAE,CAAC;MAC5B,IAAI1B,OAAO,EAAE;QACT,IAAI,CAACyI,cAAc,CAACzI,OAAO,CAACqD,UAAU,EAAE,IAAI,CAACnD,UAAU,CAAC;QACxD,IAAI,CAACuI,cAAc,CAACzI,OAAO,EAAE,IAAI,CAACE,UAAU,CAAC;QAC7C,IAAI,IAAI,CAAChD,KAAK,CAACyD,MAAM,CAAC,CAAC,CAAC,CAACuI,iBAAiB,IAAI,MAAM,IAAI,IAAI,CAACnC,wBAAwB,EAAE,EAAE;UACrF,IAAI9D,SAAS,GAAG,IAAI,CAACkE,iBAAiB,CAACnH,OAAO,CAACC,EAAE,CAAC;UAClD,IAAIkJ,WAAW,GAAG,IAAI,CAACpJ,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAChB,KAAK,CAACoH,gBAAgB,GAAG,IAAI,CAACpH,KAAK,CAACkM,gBAAgB;UACnH,IAAIC,OAAO,GAAG,KAAK,CAAC;UACpB,IAAI7H,KAAK,GAAGyB,SAAS,CAAC/E,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAGoL,QAAQ,CAACrG,SAAS,CAACiC,KAAK,CAAC,IAAI,CAAChI,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,8BAA8B,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAGqJ,QAAQ,CAACrG,SAAS,CAACiC,KAAK,CAAC,IAAI,CAAChI,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,8BAA8B,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UACrO,IAAIgD,SAAS,CAAC/E,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI+E,SAAS,CAAC/E,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE;YAC5EmL,OAAO,GAAGzG,QAAQ,CAACoE,cAAc,CAAC,IAAI,CAAC9J,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,GAAG,GAAGkJ,WAAW,GAAG,GAAG,GAAG,WAAW,GAAG,GAAG,GAAG3H,KAAK,CAAC;UAClH;UACA,IAAIxB,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI8B,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAImL,OAAO,IAAI,IAAI,EAAE;YAC5F,KAAK,IAAIjG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiG,OAAO,CAAC7E,QAAQ,CAAC5C,MAAM,EAAEwB,CAAC,EAAE,EAAE;cAC9CiG,OAAO,CAAC7E,QAAQ,CAACpB,CAAC,CAAC,CAACqB,YAAY,CAAC,MAAM,EAAEzE,OAAO,CAACmE,YAAY,CAAC,MAAM,CAAC,CAAC;cACtEkF,OAAO,CAAC7E,QAAQ,CAACpB,CAAC,CAAC,CAACqB,YAAY,CAAC,QAAQ,EAAEzE,OAAO,CAACmE,YAAY,CAAC,MAAM,CAAC,CAAC;YAC5E;UACJ;QACJ;QACA,IAAI,CAACqE,WAAW,CAACxI,OAAO,EAAE,IAAI,CAACmH,iBAAiB,CAACnH,OAAO,CAACC,EAAE,CAAC,CAAC;QAC7D,IAAI,IAAI,CAACF,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,IAAI,CAAChB,KAAK,CAACmH,cAAc,KAAK,EAAE,IAAI,CAACnI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,IAAI,IAAI,CAACnH,KAAK,CAACoH,gBAAgB,KAAK,MAAM,EAAE;UACtK,IAAItE,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjC,KAAK,IAAIkF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,OAAO,CAACwE,QAAQ,CAAC5C,MAAM,EAAEwB,CAAC,EAAE,EAAE;cAC9CpD,OAAO,CAACwE,QAAQ,CAACpB,CAAC,CAAC,CAACqB,YAAY,CAAC,MAAM,EAAE,IAAI,CAACvH,KAAK,CAACmH,cAAc,CAAC;YACvE;UACJ,CAAC,MACI;YACDrE,OAAO,CAACyE,YAAY,CAAC,MAAM,EAAE,IAAI,CAACvH,KAAK,CAACmH,cAAc,CAAC;UAC3D;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIrH,SAAS,CAACnB,SAAS,CAACsL,iBAAiB,GAAG,UAAUlH,EAAE,EAAE;IAClD,OAAO,IAAI,CAACgB,aAAa,CAAC,IAAI,CAACyD,OAAO,CAAC/D,MAAM,CAAC,IAAI,CAACgE,WAAW,CAAC1E,EAAE,CAAC,CAACU,MAAM,CAAC,CAAC;EAC/E,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI3D,SAAS,CAACnB,SAAS,CAAC2H,YAAY,GAAG,UAAUL,QAAQ,EAAE;IACnD,KAAK,IAAIzB,EAAE,GAAG,CAAC,EAAE6H,UAAU,GAAGpG,QAAQ,EAAEzB,EAAE,GAAG6H,UAAU,CAAC3H,MAAM,EAAEF,EAAE,EAAE,EAAE;MAClE,IAAI1B,OAAO,GAAGuJ,UAAU,CAAC7H,EAAE,CAAC;MAC5B,IAAI1B,OAAO,EAAE;QACT,IAAI,CAACyI,cAAc,CAACzI,OAAO,EAAE,IAAI,CAACmH,iBAAiB,CAACnH,OAAO,CAACC,EAAE,CAAC,CAAC;QAChE,IAAI,IAAI,CAAC/C,KAAK,CAACoH,gBAAgB,KAAK,MAAM,IAAI,IAAI,CAACpH,KAAK,CAACmH,cAAc,KAAK,EAAE,IAAI,CAACnI,iBAAiB,CAAC,IAAI,CAACgB,KAAK,CAACmH,cAAc,CAAC,EAAE;UAC7H,IAAIrE,OAAO,CAACC,EAAE,CAAC/B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;YACjC,KAAK,IAAIkF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpD,OAAO,CAACwE,QAAQ,CAAC5C,MAAM,EAAEwB,CAAC,EAAE,EAAE;cAC9CpD,OAAO,CAACwE,QAAQ,CAACpB,CAAC,CAAC,CAACqB,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAAC,IAAI,CAAC+D,WAAW,CAAC3E,OAAO,CAACC,EAAE,CAAC,CAACU,MAAM,CAAC,CAACiE,QAAQ,CAAC;YACtH;UACJ,CAAC,MACI;YACD5E,OAAO,CAACyE,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,OAAO,CAAC9D,aAAa,CAAC,IAAI,CAAC+D,WAAW,CAAC3E,OAAO,CAACC,EAAE,CAAC,CAACU,MAAM,CAAC,CAACiE,QAAQ,CAAC;UAC1G;QACJ;MACJ;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI5H,SAAS,CAACnB,SAAS,CAACgJ,gBAAgB,GAAG,UAAUpD,OAAO,EAAED,KAAK,EAAEyF,KAAK,EAAE;IACpE,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,OAAO,CAACG,MAAM,EAAEwB,CAAC,EAAE,EAAE;MACrC,IAAI,IAAI,CAACmE,QAAQ,CAAC9F,OAAO,CAAC2B,CAAC,CAAC,EAAE5B,KAAK,EAAE,IAAI,CAACf,YAAY,CAAC,EAAE;QACrDgB,OAAO,CAAC+F,MAAM,CAACpE,CAAC,EAAE,CAAC,CAAC;QACpBA,CAAC,EAAE;MACP;IACJ;IACA,IAAI6D,KAAK,EAAE;MACPxF,OAAO,CAACkB,IAAI,CAACnB,KAAK,CAAC;IACvB;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxE,SAAS,CAACnB,SAAS,CAAC0L,QAAQ,GAAG,UAAUiC,KAAK,EAAEC,MAAM,EAAEC,eAAe,EAAE;IACrE,OAAQ,CAACF,KAAK,CAAC7I,MAAM,KAAK8I,MAAM,CAAC9I,MAAM,IAAK,IAAI,CAACG,WAAW,KAAK,SAAS,IAAI,CAAC4I,eAAgB,MACvFA,eAAe,IAAKF,KAAK,CAACtH,KAAK,KAAKuH,MAAM,CAACvH,KAAM,CAAC;EAC9D,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIlF,SAAS,CAACnB,SAAS,CAAC8N,eAAe,GAAG,UAAUzM,KAAK,EAAE0M,OAAO,EAAEC,WAAW,EAAE;IACzE,IAAI,CAACpJ,YAAY,GAAGmJ,OAAO,KAAK,QAAQ;IACxC,IAAI,CAAC1N,iBAAiB,CAAC0N,OAAO,CAAC,EAAE;MAC7B,IAAIA,OAAO,CAAC1L,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI0L,OAAO,KAAK,OAAO,IAAIC,WAAW,EAAE;QACtE3M,KAAK,CAAC4M,iBAAiB,GAAG,KAAK;MACnC,CAAC,MACI;QACD5M,KAAK,CAAC4M,iBAAiB,GAAG,IAAI;MAClC;IACJ;IACA,IAAItJ,mBAAmB,GAAGvE,MAAM,CAAC,EAAE,EAAE,IAAI,CAACuE,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1E,IAAIsD,oBAAoB,GAAG7H,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC6H,oBAAoB,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5E,IAAI,IAAI,CAAC/D,OAAO,CAAC7B,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI4F,oBAAoB,CAAClC,MAAM,GAAG,CAAC,EAAE;MAC1E,IAAI,CAACmI,sBAAsB,CAAC7M,KAAK,EAAE,IAAI,CAAC4G,oBAAoB,EAAE5G,KAAK,CAACyD,MAAM,CAAC;MAC3EH,mBAAmB,GAAGsD,oBAAoB;IAC9C,CAAC,MACI;MACD,IAAI,CAACiG,sBAAsB,CAAC7M,KAAK,EAAE,IAAI,CAACsD,mBAAmB,EAAEtD,KAAK,CAACyD,MAAM,CAAC;IAC9E;IACA,IAAI,CAACyE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,KAAK,CAAC;IAC7D,IAAI,CAACG,eAAe,CAAC7D,KAAK,EAAEsD,mBAAmB,CAAC;EACpD,CAAC;EACD;EACAxD,SAAS,CAACnB,SAAS,CAACmO,eAAe,GAAG,UAAU9M,KAAK,EAAEyD,MAAM,EAAEsE,aAAa,EAAEpB,SAAS,EAAE;IACrF,IAAIA,SAAS,KAAK,WAAW,EAAE;MAC3B,IAAIoB,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;QACtC+G,aAAa,GAAGxI,UAAU,CAACwI,aAAa,CAAChF,EAAE,CAACuF,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;MACzE;MACA,IAAIP,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACxC+G,aAAa,GAAGxI,UAAU,CAACwI,aAAa,CAAChF,EAAE,CAACuF,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;MACvE;MACA,IAAIP,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACnC+G,aAAa,GAAGxI,UAAU,CAACwI,aAAa,CAAChF,EAAE,CAACuF,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;MAC1E;MACA,IAAIP,aAAa,CAACf,YAAY,CAAC,OAAO,CAAC,KAAKe,aAAa,CAACd,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IACrG+G,aAAa,CAACd,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QAChE;MACJ;MACA,IAAI,CAAC4C,WAAW,GAAG,IAAI,CAAC5D,KAAK,CAACiE,aAAa;IAC/C;IACA,IAAI8I,aAAa,GAAG,IAAI,CAACtG,iBAAiB,CAACsB,aAAa,EAAEpB,SAAS,CAAC;IACpE,IAAIoG,aAAa,EAAE;MACf,IAAI1H,WAAW,GAAG,IAAI,CAACtB,aAAa,CAAC/D,KAAK,CAAC0D,aAAa,CAACD,MAAM,CAAC,CAAC;MACjE,IAAI6B,gBAAgB,GAAII,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAGN,WAAW,CAAE;MACrE,IAAI,CAAC9B,YAAY,GAAG,IAAI,CAACK,WAAW,KAAK,QAAQ;MACjD,IAAIoJ,kBAAkB,GAAG,IAAI;MAC7B,IAAI1H,gBAAgB,CAACZ,MAAM,GAAG,CAAC,EAAE;QAC7B,IAAI,CAACoB,eAAe,CAAC9F,KAAK,EAAEyD,MAAM,EAAE6B,gBAAgB,EAAED,WAAW,EAAE2H,kBAAkB,CAAC;MAC1F,CAAC,MACI;QACD,KAAK,IAAIxI,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;UAC7D,IAAI1B,OAAO,GAAGyC,EAAE,CAACf,EAAE,CAAC;UACpB,IAAI1B,OAAO,CAACwB,KAAK,KAAKb,MAAM,IAAI,CAACzD,KAAK,CAACe,aAAa,EAAE;YAClDsE,WAAW,GAAG,IAAI,CAACtB,aAAa,CAAC/D,KAAK,CAAC0D,aAAa,CAACZ,OAAO,CAACwB,KAAK,CAAC,CAAC;YACpEgB,gBAAgB,GAAGI,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAGN,WAAW,CAAC;YAC/D,IAAI,CAACS,eAAe,CAAC9F,KAAK,EAAEyD,MAAM,EAAE6B,gBAAgB,EAAED,WAAW,EAAE2H,kBAAkB,CAAC;UAC1F;QACJ;QACA,IAAIC,cAAc,GAAG,EAAE;QACvB,IAAI,IAAI,CAACpD,wBAAwB,EAAE,EAAE;UACjC,KAAK,IAAI3D,CAAC,GAAG,CAAC,EAAEgH,CAAC,GAAGlN,KAAK,CAAC0D,aAAa,CAAC,CAAC,CAAC,CAACyJ,aAAa,CAAC7F,QAAQ,EAAEpB,CAAC,GAAGgH,CAAC,CAACxI,MAAM,EAAEwB,CAAC,EAAE,EAAE;YAClF,IAAIlB,KAAK,GAAGkI,CAAC,CAAChH,CAAC,CAAC;YAChB,IAAI6B,aAAa,CAACd,YAAY,CAAC,MAAM,CAAC,KAAKjC,KAAK,CAACiC,YAAY,CAAC,MAAM,CAAC,EAAE;cACnEgG,cAAc,CAACxH,IAAI,CAACT,KAAK,CAAC;YAC9B;UACJ;UACA,KAAK,IAAIoI,EAAE,GAAG,CAAC,EAAEC,gBAAgB,GAAGJ,cAAc,EAAEG,EAAE,GAAGC,gBAAgB,CAAC3I,MAAM,EAAE0I,EAAE,EAAE,EAAE;YACpF,IAAItK,OAAO,GAAGuK,gBAAgB,CAACD,EAAE,CAAC;YAClC,IAAIpO,iBAAiB,CAAC8D,OAAO,CAAC,EAAE;cAC5B;YACJ;YACA,IAAI,CAACkI,sBAAsB,CAAClI,OAAO,EAAEuC,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE5B,MAAM,CAAC;UAC1E;QACJ,CAAC,MACI;UACDwJ,cAAc,GAAG,IAAI,CAACzG,iBAAiB,CAACxG,KAAK,CAAC0D,aAAa,CAACD,MAAM,CAAC,CAAC;UACpE,KAAK,IAAI6J,EAAE,GAAG,CAAC,EAAEC,gBAAgB,GAAGN,cAAc,EAAEK,EAAE,GAAGC,gBAAgB,CAAC7I,MAAM,EAAE4I,EAAE,EAAE,EAAE;YACpF,IAAIH,aAAa,GAAGI,gBAAgB,CAACD,EAAE,CAAC;YACxC,IAAItO,iBAAiB,CAACmO,aAAa,CAAC,EAAE;cAClC;YACJ;YACA,IAAI,CAACnC,sBAAsB,CAACmC,aAAa,EAAE9H,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE5B,MAAM,CAAC;UAChF;QACJ;QACA,IAAI,CAACF,YAAY,GAAG,IAAI;QACxB,IAAI,CAAC4E,SAAS,CAACnI,KAAK,EAAE,IAAIN,KAAK,CAAC+D,MAAM,EAAE+J,GAAG,CAAC,EAAEP,cAAc,CAAC;QAC7D,IAAI,CAAC1J,YAAY,GAAGvD,KAAK,CAACa,aAAa,KAAK,QAAQ;QACpD,IAAI,CAACqH,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,EAAE,IAAI,EAAED,MAAM,CAAC;MACxE;IACJ;EACJ,CAAC;EACD;EACA3D,SAAS,CAACnB,SAAS,CAACkL,wBAAwB,GAAG,YAAY;IACvD,IAAK,IAAI,CAAC7J,KAAK,CAAC8L,kBAAkB,IAAI,IAAI,CAAC9L,KAAK,CAAC8L,kBAAkB,CAACpH,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC1E,KAAK,CAAC0D,aAAa,CAACgB,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC1E,KAAK,CAAC8L,kBAAkB,CAAC,CAAC,CAAC,CAAC2B,MAAM,CAAC/I,MAAM,GAAG,CAAC,KACxK,IAAI,CAAC1E,KAAK,CAACyD,MAAM,CAAC,CAAC,CAAC,CAACwB,IAAI,KAAK,QAAQ,IAAI,IAAI,CAACjF,KAAK,CAACyD,MAAM,CAAC,CAAC,CAAC,CAACwB,IAAI,KAAK,KAAK,IAC1E,IAAI,CAACjF,KAAK,CAACyD,MAAM,CAAC,CAAC,CAAC,CAACwB,IAAI,KAAK,SAAS,IAAI,IAAI,CAACjF,KAAK,CAACyD,MAAM,CAAC,CAAC,CAAC,CAACwB,IAAI,KAAK,QAAQ,CAAC,EAAG;MACzF,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAO,KAAK;IAChB;EACJ,CAAC;EACDnF,SAAS,CAACnB,SAAS,CAACmH,eAAe,GAAG,UAAU9F,KAAK,EAAEyD,MAAM,EAAE6B,gBAAgB,EAAED,WAAW,EAAE2H,kBAAkB,EAAE;IAC9G,IAAI1H,gBAAgB,CAACZ,MAAM,GAAG,CAAC,EAAE;MAC7B,IAAIuB,QAAQ,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,gBAAgB,CAACZ,MAAM,EAAEwB,CAAC,EAAE,EAAE;QAC9CD,QAAQ,CAACR,IAAI,CAACH,gBAAgB,CAACY,CAAC,CAAC,CAAC;MACtC;MACA,IAAI,CAACI,YAAY,CAACL,QAAQ,CAAC;MAC3B,IAAI,CAAC1C,YAAY,GAAG,IAAI;MACxB,IAAI,CAACoE,gBAAgB,CAAC,IAAI,CAACrE,mBAAmB,EAAE,IAAI5D,KAAK,CAAC+D,MAAM,EAAE+J,GAAG,CAAC,CAAC;MACvE,KAAK,IAAIhJ,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC7D,IAAIkJ,KAAK,GAAGnI,EAAE,CAACf,EAAE,CAAC;QAClBa,WAAW,GAAG,IAAI,CAACtB,aAAa,CAAC2J,KAAK,CAAC;QACvC,IAAIhI,QAAQ,CAACC,gBAAgB,CAAC,GAAG,GAAGN,WAAW,CAAC,CAACX,MAAM,GAAG,CAAC,EAAE;UACzD,KAAK,IAAI0I,EAAE,GAAG,CAAC,EAAEO,UAAU,GAAG1H,QAAQ,EAAEmH,EAAE,GAAGO,UAAU,CAACjJ,MAAM,EAAE0I,EAAE,EAAE,EAAE;YAClE,IAAItK,OAAO,GAAG6K,UAAU,CAACP,EAAE,CAAC;YAC5B,IAAI,CAACpC,sBAAsB,CAAClI,OAAO,EAAEuC,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE5B,MAAM,CAAC;UACzE;UACAuJ,kBAAkB,GAAG,KAAK;UAC1B;QACJ;MACJ;MACA,IAAIA,kBAAkB,EAAE;QACpB,IAAI,CAACzJ,YAAY,GAAGvD,KAAK,CAACa,aAAa,KAAK,QAAQ;QACpD,IAAI,CAACqH,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,CAAC;MAC1D;IACJ;EACJ,CAAC;EACD;EACA5D,SAAS,CAACnB,SAAS,CAAC6H,iBAAiB,GAAG,UAAU/C,MAAM,EAAE;IACtD,IAAIwJ,cAAc,GAAG,CAACxJ,MAAM,CAAC0J,aAAa,CAAC;IAC3C,IAAI1J,MAAM,CAACqB,MAAM,CAACI,OAAO,IAAIzB,MAAM,CAACwB,IAAI,KAAK,SAAS,IAAIxB,MAAM,CAACwB,IAAI,KAAK,QAAQ,IAAI,CAACxB,MAAM,CAAC+B,YAAY,EAAE;MACxGyH,cAAc,CAACxH,IAAI,CAAChC,MAAM,CAACmK,aAAa,CAAC;IAC7C,CAAC,MACI,IAAInK,MAAM,CAACqB,MAAM,CAACI,OAAO,IAAIzB,MAAM,CAAC+B,YAAY,EAAE;MACnDyH,cAAc,CAACxH,IAAI,CAAChC,MAAM,CAACmK,aAAa,CAAC;IAC7C;IACA,OAAOX,cAAc;EACzB,CAAC;EACD;EACAnN,SAAS,CAACnB,SAAS,CAAC8I,WAAW,GAAG,UAAU1E,EAAE,EAAE;IAC5C,IAAI8K,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC;IACxB,IAAI9K,EAAE,CAAC/B,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;MAChC6M,GAAG,GAAG9K,EAAE,CAACiF,KAAK,CAAC,aAAa,CAAC;MAC7B6F,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IACnB,CAAC,MACI,IAAI9K,EAAE,CAAC/B,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE;MACrC6M,GAAG,GAAG9K,EAAE,CAACiF,KAAK,CAAC,aAAa,CAAC;MAC7B6F,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IACnB,CAAC,MACI,IAAI9K,EAAE,CAAC/B,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE;MACjC6M,GAAG,GAAG9K,EAAE,CAACiF,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,SAAS,CAAC;IAClD,CAAC,MACI,IAAIjF,EAAE,CAAC/B,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;MAClC6M,GAAG,CAAC,CAAC,CAAC,GAAG9K,EAAE,CAACiF,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,MACI,IAAIjF,EAAE,CAAC/B,OAAO,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,EAAE;MAC9C6M,GAAG,GAAG9K,EAAE,CAACiF,KAAK,CAAC,sBAAsB,CAAC;MACtC6F,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;IACnB;IACA,OAAO,IAAInO,KAAK,CAAC0M,QAAQ,CAACyB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,EAAEzB,QAAQ,CAACyB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EAChE,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI/N,SAAS,CAACnB,SAAS,CAACmP,6BAA6B,GAAG,UAAU9N,KAAK,EAAE+N,QAAQ,EAAEC,OAAO,EAAE;IACpF,IAAI,CAACnB,sBAAsB,CAAC7M,KAAK,EAAE,IAAI,CAACsD,mBAAmB,EAAEtD,KAAK,CAACyD,MAAM,CAAC;IAC1E,IAAIwK,OAAO,GAAGjO,KAAK,CAACa,aAAa,KAAK,OAAO;IAC7C,IAAIqN,IAAI,GAAG,IAAI1O,IAAI,CAACuO,QAAQ,CAAC7E,CAAC,EAAE6E,QAAQ,CAACjF,CAAC,EAAEiF,QAAQ,CAACI,KAAK,EAAEJ,QAAQ,CAACK,MAAM,CAAC;IAC5E,IAAIC,UAAU,GAAG,IAAIpP,aAAa,CAACe,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC2G,CAAC,EAAElJ,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAACuG,CAAC,CAAC;IAC5H,IAAI,CAACwF,YAAY,CAACJ,IAAI,EAAEG,UAAU,CAAC;IACnC,IAAI7F,MAAM;IACV,IAAIlE,KAAK;IACT,IAAIoE,mBAAmB,GAAG,EAAE;IAC5B,IAAI6F,oBAAoB,GAAG,EAAE;IAC7B,IAAI,CAAChL,YAAY,GAAG,KAAK;IACzB,IAAIiL,YAAY,GAAIxO,KAAK,CAACyO,mBAAmB,KAAM,IAAI,CAACC,YAAY,IAAI,IAAI,CAACC,QAAQ,CAAC;IACtF,IAAI,CAACvM,UAAU,GAAG,IAAI,CAAC5B,aAAa,CAACgO,YAAY,GAAG,IAAI,CAACI,WAAW,GAAG,IAAI,CAACrO,KAAK,CAAC,GAC9E,IAAIf,IAAI,CAACuO,QAAQ,CAAC7E,CAAC,EAAE6E,QAAQ,CAACjF,CAAC,EAAEiF,QAAQ,CAACI,KAAK,EAAEJ,QAAQ,CAACK,MAAM,CAAC;IACrE,IAAIL,QAAQ,CAACI,KAAK,IAAIJ,QAAQ,CAACK,MAAM,IAAI,CAACJ,OAAO,EAAE;MAC/C,IAAIa,EAAE,GAAG,IAAIrP,IAAI,CAACuO,QAAQ,CAAC7E,CAAC,EAAE6E,QAAQ,CAACjF,CAAC,EAAEiF,QAAQ,CAACI,KAAK,EAAEJ,QAAQ,CAACK,MAAM,CAAC;MAC1E,IAAI,CAACE,YAAY,CAACO,EAAE,EAAER,UAAU,CAAC;MACjC,IAAI,CAAC5N,WAAW,CAAC+N,YAAY,GAAG,IAAI,CAACI,WAAW,GAAG,IAAI,CAACrO,KAAK,CAAC,GAAGsO,EAAE;IACvE;IACA,IAAIC,OAAO,GAAG,UAAUrL,MAAM,EAAE;MAC5B,IAAIA,MAAM,CAACyB,OAAO,EAAE;QAChBsD,MAAM,GAAG/E,MAAM,CAAC+E,MAAM;QACtBE,mBAAmB,GAAG,EAAE;QACxB,IAAIqG,aAAa;QACjB,IAAIC,aAAa;QACjB,IAAI,CAAChP,KAAK,CAACiP,YAAY,IAAIxL,MAAM,CAACwB,IAAI,CAACjE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KACxD,EAAEhB,KAAK,CAACiP,YAAY,IAAIxL,MAAM,CAACwB,IAAI,CAACjE,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;UAC5D+N,aAAa,GAAGtL,MAAM,CAACyL,KAAK,CAAChB,IAAI,CAACpF,CAAC,GAAGuF,UAAU,CAACvF,CAAC;UAClDkG,aAAa,GAAGvL,MAAM,CAAC0L,KAAK,CAACjB,IAAI,CAAChF,CAAC,GAAGmF,UAAU,CAACnF,CAAC;QACtD,CAAC,MACI;UACD6F,aAAa,GAAGtL,MAAM,CAACyL,KAAK,CAAChB,IAAI,CAAChF,CAAC,GAAGmF,UAAU,CAACnF,CAAC;UAClD8F,aAAa,GAAGvL,MAAM,CAAC0L,KAAK,CAACjB,IAAI,CAACpF,CAAC,GAAGuF,UAAU,CAACvF,CAAC;QACtD;QACA,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmB,MAAM,CAAC9D,MAAM,EAAE2C,CAAC,EAAE,EAAE;UACpC,IAAIsB,MAAM,GAAIlF,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAI,iBAAiB,GAAIuD,MAAM,CAACnB,CAAC,CAAC,CAACsB,MAAM,GAC9EH,MAAM,CAACnB,CAAC,CAAC,CAACwB,OAAO,CAAC,CAAC,CAAC,CAACC,CAAC;UAC1B,IAAIsG,cAAc,GAAG,KAAK,CAAC;UAC3B,IAAIxG,cAAc,GAAGJ,MAAM,CAACnB,CAAC,CAAC,CAAC0B,MAAM;UACrC,IAAI/I,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;YAC7CL,cAAc,GAAGJ,MAAM,CAACnB,CAAC,CAAC,CAAC6B,CAAC,CAACC,cAAc,EAAE;UACjD,CAAC,MACI,IAAInJ,KAAK,CAACgJ,YAAY,CAACC,SAAS,KAAK,UAAU,EAAE;YAClDL,cAAc,GAAG,IAAIQ,IAAI,CAACZ,MAAM,CAACnB,CAAC,CAAC,CAAC0B,MAAM,CAAC;UAC/C;UACA,IAAItF,MAAM,CAACwB,IAAI,KAAK,eAAe,EAAE;YACjCmK,cAAc,GAAG5G,MAAM,CAACnB,CAAC,CAAC,CAACwB,OAAO,CAACwG,IAAI,CAAC,UAAUC,MAAM,EAAE;cACtD,OAAOlQ,YAAY,CAACkQ,MAAM,CAACpG,CAAC,GAAG6F,aAAa,EAAEO,MAAM,CAACxG,CAAC,GAAGkG,aAAa,EAAEd,IAAI,CAAC;YACjF,CAAC,CAAC;UACN,CAAC,MACI;YACD,IAAIlO,KAAK,CAACa,aAAa,KAAK,OAAO,EAAE;cACjCuO,cAAc,GAAG5G,MAAM,CAACnB,CAAC,CAAC,CAACkI,QAAQ;YACvC,CAAC,MACI;cACDH,cAAc,GAAIpP,KAAK,CAACyO,mBAAmB,GACvCe,MAAM,CAACC,aAAa,CAACjH,MAAM,CAACnB,CAAC,CAAC,EAAE0H,aAAa,EAAEC,aAAa,EAAEQ,MAAM,CAAC/O,WAAW,CAAC,GACjF+H,MAAM,CAACnB,CAAC,CAAC,CAACqI,eAAe,CAACL,IAAI,CAAC,UAAUM,QAAQ,EAAE;gBAC/C,OAAOA,QAAQ,IAAIvQ,YAAY,CAACuQ,QAAQ,CAACzG,CAAC,GAAG6F,aAAa,EAAEY,QAAQ,CAAC7G,CAAC,GAAGkG,aAAa,EAAEd,IAAI,CAAC;cACjG,CAAC,CAAC;YACV;UACJ;UACA,IAAIkB,cAAc,IAAI3L,MAAM,CAAC4F,QAAQ,KAAK,WAAW,EAAE;YACnD/E,KAAK,GAAG,IAAI5E,KAAK,CAAC+D,MAAM,CAACa,KAAK,EAAEkE,MAAM,CAACnB,CAAC,CAAC,CAAC/C,KAAK,CAAC;YAChDkL,MAAM,CAACrH,SAAS,CAACnI,KAAK,EAAEsE,KAAK,EAAEkL,MAAM,CAACjJ,YAAY,CAACvG,KAAK,EAAEyD,MAAM,EAAEa,KAAK,EAAE,EAAE,EAAE,CAACb,MAAM,CAAC+B,YAAY,GAAG/B,MAAM,CAACqB,MAAM,CAACI,OAAO,GAAG,KAAK,CAAC,CAAC;YACnIwD,mBAAmB,CAACjD,IAAI,CAAC;cAAEyD,CAAC,EAAEN,cAAc;cAAEE,CAAC,EAAEH;YAAO,CAAC,CAAC;UAC9D;UACA,IAAIyG,cAAc,KAAK3L,MAAM,CAACwB,IAAI,KAAK,WAAW,IAAIxB,MAAM,CAACwB,IAAI,KAAK,iBAAiB,CAAC,EAAE;YACtFyD,mBAAmB,CAACjD,IAAI,CAAC;cAAEyD,CAAC,EAAEN,cAAc;cAAEE,CAAC,EAAEN,MAAM,CAACnB,CAAC,CAAC,CAACwB,OAAO,CAAC,CAAC,CAAC,CAACC;YAAE,CAAC,CAAC;UAC9E;QACJ;QACAyF,oBAAoB,CAAC9I,IAAI,CAACiD,mBAAmB,CAAC;MAClD;IACJ,CAAC;IACD,IAAI8G,MAAM,GAAG,IAAI;IACjB,KAAK,IAAIhL,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC7D,IAAIf,MAAM,GAAG8B,EAAE,CAACf,EAAE,CAAC;MACnBsK,OAAO,CAACrL,MAAM,CAAC;IACnB;IACA,IAAI,CAACyE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,CAAC;IACtD,IAAIwF,CAAC,GAAG+E,OAAO,GAAGjO,KAAK,CAACwC,UAAU,GAAIuL,QAAQ,CAAC7E,CAAC,GAAG6E,QAAQ,CAACI,KAAM;IAClE,IAAIrF,CAAC,GAAGmF,OAAO,GAAGjO,KAAK,CAACyC,UAAU,GAAGsL,QAAQ,CAACjF,CAAC;IAC/C,IAAI,CAACkF,OAAO,EAAE;MACV,IAAI,CAAC4B,iBAAiB,CAAC1G,CAAC,EAAEJ,CAAC,CAAC;IAChC;IACA,IAAIQ,IAAI,GAAG;MACPC,IAAI,EAAE5J,YAAY;MAClB6J,kBAAkB,EAAE+E,oBAAoB;MACxC9E,MAAM,EAAE;IACZ,CAAC;IACDzJ,KAAK,CAAC0J,OAAO,CAAC/J,YAAY,EAAE2J,IAAI,CAAC;EACrC,CAAC;EACDxJ,SAAS,CAACnB,SAAS,CAAC2P,YAAY,GAAG,UAAUJ,IAAI,EAAE2B,IAAI,EAAE;IACrD3B,IAAI,CAAChF,CAAC,IAAI2G,IAAI,CAAC3G,CAAC;IAChBgF,IAAI,CAACpF,CAAC,IAAI+G,IAAI,CAAC/G,CAAC;EACpB,CAAC;EACDhJ,SAAS,CAACnB,SAAS,CAAC8Q,aAAa,GAAG,UAAUjH,MAAM,EAAEsH,WAAW,EAAEC,WAAW,EAAEC,cAAc,EAAE;IAC5F,IAAIL,QAAQ,GAAGnH,MAAM,CAACkH,eAAe,CAAC,CAAC,CAAC;IACxC,KAAK,IAAIlL,EAAE,GAAG,CAAC,EAAEyL,gBAAgB,GAAGD,cAAc,EAAExL,EAAE,GAAGyL,gBAAgB,CAACvL,MAAM,EAAEF,EAAE,EAAE,EAAE;MACpF,IAAI0J,IAAI,GAAG+B,gBAAgB,CAACzL,EAAE,CAAC;MAC/B,IAAI0J,IAAI,IAAIyB,QAAQ,IAAIvQ,YAAY,CAACuQ,QAAQ,CAACzG,CAAC,GAAG4G,WAAW,EAAEH,QAAQ,CAAC7G,CAAC,GAAGiH,WAAW,EAAE7B,IAAI,CAAC,EAAE;QAC5F,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIpO,SAAS,CAACnB,SAAS,CAACuR,gBAAgB,GAAG,UAAUlQ,KAAK,EAAE+N,QAAQ,EAAEjG,MAAM,EAAE;IACtE,IAAIqI,eAAe,GAAGnQ,KAAK,CAACsC,oBAAoB,CAACC,cAAc;IAC/D,IAAI6N,MAAM,GAAGpQ,KAAK,CAACqQ,SAAS,CAACD,MAAM,CAACjC,KAAK;IACzC,IAAImC,QAAQ,GAAGtQ,KAAK,CAACuQ,UAAU,CAACC,iBAAiB;IACjD,IAAIC,UAAU,GAAGzQ,KAAK,CAACuQ,UAAU,CAACG,mBAAmB;IACrD,IAAIzC,OAAO,GAAGjO,KAAK,CAACa,aAAa,KAAK,OAAO;IAC7C,IAAI,IAAI,CAACV,UAAU,EAAE;MACjBgQ,eAAe,CAACjH,CAAC,GAAGiH,eAAe,CAACjH,CAAC,GAAGkH,MAAM,GAAG,CAAC;MAClDD,eAAe,CAACrH,CAAC,GAAGqH,eAAe,CAACrH,CAAC,GAAGsH,MAAM,GAAG,CAAC;MAClDD,eAAe,CAAChC,KAAK,GAAGgC,eAAe,CAAChC,KAAK,GAAGiC,MAAM;MACtDD,eAAe,CAAC/B,MAAM,GAAG+B,eAAe,CAAC/B,MAAM,GAAGgC,MAAM;MACxD,IAAI,CAACjQ,UAAU,GAAG,KAAK;IAC3B;IACA,QAAQH,KAAK,CAACa,aAAa;MACvB,KAAK,OAAO;QACRkN,QAAQ,CAACjF,CAAC,GAAGqH,eAAe,CAACrH,CAAC;QAC9BiF,QAAQ,CAACK,MAAM,GAAG+B,eAAe,CAAC/B,MAAM;QACxC;MACJ,KAAK,OAAO;QACRL,QAAQ,CAAC7E,CAAC,GAAGiH,eAAe,CAACjH,CAAC;QAC9B6E,QAAQ,CAACI,KAAK,GAAGgC,eAAe,CAAChC,KAAK;QACtC;IAAM;IAEd,IAAI,CAACJ,QAAQ,CAACI,KAAK,GAAG,CAAC,IAAIJ,QAAQ,CAACK,MAAM,GAAG,CAAC,KAAK,CAACH,OAAO,EAAE;MACzD,OAAO,IAAI;IACf;IACA,IAAI0C,UAAU,GAAG3Q,KAAK,CAACa,aAAa,CAACG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAIhB,KAAK,CAACa,aAAa,KAAK,OAAO;IAC5F,IAAKb,KAAK,CAACyO,mBAAmB,IAAKkC,UAAU,EAAE;MAC3C,IAAI7N,OAAO,GAAG,KAAK,CAAC;MACpB,IAAI8N,SAAS,GAAG,KAAK,CAAC;MACtB,IAAIC,UAAU,GAAGtR,UAAU,CAAC,IAAI,CAAC4D,cAAc,CAAC;MAChD,IAAI,CAAC0N,UAAU,EAAE;QACbA,UAAU,GAAG7Q,KAAK,CAAC8Q,WAAW,CAACC,WAAW,CAAC;UAAEhO,EAAE,EAAE,IAAI,CAACI;QAAe,CAAC,CAAC;QACvEnD,KAAK,CAACgR,SAAS,CAACC,WAAW,CAACJ,UAAU,CAAC;MAC3C;MACA,IAAI,IAAI,CAACnC,YAAY,IAAI,IAAI,CAACC,QAAQ,EAAE;QACpC,IAAIuC,WAAW,GAAG,KAAK,CAAC;QACxBA,WAAW,GAAG3R,UAAU,CAAC,IAAI,CAAC6D,WAAW,GAAG,IAAI,CAACwL,WAAW,CAAC;QAC7D,IAAIsC,WAAW,CAACC,WAAW,EAAE;UACzBrS,MAAM,CAACoS,WAAW,CAACC,WAAW,CAAC;QACnC;QACA,IAAI,CAACC,aAAa,CAACF,WAAW,EAAEnD,QAAQ,CAAC;MAC7C,CAAC,MACI,IAAI,CAACxO,UAAU,CAAC,IAAI,CAAC2D,gBAAgB,GAAG,IAAI,CAAC3C,KAAK,CAAC,EAAE;QACtDqQ,SAAS,GAAG5Q,KAAK,CAAC8Q,WAAW,CAACC,WAAW,CAAC;UAAEhO,EAAE,EAAE,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAAC3C;QAAM,CAAC,CAAC;QACrF,IAAI8Q,UAAU,GAAG3L,QAAQ,CAACoE,cAAc,CAAC9J,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,aAAa,CAAC;QAC1E;QACA/C,KAAK,CAACsR,YAAY,GAAGD,UAAU,CAACJ,WAAW,CAACL,SAAS,CAAC,GAAGC,UAAU,CAACI,WAAW,CAACL,SAAS,CAAC;MAC9F;MACA,IAAI,EAAE5Q,KAAK,CAACa,aAAa,KAAK,OAAO,CAAC,EAAE;QACpCiC,OAAO,GAAG9C,KAAK,CAAC8Q,WAAW,CAACS,aAAa,CAAC,IAAIrS,UAAU,CAAC,IAAI,CAACkE,WAAW,GAAG,IAAI,CAAC7C,KAAK,EAAE+P,QAAQ,EAAE;UAAEkB,KAAK,EAAEf,UAAU;UAAEtC,KAAK,EAAE;QAAE,CAAC,EAAE,CAAC,EAAEJ,QAAQ,CAAC,CAAC;QAChJjL,OAAO,CAAC2O,KAAK,CAACC,MAAM,GAAG,MAAM;MACjC,CAAC,MACI;QACD5O,OAAO,GAAG9C,KAAK,CAAC8Q,WAAW,CAACa,QAAQ,CAAC,IAAIlS,UAAU,CAAC,IAAI,CAAC4D,SAAS,GAAG,IAAI,CAAC9C,KAAK,EAAE+P,QAAQ,EAAE,CAAC,EAAEG,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CAACmB,IAAI,CAAC,CAAC;MAChI;MACA,IAAI,CAAChB,SAAS,IAAI,CAAC,IAAI,CAAClC,YAAY,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QACpDpP,UAAU,CAAC,IAAI,CAAC2D,gBAAgB,GAAG,IAAI,CAAC3C,KAAK,CAAC,CAAC0Q,WAAW,CAACnO,OAAO,CAAC;MACvE,CAAC,MACI,IAAI,CAAC,IAAI,CAAC4L,YAAY,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QAC3CiC,SAAS,CAACK,WAAW,CAACnO,OAAO,CAAC;MAClC;IACJ,CAAC,MACI;MACD,IAAIA,OAAO,GAAGmL,OAAO,GACjB1O,UAAU,CAAC,IAAI,CAAC8D,SAAS,CAAC,GAAG9D,UAAU,CAAC,IAAI,CAAC6D,WAAW,CAAC;MAC7D,IAAI,IAAI,CAACyO,SAAS,EAAE;QAChBvS,aAAa,CAAC,IAAI,CAAC2D,WAAW,CAAC;MACnC;MACA,IAAIH,OAAO,EAAE;QACT,IAAImL,OAAO,EAAE;UACTnL,OAAO,CAACyE,YAAY,CAAC,GAAG,EAAE,IAAI,CAACqK,IAAI,CAAC;QACxC,CAAC,MACI;UACD,IAAI,CAACR,aAAa,CAACtO,OAAO,EAAEiL,QAAQ,CAAC;QACzC;MACJ,CAAC,MACI;QACD,IAAI6C,SAAS,GAAG5Q,KAAK,CAAC8Q,WAAW,CAACC,WAAW,CAAC;UAAEhO,EAAE,EAAE,IAAI,CAACG;QAAiB,CAAC,CAAC;QAC5E,IAAImO,UAAU,GAAG3L,QAAQ,CAACoE,cAAc,CAAC9J,KAAK,CAAC8C,OAAO,CAACC,EAAE,GAAG,aAAa,CAAC;QAC1E;QACA/C,KAAK,CAACsR,YAAY,GAAGD,UAAU,CAACJ,WAAW,CAACL,SAAS,CAAC,GAAG5Q,KAAK,CAACgR,SAAS,CAACC,WAAW,CAACL,SAAS,CAAC;QAC/F,IAAI,EAAE5Q,KAAK,CAACa,aAAa,KAAK,OAAO,CAAC,EAAE;UACpCiC,OAAO,GAAG9C,KAAK,CAAC8Q,WAAW,CAACS,aAAa,CAAC,IAAIrS,UAAU,CAAC,IAAI,CAACkE,WAAW,EAAEkN,QAAQ,EAAE;YAAEkB,KAAK,EAAEf,UAAU;YAAEtC,KAAK,EAAE;UAAE,CAAC,EAAE,CAAC,EAAEJ,QAAQ,CAAC,CAAC;QACvI,CAAC,MACI;UACDjL,OAAO,GAAG9C,KAAK,CAAC8Q,WAAW,CAACa,QAAQ,CAAC,IAAIlS,UAAU,CAAC,IAAI,CAAC4D,SAAS,EAAEiN,QAAQ,EAAE,CAAC,EAAEG,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CAACmB,IAAI,CAAC,CAAC;QACnH;QACA;QACAhB,SAAS,CAACK,WAAW,CAACnO,OAAO,CAAC;MAClC;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhD,SAAS,CAACnB,SAAS,CAACmT,QAAQ,GAAG,UAAU/O,EAAE,EAAE;IACzC,IAAImD,CAAC;IACL,KAAKA,CAAC,GAAGnD,EAAE,CAAC2B,MAAM,GAAG,CAAC,EAAEwB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAChC,IAAIgD,CAAC,GAAG6I,MAAM,CAAChP,EAAE,CAACmD,CAAC,CAAC,CAAC;MACrB,IAAI,CAACkC,KAAK,CAACc,CAAC,CAAC,EAAE;QACX;MACJ,CAAC,MACI;QACD;MACJ;IACJ;IACA,IAAI5E,KAAK,GAAG,CAACvB,EAAE,CAACiP,MAAM,CAAC9L,CAAC,GAAG,CAAC,EAAEnD,EAAE,CAAC2B,MAAM,GAAG,CAAC,CAAC;IAC5C,OAAOJ,KAAK;EAChB,CAAC;EACDxE,SAAS,CAACnB,SAAS,CAACiR,iBAAiB,GAAG,UAAU1G,CAAC,EAAEJ,CAAC,EAAE;IACpD,IAAIhI,WAAW,GAAG,IAAI,CAACd,KAAK,CAACyO,mBAAmB;IAChD,IAAIwD,YAAY,GAAG,IAAI,CAACjS,KAAK,CAACuQ,UAAU,CAAC2B,qBAAqB;IAC9D,IAAIC,MAAM,GAAG,IAAI,CAACzD,YAAY,IAAI,IAAI,CAACC,QAAQ;IAC/C,IAAIkD,SAAS,GAAG,IAAI,CAAC7R,KAAK,CAAC8Q,WAAW,CAACC,WAAW,CAAC;MAC/ChO,EAAE,EAAE,IAAI,CAACE,WAAW,IAAInC,WAAW,GAAIqR,MAAM,GAAG,IAAI,CAACvD,WAAW,GAAG,IAAI,CAACrO,KAAK,GAAI,EAAE,CAAC;MACpFkR,KAAK,EAAE;IACX,CAAC,CAAC;IACFI,SAAS,CAACZ,WAAW,CAAC,IAAI,CAACjR,KAAK,CAAC8Q,WAAW,CAACsB,UAAU,CAAC,IAAIjT,YAAY,CAAC,IAAI,CAAC8D,WAAW,GAAG,SAAS,IAAInC,WAAW,GAAIqR,MAAM,GAAG,IAAI,CAACvD,WAAW,GAAG,IAAI,CAACrO,KAAK,GAAI,EAAE,CAAC,EAAE,SAAS,EAAE;MAAEiR,KAAK,EAAES,YAAY;MAAE9D,KAAK,EAAE;IAAE,CAAC,EAAE,CAAC,EAAEjF,CAAC,EAAEJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACnO,IAAIuJ,SAAS,GAAG,IAAI,IAAInJ,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAIJ,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAII,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAIJ,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,IAAII,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAIJ,CAAC,GAAG,CAAC,CAAC,GAC9G,KAAK,IAAII,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,IAAIJ,CAAC,GAAG,CAAC,CAAC;IACnC+I,SAAS,CAACZ,WAAW,CAAC,IAAI,CAACjR,KAAK,CAAC8Q,WAAW,CAACa,QAAQ,CAAC;MAClD5O,EAAE,EAAE,IAAI,CAACE,WAAW,GAAG,QAAQ,IAC1BnC,WAAW,GAAIqR,MAAM,GAAG,IAAI,CAACvD,WAAW,GAAG,IAAI,CAACrO,KAAK,GAAI,EAAE,CAAC;MAAEtC,CAAC,EAAEoU,SAAS;MAC/EC,MAAM,EAAEL,YAAY;MAAE,cAAc,EAAE,CAAC;MAAEM,IAAI,EAAEN;IACnD,CAAC,CAAC,CAAC;IACH,IAAI,CAACJ,SAAS,GAAGA,SAAS;IAC1B,IAAIW,WAAW,GAAGjT,UAAU,CAAC,IAAI,CAAC2D,gBAAgB,IAAIpC,WAAW,GAAIqR,MAAM,GAAG,IAAI,CAACvD,WAAW,GAAG,IAAI,CAACrO,KAAK,GAAI,EAAE,CAAC,CAAC;IACnH,IAAIiS,WAAW,EAAE;MACbA,WAAW,CAACvB,WAAW,CAACY,SAAS,CAAC;IACtC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI/R,SAAS,CAACnB,SAAS,CAAC8T,qBAAqB,GAAG,UAAUzS,KAAK,EAAE+H,aAAa,EAAEpB,SAAS,EAAE;IACnF,IAAKoB,aAAa,CAAChF,EAAE,IAAIgF,aAAa,CAAChF,EAAE,CAAC/B,OAAO,CAAC,IAAI,CAACiC,WAAW,CAAC,GAAG,CAAC,CAAC,IAAM0D,SAAS,CAAC3F,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAE,EAAE;MAC7G,IAAI0R,gBAAgB,GAAG,IAAI;MAC3B,IAAK1S,KAAK,CAACyO,mBAAmB,EAAG;QAC7B,IAAInK,KAAK,GAAG,IAAI,CAACwN,QAAQ,CAAC/J,aAAa,CAAChF,EAAE,CAAC;QAC3C,IAAI4P,qBAAqB,GAAGpT,UAAU,CAAC,IAAI,CAAC4D,cAAc,CAAC;QAC3DrE,MAAM,CAACS,UAAU,CAAC,IAAI,CAAC2D,gBAAgB,GAAGoB,KAAK,CAAC,CAAC;QACjD,IAAI,CAAC9D,aAAa,CAAC8D,KAAK,CAAC,GAAG,IAAI;QAChC,IAAI,CAAC7D,WAAW,CAAC6D,KAAK,CAAC,GAAG,IAAI;QAC9B,IAAI,CAAC5D,mBAAmB,CAAC4D,KAAK,CAAC,GAAG,IAAI;QACtC,IAAIqO,qBAAqB,IAAIA,qBAAqB,CAACC,iBAAiB,KAAK,CAAC,EAAE;UACxEtT,aAAa,CAACqT,qBAAqB,CAAC;UACpC,IAAI,CAACnS,aAAa,GAAG,EAAE;UACvB,IAAI,CAACC,WAAW,GAAG,EAAE;UACrB,IAAI,CAACC,mBAAmB,GAAG,EAAE;QACjC;QACA,IAAI,IAAI,CAACkD,WAAW,KAAK,OAAO,EAAE;UAC9B,IAAI,IAAI,CAACxD,gBAAgB,CAACkE,KAAK,CAAC,IAAI,IAAI,EAAE;YACtC,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC9F,gBAAgB,CAACkE,KAAK,CAAC,CAACI,MAAM,EAAEwB,CAAC,EAAE,EAAE;cAC1D,IAAI,CAAC9F,gBAAgB,CAACkE,KAAK,CAAC,CAAC4B,CAAC,CAAC,CAACqJ,QAAQ,GAAG,KAAK;YACpD;UACJ;UACA,IAAI,CAACnP,gBAAgB,CAACkE,KAAK,CAAC,GAAG,IAAI;UACnC,KAAK,IAAI+C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjH,gBAAgB,CAACsE,MAAM,EAAE2C,CAAC,EAAE,EAAE;YACnD,IAAI,IAAI,CAACjH,gBAAgB,CAACiH,CAAC,CAAC,IAAI,IAAI,EAAE;cAClCqL,gBAAgB,GAAG,KAAK;cACxB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACzS,gBAAgB,CAACiH,CAAC,CAAC,CAAC3C,MAAM,EAAEmO,CAAC,EAAE,EAAE;gBACtD,IAAI,CAACzS,gBAAgB,CAACiH,CAAC,CAAC,CAACwL,CAAC,CAAC,CAACtD,QAAQ,GAAG,IAAI;cAC/C;YACJ;UACJ;UACA,IAAI,CAACzB,6BAA6B,CAAC9N,KAAK,EAAE,IAAI,CAAC+N,QAAQ,EAAE,IAAI,CAAC;QAClE,CAAC,MACI,IAAI,IAAI,CAACtN,WAAW,CAACiE,MAAM,EAAE;UAC9B,KAAK,IAAIwB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACzF,WAAW,CAACiE,MAAM,EAAEwB,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,CAACzF,WAAW,CAACyF,CAAC,CAAC,EAAE;cACrBwM,gBAAgB,GAAG,KAAK;cACxB,IAAI,CAAC5E,6BAA6B,CAAC9N,KAAK,EAAE,IAAI,CAACS,WAAW,CAACyF,CAAC,CAAC,EAAE,IAAI,CAAC;YACxE;UACJ;QACJ,CAAC,MACI;UACD,IAAI,CAAC4H,6BAA6B,CAAC9N,KAAK,EAAE,IAAIR,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;QACzE;MACJ,CAAC,MACI;QACDV,MAAM,CAACS,UAAU,CAAC,IAAI,CAAC2D,gBAAgB,CAAC,CAAC;QACzC,IAAI,CAAC2J,sBAAsB,CAAC7M,KAAK,EAAE,IAAI,CAACsD,mBAAmB,EAAEtD,KAAK,CAACyD,MAAM,CAAC;MAC9E;MACA,IAAI,CAACyE,UAAU,CAAClI,KAAK,CAAC8C,OAAO,CAACC,EAAE,EAAE/C,KAAK,CAAC0D,aAAa,CAAC;MACtD,IAAI,CAACoP,iBAAiB,CAAC,KAAK,EAAE9S,KAAK,CAACgR,SAAS,EAAE,MAAM,CAAC;MACtD,IAAI,CAAEhR,KAAK,CAACyO,mBAAoB,IAAIiE,gBAAgB,EAAE;QAClD,IAAI,CAACtQ,UAAU,GAAG,IAAI;MAC1B;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACItC,SAAS,CAACnB,SAAS,CAACoU,qBAAqB,GAAG,UAAU/S,KAAK,EAAE2P,QAAQ,EAAEqD,MAAM,EAAElL,MAAM,EAAE;IACnF,IAAIoG,IAAI;IACR,IAAMlO,KAAK,CAACyO,mBAAmB,IAAM3G,MAAM,CAAC/E,EAAE,CAAC/B,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAE,IAC1E,IAAI,CAACR,aAAa,CAAC,IAAI,CAACoO,WAAW,CAAC,EAAE;MACtC,IAAI9G,MAAM,CAAC/E,EAAE,CAAC/B,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,EAAE;QAC1C,IAAI,CAAC4N,WAAW,GAAG,IAAI,CAACkD,QAAQ,CAAChK,MAAM,CAAC/E,EAAE,CAAC;MAC/C;MACA,IAAIkQ,CAAC,GAAG,IAAI,CAACzS,aAAa,CAAC,IAAI,CAACoO,WAAW,CAAC;MAC5CV,IAAI,GAAG,IAAI1O,IAAI,CAACyT,CAAC,CAAC/J,CAAC,EAAE+J,CAAC,CAACnK,CAAC,EAAEmK,CAAC,CAAC9E,KAAK,EAAE8E,CAAC,CAAC7E,MAAM,CAAC;IAChD;IACA,IAAI,CAAEpO,KAAK,CAACyO,mBAAoB,EAAE;MAC9BP,IAAI,GAAG,IAAI1O,IAAI,CAAC,IAAI,CAAC4C,UAAU,CAAC8G,CAAC,EAAE,IAAI,CAAC9G,UAAU,CAAC0G,CAAC,EAAE,IAAI,CAAC1G,UAAU,CAAC+L,KAAK,EAAE,IAAI,CAAC/L,UAAU,CAACgM,MAAM,CAAC;IACxG;IACA,IAAIF,IAAI,EAAE;MACN,IAAIgF,MAAM,GAAG,IAAI,CAACC,cAAc,CAACnT,KAAK,CAACgR,SAAS,EAAE9C,IAAI,EAAEyB,QAAQ,CAAC;MACjE,IAAI,IAAI,CAAChB,QAAQ,EAAE;QACfT,IAAI,GAAG7O,sBAAsB,CAAC6O,IAAI,CAAChF,CAAC,EAAEgF,IAAI,CAACpF,CAAC,EAAGoF,IAAI,CAAChF,CAAC,GAAGgF,IAAI,CAACC,KAAK,EAAID,IAAI,CAACpF,CAAC,GAAGoF,IAAI,CAACE,MAAM,EAAGpO,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC;QACvI,IAAI,CAAC2N,gBAAgB,CAAClQ,KAAK,EAAEkO,IAAI,CAAC;QAClC,IAAI,CAACH,QAAQ,GAAGG,IAAI;MACxB;MACA,IAAI8E,MAAM,EAAE;QACR,IAAI,CAACrE,QAAQ,GAAGuE,MAAM;MAC1B;IACJ,CAAC,MACI;MACD;IACJ;EACJ,CAAC;EACDpT,SAAS,CAACnB,SAAS,CAACwU,cAAc,GAAG,UAAUC,cAAc,EAAElF,IAAI,EAAEyB,QAAQ,EAAE;IAC3E,IAAI0D,WAAW,GAAG,WAAW;IAC7B,IAAIH,MAAM,GAAG,KAAK;IAClB,IAAI,CAAC,IAAI,CAACvE,QAAQ,EAAE;MAChB,IAAI2E,WAAW,GAAG,CAAC,IAAI9T,IAAI,CAAC0O,IAAI,CAAChF,CAAC,EAAGgF,IAAI,CAACpF,CAAC,EAAGoF,IAAI,CAACC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAC5D,IAAI3O,IAAI,CAAE0O,IAAI,CAAChF,CAAC,EAAGgF,IAAI,CAACpF,CAAC,EAAE,CAAC,EAAEoF,IAAI,CAACE,MAAM,CAAC,EAC1C,IAAI5O,IAAI,CAAC0O,IAAI,CAAChF,CAAC,EAAGgF,IAAI,CAACpF,CAAC,GAAGoF,IAAI,CAACE,MAAM,GAAG,CAAC,EAAGF,IAAI,CAACC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EAC/D,IAAI3O,IAAI,CAAE0O,IAAI,CAAChF,CAAC,GAAGgF,IAAI,CAACC,KAAK,GAAG,CAAC,EAAGD,IAAI,CAACpF,CAAC,GAAG,CAAC,EAAE,CAAC,EAAEoF,IAAI,CAACE,MAAM,GAAG,EAAE,CAAC,EACpE,IAAI5O,IAAI,CAAE0O,IAAI,CAAChF,CAAC,GAAGgF,IAAI,CAACC,KAAK,GAAG,EAAE,EAAID,IAAI,CAACpF,CAAC,GAAGoF,IAAI,CAACE,MAAM,GAAG,EAAE,EAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;MAChF,KAAK,IAAIlI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoN,WAAW,CAAC5O,MAAM,EAAEwB,CAAC,EAAE,EAAE;QACzC,IAAI9G,YAAY,CAACuQ,QAAQ,CAACzG,CAAC,EAAEyG,QAAQ,CAAC7G,CAAC,EAAEwK,WAAW,CAACpN,CAAC,CAAC,CAAC,EAAE;UACtDmN,WAAW,GAAInN,CAAC,KAAK,CAAC,GAAImN,WAAW,GAAInN,CAAC,GAAG,CAAC,KAAK,CAAC,GAAI,WAAW,GAAG,WAAW;UACjFgN,MAAM,GAAG,IAAI;UACb,IAAI,CAACK,UAAU,GAAGrN,CAAC;UACnB;QACJ;MACJ;IACJ,CAAC,MACI;MACD,IAAIgD,CAAC,GAAGgF,IAAI,CAAChF,CAAC;MACd,IAAIJ,CAAC,GAAGoF,IAAI,CAACpF,CAAC;MACd,IAAIqF,KAAK,GAAIwB,QAAQ,CAACzG,CAAC,GAAGA,CAAE;MAC5B,IAAIkF,MAAM,GAAIuB,QAAQ,CAAC7G,CAAC,GAAGA,CAAE;MAC7B,QAAQ,IAAI,CAACyK,UAAU;QACnB,KAAK,CAAC;UACFnF,MAAM,GAAGoF,IAAI,CAACC,GAAG,CAAEvF,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACpF,CAAC,GAAI6G,QAAQ,CAAC7G,CAAC,CAAC;UACtDoF,IAAI,CAACpF,CAAC,GAAG0K,IAAI,CAACE,GAAG,CAAExF,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACpF,CAAC,EAAG6G,QAAQ,CAAC7G,CAAC,CAAC;UACrDoF,IAAI,CAACE,MAAM,GAAGA,MAAM;UACpB;QACJ,KAAK,CAAC;UACFD,KAAK,GAAGqF,IAAI,CAACC,GAAG,CAAEvF,IAAI,CAACC,KAAK,GAAGD,IAAI,CAAChF,CAAC,GAAIyG,QAAQ,CAACzG,CAAC,CAAC;UACpDgF,IAAI,CAAChF,CAAC,GAAGsK,IAAI,CAACE,GAAG,CAAExF,IAAI,CAACC,KAAK,GAAGD,IAAI,CAAChF,CAAC,EAAGyG,QAAQ,CAACzG,CAAC,CAAC;UACpDgF,IAAI,CAACC,KAAK,GAAGA,KAAK;UAClB;QACJ,KAAK,CAAC;UACFD,IAAI,CAACE,MAAM,GAAGoF,IAAI,CAACC,GAAG,CAACrF,MAAM,CAAC;UAC9BF,IAAI,CAACpF,CAAC,GAAG0K,IAAI,CAACE,GAAG,CAAC/D,QAAQ,CAAC7G,CAAC,EAAEA,CAAC,CAAC;UAChC;QACJ,KAAK,CAAC;UACFoF,IAAI,CAACC,KAAK,GAAGqF,IAAI,CAACC,GAAG,CAACtF,KAAK,CAAC;UAC5BD,IAAI,CAAChF,CAAC,GAAGsK,IAAI,CAACE,GAAG,CAAC/D,QAAQ,CAACzG,CAAC,EAAEA,CAAC,CAAC;UAChC;QACJ,KAAK,CAAC;UACFgF,IAAI,CAACC,KAAK,GAAGqF,IAAI,CAACC,GAAG,CAACtF,KAAK,CAAC;UAC5BD,IAAI,CAACE,MAAM,GAAGoF,IAAI,CAACC,GAAG,CAACrF,MAAM,CAAC;UAC9BF,IAAI,CAAChF,CAAC,GAAGsK,IAAI,CAACE,GAAG,CAAC/D,QAAQ,CAACzG,CAAC,EAAEA,CAAC,CAAC;UAChCgF,IAAI,CAACpF,CAAC,GAAG0K,IAAI,CAACE,GAAG,CAAC/D,QAAQ,CAAC7G,CAAC,EAAEA,CAAC,CAAC;UAChC;MAAM;IAElB;IACA,IAAI,IAAI,CAAClF,WAAW,KAAK,OAAO,EAAE;MAC9B,IAAI,CAACkP,iBAAiB,CAACI,MAAM,EAAE3T,UAAU,CAAE,IAAI,CAACS,KAAK,CAACyO,mBAAmB,GAAI,IAAI,CAACrL,WAAW,GACzF,IAAI,CAACwL,WAAW,GAAG,IAAI,CAACxL,WAAW,CAAC,EAAEiQ,WAAW,CAAC;IAC1D;IACA,IAAI,CAACP,iBAAiB,CAACI,MAAM,EAAEE,cAAc,EAAEC,WAAW,CAAC;IAC3D,OAAOH,MAAM;EACjB,CAAC;EACDpT,SAAS,CAACnB,SAAS,CAACmU,iBAAiB,GAAG,UAAUa,QAAQ,EAAEC,WAAW,EAAEP,WAAW,EAAE;IAClFA,WAAW,GAAGM,QAAQ,GAAGN,WAAW,GAAI,IAAI,CAAC7L,OAAO,CAACwJ,SAAS,KAAK4C,WAAW,GAAI,MAAM,GAAG,MAAM;IACjG,IAAIA,WAAW,EAAE;MACbA,WAAW,CAACnC,KAAK,CAACC,MAAM,GAAG2B,WAAW;IAC1C;EACJ,CAAC;EACDvT,SAAS,CAACnB,SAAS,CAACkO,sBAAsB,GAAG,UAAU7M,KAAK,EAAEsE,KAAK,EAAE8F,gBAAgB,EAAE;IACnF9F,KAAK,GAAGtE,KAAK,CAAC4M,iBAAiB,GAAGtI,KAAK,GAAGA,KAAK,CAACgG,MAAM,CAAC,CAAC,EAAEhG,KAAK,CAACI,MAAM,CAAC,CAAC,CAAC;IACzE,IAAIuI,cAAc;IAClB,KAAK,IAAIzI,EAAE,GAAG,CAAC,EAAEqP,kBAAkB,GAAGzJ,gBAAgB,EAAE5F,EAAE,GAAGqP,kBAAkB,CAACnP,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC1F,IAAIf,MAAM,GAAGoQ,kBAAkB,CAACrP,EAAE,CAAC;MACnC,IAAIf,MAAM,CAACyB,OAAO,EAAE;QAChB+H,cAAc,GAAG,IAAI,CAACzG,iBAAiB,CAAC/C,MAAM,CAAC;QAC/C,IAAI,CAAC6C,YAAY,CAAC2G,cAAc,CAAC;QACjC,KAAK,IAAI1H,EAAE,GAAG,CAAC,EAAEuO,gBAAgB,GAAG7G,cAAc,EAAE1H,EAAE,GAAGuO,gBAAgB,CAACpP,MAAM,EAAEa,EAAE,EAAE,EAAE;UACpF,IAAI4H,aAAa,GAAG2G,gBAAgB,CAACvO,EAAE,CAAC;UACxC,IAAI,CAACe,YAAY,CAAC,IAAI,CAACyN,WAAW,CAAC5G,aAAa,CAAC,CAAC;QACtD;MACJ;IACJ;EACJ,CAAC;EACDrN,SAAS,CAACnB,SAAS,CAACyS,aAAa,GAAG,UAAU4C,GAAG,EAAEC,MAAM,EAAE;IACvD,IAAInJ,IAAI,GAAG3M,MAAM,CAAC2M,IAAI,CAACmJ,MAAM,CAAC;IAC9B,KAAK,IAAIzP,EAAE,GAAG,CAAC,EAAE0P,MAAM,GAAGpJ,IAAI,EAAEtG,EAAE,GAAG0P,MAAM,CAACxP,MAAM,EAAEF,EAAE,EAAE,EAAE;MACtD,IAAI2P,GAAG,GAAGD,MAAM,CAAC1P,EAAE,CAAC;MACpBwP,GAAG,CAACzM,YAAY,CAAC4M,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;IACtC;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACIrU,SAAS,CAACnB,SAAS,CAACyV,gBAAgB,GAAG,UAAUpU,KAAK,EAAEqU,YAAY,EAAEC,SAAS,EAAExM,MAAM,EAAE;IACrF,IAAIoG,IAAI;IACR,IAAI,CAAC,IAAI,CAACS,QAAQ,IAAI,IAAI,CAACD,YAAY,KAAM1O,KAAK,CAACyO,mBAAoB,EAAE;MACrE,IAAIwE,CAAC,GAAG,IAAI,CAACzS,aAAa,CAAC,IAAI,CAACoO,WAAW,CAAC;MAC5CV,IAAI,GAAG,IAAI1O,IAAI,CAACyT,CAAC,CAAC/J,CAAC,EAAE+J,CAAC,CAACnK,CAAC,EAAEmK,CAAC,CAAC9E,KAAK,EAAE8E,CAAC,CAAC7E,MAAM,CAAC;IAChD,CAAC,MACI;MACDF,IAAI,GAAG,IAAI1O,IAAI,CAAC,IAAI,CAAC4C,UAAU,CAAC8G,CAAC,EAAE,IAAI,CAAC9G,UAAU,CAAC0G,CAAC,EAAE,IAAI,CAAC1G,UAAU,CAAC+L,KAAK,EAAE,IAAI,CAAC/L,UAAU,CAACgM,MAAM,CAAC;IACxG;IACAF,IAAI,CAAChF,CAAC,IAAKmL,YAAY,CAACnL,CAAC,GAAGlJ,KAAK,CAACuU,MAAO;IACzCrG,IAAI,CAACpF,CAAC,IAAKuL,YAAY,CAACvL,CAAC,GAAG9I,KAAK,CAACwU,MAAO;IACzCtG,IAAI,GAAG7O,sBAAsB,CAAC6O,IAAI,CAAChF,CAAC,EAAEgF,IAAI,CAACpF,CAAC,EAAEoF,IAAI,CAAChF,CAAC,GAAGgF,IAAI,CAACC,KAAK,EAAED,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACpF,CAAC,EAAE9I,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC;IACnI,IAAI+R,SAAS,EAAE;MACX,IAAI,CAACpE,gBAAgB,CAAClQ,KAAK,EAAEkO,IAAI,EAAEpG,MAAM,CAAC;IAC9C,CAAC,MACI;MACD,IAAI,CAACgG,6BAA6B,CAAC9N,KAAK,EAAEkO,IAAI,CAAC;IACnD;EACJ,CAAC;EACDpO,SAAS,CAACnB,SAAS,CAAC+C,UAAU,GAAG,UAAUkG,KAAK,EAAE;IAC9C,IAAI,CAAC6M,iBAAiB,CAAC7M,KAAK,CAACE,MAAM,EAAEF,KAAK,CAAC3C,IAAI,CAAC;EACpD,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACInF,SAAS,CAACnB,SAAS,CAAC8V,iBAAiB,GAAG,UAAU3M,MAAM,EAAEnB,SAAS,EAAE;IACjE,IAAI3G,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIA,KAAK,CAACa,aAAa,KAAK,MAAM,EAAE;MAChC;IACJ;IACA,IAAI,CAAC+C,WAAW,GAAG5D,KAAK,CAACa,aAAa;IACtC,IAAI,CAAC,IAAI,CAAC6T,QAAQ,IAAI,IAAI,CAAC/F,QAAQ,KAAK,IAAI,CAACZ,QAAQ,CAACI,KAAK,GAAG,CAAC,IAAI,IAAI,CAACJ,QAAQ,CAACK,MAAM,GAAG,CAAC,EAAE;MACzF,IAAI,CAACN,6BAA6B,CAAC9N,KAAK,EAAE,IAAI,CAAC+N,QAAQ,CAAC;IAC5D,CAAC,MACI,IAAI,CAAE/N,KAAK,CAACyO,mBAAoB,IAAI,IAAI,CAACC,YAAY,IACtD,IAAI,CAACtM,UAAU,CAAC+L,KAAK,IAAI,IAAI,CAAC/L,UAAU,CAACgM,MAAM,EAAE;MACjD,IAAI,CAACgG,gBAAgB,CAACpU,KAAK,EAAE,IAAI,CAAC+N,QAAQ,CAAC;IAC/C,CAAC,MACI,IAAI,IAAI,CAACW,YAAY,IAAI,IAAI,CAAClO,aAAa,CAAC,IAAI,CAACoO,WAAW,CAAC,CAACT,KAAK,IAAI,IAAI,CAAC3N,aAAa,CAAC,IAAI,CAACoO,WAAW,CAAC,CAACR,MAAM,EAAE;MACrH,IAAI,CAACgG,gBAAgB,CAACpU,KAAK,EAAE,IAAI,CAAC+N,QAAQ,CAAC;IAC/C;IACA,IAAI/N,KAAK,CAACa,aAAa,KAAK,OAAO,IAAI,IAAI,CAAC6T,QAAQ,IAAI,IAAI,CAAC9C,IAAI,EAAE;MAC/D,IAAI,IAAI,CAACA,IAAI,CAAC5Q,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;QAC/B,IAAI,CAAEhB,KAAK,CAACyO,mBAAoB,EAAE;UAC9BlP,UAAU,CAAC,IAAI,CAAC8D,SAAS,CAAC,CAACkE,YAAY,CAAC,GAAG,EAAE,IAAI,CAACqK,IAAI,GAAG,GAAG,CAAC;UAC7D,IAAI,CAAC+C,aAAa,CAACpV,UAAU,CAAC,IAAI,CAAC8D,SAAS,CAAC,CAAC;QAClD,CAAC,MACI,IAAI9D,UAAU,CAAC,IAAI,CAAC8D,SAAS,GAAG,IAAI,CAAC9C,KAAK,CAAC,EAAE;UAC9ChB,UAAU,CAAC,IAAI,CAAC8D,SAAS,GAAG,IAAI,CAAC9C,KAAK,CAAC,CAACgH,YAAY,CAAC,GAAG,EAAE,IAAI,CAACqK,IAAI,GAAG,GAAG,CAAC;UAC1E,IAAI,CAAC+C,aAAa,CAACpV,UAAU,CAAC,IAAI,CAAC8D,SAAS,GAAG,IAAI,CAAC9C,KAAK,CAAC,CAAC;QAC/D;QACA,IAAI,IAAI,CAACmU,QAAQ,IAAI,IAAI,CAAC/F,QAAQ,EAAE;UAChC,IAAI,CAACb,6BAA6B,CAAC9N,KAAK,EAAE,IAAI,CAAC+N,QAAQ,CAAC;QAC5D;MACJ;IACJ;IACA,IAAI,CAAC2G,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAChG,YAAY,GAAG,KAAK;IACzB,IAAI,CAACC,QAAQ,GAAG,KAAK;IACrB,IAAI,CAAC8D,qBAAqB,CAACzS,KAAK,EAAE8H,MAAM,EAAEnB,SAAS,CAAC;EACxD,CAAC;EACD7G,SAAS,CAACnB,SAAS,CAACiW,WAAW,GAAG,UAAU5U,KAAK,EAAEuC,cAAc,EAAE;IAC/D,OAAOlD,sBAAsB,CAACW,KAAK,CAACwC,UAAU,EAAExC,KAAK,CAACyC,UAAU,EAAEzC,KAAK,CAACuU,MAAM,EAAEvU,KAAK,CAACwU,MAAM,EAAEjS,cAAc,CAAC;EACjH,CAAC;EACD;EACAzC,SAAS,CAACnB,SAAS,CAAC0D,SAAS,GAAG,UAAUrC,KAAK,EAAEuC,cAAc,EAAEC,UAAU,EAAEC,UAAU,EAAEmF,KAAK,EAAE;IAC5F,IAAIhH,IAAI,GAAGZ,KAAK,CAACa,aAAa;IAC9B,IAAI,CAAC+C,WAAW,GAAG5D,KAAK,CAACa,aAAa;IACtC,IAAI,CAAC6T,QAAQ,GAAG,CAAC9T,IAAI,CAACI,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAIJ,IAAI,KAAK,OAAO,MAAMZ,KAAK,CAACkC,WAAW,IAAI,CAAClC,KAAK,CAACmC,OAAO,CAAC,IACpGnC,KAAK,CAAC6U,aAAa,KAAK,YAAY;IACxC,IAAI/M,MAAM,GAAGF,KAAK,CAACE,MAAM;IACzB,IAAI,CAAC8J,IAAI,GAAGkD,SAAS;IACrB,IAAI,IAAI,CAACJ,QAAQ,EAAE;MACf,IAAI,CAACnU,KAAK,GAAGhB,UAAU,CAAC,IAAI,CAAC4D,cAAc,CAAC,GAAI,IAAI,CAAC5C,KAAK,GAAG,CAAC,GAAI,CAAC;MACnE,IAAI,CAACwN,QAAQ,GAAG,IAAIvO,IAAI,CAACQ,KAAK,CAACwC,UAAU,EAAExC,KAAK,CAACyC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;MAClE,IAAIzC,KAAK,CAACwC,UAAU,GAAGD,cAAc,CAAC2G,CAAC,IAAIlJ,KAAK,CAACwC,UAAU,GAAID,cAAc,CAAC2G,CAAC,GAAG3G,cAAc,CAAC4L,KAAM,IACnGnO,KAAK,CAACyC,UAAU,GAAGF,cAAc,CAACuG,CAAC,IAAI9I,KAAK,CAACyC,UAAU,GAAIF,cAAc,CAACuG,CAAC,GAAGvG,cAAc,CAAC6L,MAAO,EAAE;QACtG,IAAI,CAACsG,QAAQ,GAAG,KAAK;MACzB;IACJ;IACA,IAAI9T,IAAI,KAAK,OAAO,EAAE;MAClB,KAAK,IAAI4D,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;QAC7D,IAAIf,MAAM,GAAG8B,EAAE,CAACf,EAAE,CAAC;QACnB,IAAIf,MAAM,CAACyB,OAAO,EAAE;UAChB,KAAK,IAAIkI,EAAE,GAAG,CAAC,EAAEE,EAAE,GAAG7J,MAAM,CAAC+E,MAAM,EAAE4E,EAAE,GAAGE,EAAE,CAAC5I,MAAM,EAAE0I,EAAE,EAAE,EAAE;YACvD,IAAIpI,KAAK,GAAGsI,EAAE,CAACF,EAAE,CAAC;YAClB,IAAI,CAAEpN,KAAK,CAACyO,mBAAoB,EAAE;cAC9BzJ,KAAK,CAACuK,QAAQ,GAAG,KAAK;YAC1B;UACJ;QACJ;MACJ;IACJ;IACA,IAAI,EAAE3O,IAAI,KAAK,OAAO,CAAC,EAAE;MACrB,IAAI,IAAI,CAACwB,UAAU,IAAI,CAAEpC,KAAK,CAACyO,mBAAoB,EAAE;QACjD,IAAI,CAACV,QAAQ,GAAG,IAAIvO,IAAI,CAACQ,KAAK,CAACwC,UAAU,EAAExC,KAAK,CAACyC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;QAClE,IAAI,CAACsQ,qBAAqB,CAAC/S,KAAK,EAAE,IAAIf,aAAa,CAACuD,UAAU,EAAEC,UAAU,CAAC,EAAE,IAAI,CAAC;QAClF,IAAI,CAACiM,YAAY,GAAGtP,YAAY,CAACoD,UAAU,EAAEC,UAAU,EAAE,IAAI,CAACL,UAAU,CAAC;MAC7E;MACA,IAAKpC,KAAK,CAACyO,mBAAmB,EAAG;QAC7B,IAAInK,KAAK,GAAG,IAAI,CAACwN,QAAQ,CAAChK,MAAM,CAAC/E,EAAE,CAAC;QACpC,IAAI,CAAC6L,WAAW,GAAG,IAAI,CAACmG,UAAU,CAACjN,MAAM,CAAC/E,EAAE,CAAC,GAAGuB,KAAK,GAAGwQ,SAAS;QACjE,IAAI,IAAI,CAACtU,aAAa,CAACkE,MAAM,IAAI,IAAI,CAACqQ,UAAU,CAACjN,MAAM,CAAC/E,EAAE,CAAC,EAAE;UACzD,IAAI,CAACgQ,qBAAqB,CAAC/S,KAAK,EAAE,IAAIf,aAAa,CAACuD,UAAU,EAAEC,UAAU,CAAC,EAAE,IAAI,EAAEqF,MAAM,CAAC;UAC1F,IAAI,CAAC4G,YAAY,GAAGtP,YAAY,CAACoD,UAAU,EAAEC,UAAU,EAAE,IAAI,CAACjC,aAAa,CAAC8D,KAAK,CAAC,CAAC;QACvF;MACJ;IACJ;EACJ,CAAC;EACDxE,SAAS,CAACnB,SAAS,CAACoW,UAAU,GAAG,UAAUhS,EAAE,EAAE;IAC3C,OAAOA,EAAE,CAAC/B,OAAO,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;EAC5C,CAAC;EACD;EACAlB,SAAS,CAACnB,SAAS,CAAC8C,SAAS,GAAG,UAAUmG,KAAK,EAAE;IAC7C,IAAI5H,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI8H,MAAM,GAAGF,KAAK,CAACE,MAAM;IACzB,IAAInB,SAAS,GAAGiB,KAAK,CAAC3C,IAAI;IAC1B,IAAI,CAAC+P,cAAc,CAAClN,MAAM,EAAEnB,SAAS,CAAC;IACtC,IAAI3G,KAAK,CAACa,aAAa,KAAK,MAAM,EAAE;MAChC;IACJ;IACA,IAAI8F,SAAS,KAAK,WAAW,KAAK9H,OAAO,CAACoW,KAAK,IAAIpW,OAAO,CAACqW,MAAM,CAAC,IAAI,IAAI,CAACR,QAAQ,IAAI9M,KAAK,CAACuN,cAAc,EAAE;MACzGvN,KAAK,CAACuN,cAAc,EAAE;IAC1B;IACA,IAAI,CAACC,gBAAgB,CAACpV,KAAK,EAAE8H,MAAM,EAAEnB,SAAS,CAAC;EACnD,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI7G,SAAS,CAACnB,SAAS,CAACqW,cAAc,GAAG,UAAUlN,MAAM,EAAEnB,SAAS,EAAE;IAC9D,IAAI,IAAI,CAAC3G,KAAK,CAACiE,aAAa,KAAK,MAAM,IAAI,IAAI,CAACjE,KAAK,CAACkE,cAAc,CAACC,eAAe,EAAE;MAClF,IAAI,CAACnF,iBAAiB,CAAC8I,MAAM,CAAC,EAAE;QAC5B,IAAIA,MAAM,CAAC/E,EAAE,CAAC/B,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE;UAC/B8G,MAAM,GAAGvI,UAAU,CAACuI,MAAM,CAAC/E,EAAE,CAACuF,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC3D;QACA,IAAKR,MAAM,CAAEd,YAAY,CAAC,OAAO,CAAC,KAAMc,MAAM,CAAEb,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,IAC3F8G,MAAM,CAACb,YAAY,CAAC,OAAO,CAAC,CAACjG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;UACzD;QACJ;QACA,IAAI,CAAC6G,yBAAyB,CAACC,MAAM,EAAEnB,SAAS,CAAC;QACjD,IAAI,IAAI,CAAC3G,KAAK,CAACqV,eAAe,CAACzO,oBAAoB,IAAI,IAAI,CAAC5G,KAAK,CAACqV,eAAe,CAACzO,oBAAoB,CAAClC,MAAM,GAAG,CAAC,IAC7GoD,MAAM,CAAC/E,EAAE,CAAC/B,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI8G,MAAM,CAAC/E,EAAE,CAAC/B,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE;UAClF,IAAI,CAACsU,2BAA2B,EAAE;QACtC;MACJ;MACA;IACJ;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIxV,SAAS,CAACnB,SAAS,CAACyW,gBAAgB,GAAG,UAAUpV,KAAK,EAAE8H,MAAM,EAAEnB,SAAS,EAAE;IACvE,IAAI4O,YAAY,GAAGnW,YAAY,CAACY,KAAK,CAACuU,MAAM,EAAEvU,KAAK,CAACwU,MAAM,EAAExU,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC;IACtG,IAAIgT,YAAY,EAAE;MACd,IAAI,IAAI,CAAC7G,YAAY,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;QACrC,IAAI,CAACyF,gBAAgB,CAACpU,KAAK,EAAE,IAAI,CAAC+N,QAAQ,EAAE,IAAI,EAAEjG,MAAM,CAAC;MAC7D,CAAC,MACI,IAAI,IAAI,CAAC4M,QAAQ,IAAI,CAAC,IAAI,CAAC/F,QAAQ,EAAE;QACtC,IAAI3O,KAAK,CAACa,aAAa,KAAK,OAAO,EAAE;UACjC,IAAI,CAAC2U,OAAO,CAACxV,KAAK,CAACwC,UAAU,EAAExC,KAAK,CAACyC,UAAU,EAAEzC,KAAK,CAACuU,MAAM,EAAEvU,KAAK,CAACwU,MAAM,CAAC;UAC5E,IAAI,CAACtE,gBAAgB,CAAClQ,KAAK,EAAE,IAAI,CAAC+N,QAAQ,EAAEjG,MAAM,CAAC;QACvD,CAAC,MACI;UACD,IAAI,CAACiG,QAAQ,GAAG,IAAI,CAAC6G,WAAW,CAAC5U,KAAK,EAAEA,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC;UAClF,IAAI,CAAC2N,gBAAgB,CAAClQ,KAAK,EAAE,IAAI,CAAC+N,QAAQ,EAAEjG,MAAM,CAAC;QACvD;MACJ;MACA,IAAI,IAAI,CAAC1F,UAAU,IAAI,CAAEpC,KAAK,CAACyO,mBAAoB,EAAE;QACjD,IAAI,CAACsE,qBAAqB,CAAC/S,KAAK,EAAE,IAAIf,aAAa,CAACe,KAAK,CAACuU,MAAM,EAAEvU,KAAK,CAACwU,MAAM,CAAC,EAAE,IAAI,EAAE1M,MAAM,CAAC;MAClG,CAAC,MACI,IAAM9H,KAAK,CAACyO,mBAAmB,IAAK,CAAC,IAAI,CAACiG,QAAQ,IAAK,IAAI,CAAC/F,QAAQ,EAAE;QACvE,IAAI,CAACoE,qBAAqB,CAAC/S,KAAK,EAAE,IAAIf,aAAa,CAACe,KAAK,CAACuU,MAAM,EAAEvU,KAAK,CAACwU,MAAM,CAAC,EAAE,IAAI,EAAE1M,MAAM,CAAC;MAClG;IACJ,CAAC,MACI;MACD,IAAI,CAAC2M,iBAAiB,CAAC3M,MAAM,EAAEnB,SAAS,CAAC;IAC7C;EACJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACI7G,SAAS,CAACnB,SAAS,CAAC2W,2BAA2B,GAAG,YAAY;IAC1D,IAAI,CAACtV,KAAK,CAACqV,eAAe,CAACzO,oBAAoB,GAAG,EAAE;IACpD,IAAI6O,iBAAiB;IACrB,KAAK,IAAIvP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAClG,KAAK,CAACyD,MAAM,CAACiB,MAAM,EAAEwB,CAAC,EAAE,EAAE;MAC/CuP,iBAAiB,GAAG/P,QAAQ,CAACgQ,sBAAsB,CAAC,IAAI,CAAC3R,aAAa,CAAC,IAAI,CAAC/D,KAAK,CAACyD,MAAM,CAACyC,CAAC,CAAC,CAAC,CAAC;MAC7F,IAAI,IAAI,CAAC5C,mBAAmB,CAACoB,MAAM,KAAK,CAAC,EAAE;QACvC+Q,iBAAiB,GAAG/P,QAAQ,CAACgQ,sBAAsB,CAAC,IAAI,CAAC3R,aAAa,CAAC,IAAI,CAAC/D,KAAK,CAACyD,MAAM,CAACyC,CAAC,CAAC,CAAC,CAAC;QAC7F,OAAOuP,iBAAiB,CAAC/Q,MAAM,GAAG,CAAC,EAAE;UACjC,IAAI5B,OAAO,GAAG2S,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAI3S,OAAO,EAAE;YACT,IAAI,CAACyI,cAAc,CAACzI,OAAO,EAAEA,OAAO,CAACmE,YAAY,CAAC,OAAO,CAAC,CAAC;UAC/D;QACJ;QACAwO,iBAAiB,GAAG/P,QAAQ,CAACgQ,sBAAsB,CAAC,IAAI,CAAC1S,UAAU,CAAC;QACpE,OAAOyS,iBAAiB,CAAC/Q,MAAM,GAAG,CAAC,EAAE;UACjC,IAAI5B,OAAO,GAAG2S,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAI3S,OAAO,EAAE;YACT,IAAI,CAACyI,cAAc,CAACzI,OAAO,EAAEA,OAAO,CAACmE,YAAY,CAAC,OAAO,CAAC,CAAC;UAC/D;QACJ;MACJ,CAAC,MACI;QACDwO,iBAAiB,GAAG/P,QAAQ,CAACgQ,sBAAsB,CAAC,IAAI,CAAC3R,aAAa,CAAC,IAAI,CAAC/D,KAAK,CAACyD,MAAM,CAACyC,CAAC,CAAC,CAAC,CAAC;QAC7F,OAAOuP,iBAAiB,CAAC/Q,MAAM,GAAG,CAAC,EAAE;UACjC,IAAI5B,OAAO,GAAG2S,iBAAiB,CAAC,CAAC,CAAC;UAClC,IAAI3S,OAAO,EAAE;YACT,IAAI,CAACyI,cAAc,CAACzI,OAAO,EAAEA,OAAO,CAACmE,YAAY,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAI,CAACqE,WAAW,CAACxI,OAAO,EAAE,IAAI,CAACE,UAAU,CAAC;UAC9C;QACJ;MACJ;IACJ;EACJ,CAAC;EACDlD,SAAS,CAACnB,SAAS,CAAC6W,OAAO,GAAG,UAAUG,MAAM,EAAEC,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAChE,IAAI,IAAI,CAACpB,QAAQ,EAAE;MACf,IAAI,IAAI,CAAC9C,IAAI,EAAE;QACX,IAAI,CAACA,IAAI,GAAG,IAAI,CAACA,IAAI,GAAG,IAAI,GAAGiE,IAAI,GAAG,GAAG,GAAGC,IAAI;MACpD,CAAC,MACI;QACD,IAAI,CAAClE,IAAI,GAAG,IAAI,GAAG+D,MAAM,GAAG,GAAG,GAAGC,MAAM;MAC5C;IACJ;EACJ,CAAC;EACD9V,SAAS,CAACnB,SAAS,CAACgW,aAAa,GAAG,UAAU/C,IAAI,EAAE;IAChD,IAAI3R,KAAK,GAAG,IAAI;IAChB,IAAID,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAI8C,OAAO;IACX,IAAIiT,OAAO,GAAGxW,UAAU,CAACS,KAAK,CAACgW,KAAK,CAAC,CAACC,qBAAqB,EAAE;IAC7D,IAAIC,OAAO,GAAGlW,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAAC2G,CAAC,GAAGsK,IAAI,CAAC2C,GAAG,CAACJ,OAAO,CAACK,IAAI,EAAE,CAAC,CAAC;IACrF,IAAIC,OAAO,GAAGrW,KAAK,CAACsC,oBAAoB,CAACC,cAAc,CAACuG,CAAC,GAAG0K,IAAI,CAAC2C,GAAG,CAACJ,OAAO,CAACO,GAAG,EAAE,CAAC,CAAC;IACpF,IAAI,CAAClW,gBAAgB,CAAC,IAAI,CAACG,KAAK,CAAC,GAAG,EAAE;IACtC,KAAK,IAAIiE,EAAE,GAAG,CAAC,EAAEe,EAAE,GAAGvF,KAAK,CAAC0D,aAAa,EAAEc,EAAE,GAAGe,EAAE,CAACb,MAAM,EAAEF,EAAE,EAAE,EAAE;MAC7D,IAAIf,MAAM,GAAG8B,EAAE,CAACf,EAAE,CAAC;MACnBf,MAAM,CAAC+E,MAAM,CAAC+N,MAAM,CAAC,UAAUvR,KAAK,EAAE;QAClC;QACA,IAAIA,KAAK,CAAC0K,eAAe,IAAI1K,KAAK,CAAC0K,eAAe,CAAChL,MAAM,EAAE;UACvD5B,OAAO,GAAG4C,QAAQ,CAAC8Q,gBAAgB,CAACxR,KAAK,CAAC0K,eAAe,CAAC,CAAC,CAAC,CAACxG,CAAC,GAAGgN,OAAO,EAAElR,KAAK,CAAC0K,eAAe,CAAC,CAAC,CAAC,CAAC5G,CAAC,GAAGuN,OAAO,CAAC;QACnH;QACA,IAAIvT,OAAO,KAAK8O,IAAI,EAAE;UAClB5M,KAAK,CAACuK,QAAQ,GAAG,IAAI;UACrB,IAAKtP,KAAK,CAACD,KAAK,CAACyO,mBAAmB,IAAKxO,KAAK,CAAC2D,WAAW,KAAK,OAAO,EAAE;YACpE3D,KAAK,CAACG,gBAAgB,CAACH,KAAK,CAACM,KAAK,CAAC,CAACN,KAAK,CAACK,WAAW,CAAC,GAAG0E,KAAK;YAC9D/E,KAAK,CAACK,WAAW,EAAE;UACvB;QACJ,CAAC,MACI,IAAI,CAAEN,KAAK,CAACyO,mBAAoB,EAAE;UACnCzJ,KAAK,CAACuK,QAAQ,GAAG,KAAK;QAC1B;MACJ,CAAC,CAAC;IACN;IACA,IAAI,CAACjP,WAAW,GAAG,CAAC;EACxB,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIR,SAAS,CAACnB,SAAS,CAAC8X,aAAa,GAAG,YAAY;IAC5C,OAAO,WAAW;EACtB,CAAC;EACD;AACJ;AACA;AACA;AACA;AACA;EACI3W,SAAS,CAACnB,SAAS,CAAC+X,OAAO,GAAG,YAAY;IACtC,IAAI,CAAChU,mBAAmB,EAAE;IAC1B;EACJ,CAAC;;EACD,OAAO5C,SAAS;AACpB,CAAC,CAACD,aAAa,CAAE;AACjB,SAASC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}